
CAN2I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b90  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  08002c50  08002c50  00012c50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002d60  08002d60  00012d60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002d64  08002d64  00012d64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000014  20000000  08002d68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000d34  20000014  08002d7c  00020014  2**2
                  ALLOC
  7 ._user_heap_stack 00000080  20000d48  08002d7c  00020d48  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
  9 .debug_info   000085df  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001739  00000000  00000000  0002861b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000838  00000000  00000000  00029d58  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000760  00000000  00000000  0002a590  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00003187  00000000  00000000  0002acf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000285d  00000000  00000000  0002de77  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  000306d4  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00001de0  00000000  00000000  00030750  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  00032530  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000014 	.word	0x20000014
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002c38 	.word	0x08002c38

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000018 	.word	0x20000018
 8000104:	08002c38 	.word	0x08002c38

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_d2uiz>:
 8000220:	b570      	push	{r4, r5, r6, lr}
 8000222:	2200      	movs	r2, #0
 8000224:	4b0c      	ldr	r3, [pc, #48]	; (8000258 <__aeabi_d2uiz+0x38>)
 8000226:	0004      	movs	r4, r0
 8000228:	000d      	movs	r5, r1
 800022a:	f000 ff01 	bl	8001030 <__aeabi_dcmpge>
 800022e:	2800      	cmp	r0, #0
 8000230:	d104      	bne.n	800023c <__aeabi_d2uiz+0x1c>
 8000232:	0020      	movs	r0, r4
 8000234:	0029      	movs	r1, r5
 8000236:	f000 fe5b 	bl	8000ef0 <__aeabi_d2iz>
 800023a:	bd70      	pop	{r4, r5, r6, pc}
 800023c:	4b06      	ldr	r3, [pc, #24]	; (8000258 <__aeabi_d2uiz+0x38>)
 800023e:	2200      	movs	r2, #0
 8000240:	0020      	movs	r0, r4
 8000242:	0029      	movs	r1, r5
 8000244:	f000 fb3e 	bl	80008c4 <__aeabi_dsub>
 8000248:	f000 fe52 	bl	8000ef0 <__aeabi_d2iz>
 800024c:	2380      	movs	r3, #128	; 0x80
 800024e:	061b      	lsls	r3, r3, #24
 8000250:	469c      	mov	ip, r3
 8000252:	4460      	add	r0, ip
 8000254:	e7f1      	b.n	800023a <__aeabi_d2uiz+0x1a>
 8000256:	46c0      	nop			; (mov r8, r8)
 8000258:	41e00000 	.word	0x41e00000

0800025c <__aeabi_ddiv>:
 800025c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800025e:	4657      	mov	r7, sl
 8000260:	4645      	mov	r5, r8
 8000262:	46de      	mov	lr, fp
 8000264:	464e      	mov	r6, r9
 8000266:	b5e0      	push	{r5, r6, r7, lr}
 8000268:	004c      	lsls	r4, r1, #1
 800026a:	030e      	lsls	r6, r1, #12
 800026c:	b087      	sub	sp, #28
 800026e:	4683      	mov	fp, r0
 8000270:	4692      	mov	sl, r2
 8000272:	001d      	movs	r5, r3
 8000274:	4680      	mov	r8, r0
 8000276:	0b36      	lsrs	r6, r6, #12
 8000278:	0d64      	lsrs	r4, r4, #21
 800027a:	0fcf      	lsrs	r7, r1, #31
 800027c:	2c00      	cmp	r4, #0
 800027e:	d04f      	beq.n	8000320 <__aeabi_ddiv+0xc4>
 8000280:	4b6f      	ldr	r3, [pc, #444]	; (8000440 <__aeabi_ddiv+0x1e4>)
 8000282:	429c      	cmp	r4, r3
 8000284:	d035      	beq.n	80002f2 <__aeabi_ddiv+0x96>
 8000286:	2380      	movs	r3, #128	; 0x80
 8000288:	0f42      	lsrs	r2, r0, #29
 800028a:	041b      	lsls	r3, r3, #16
 800028c:	00f6      	lsls	r6, r6, #3
 800028e:	4313      	orrs	r3, r2
 8000290:	4333      	orrs	r3, r6
 8000292:	4699      	mov	r9, r3
 8000294:	00c3      	lsls	r3, r0, #3
 8000296:	4698      	mov	r8, r3
 8000298:	4b6a      	ldr	r3, [pc, #424]	; (8000444 <__aeabi_ddiv+0x1e8>)
 800029a:	2600      	movs	r6, #0
 800029c:	469c      	mov	ip, r3
 800029e:	2300      	movs	r3, #0
 80002a0:	4464      	add	r4, ip
 80002a2:	9303      	str	r3, [sp, #12]
 80002a4:	032b      	lsls	r3, r5, #12
 80002a6:	0b1b      	lsrs	r3, r3, #12
 80002a8:	469b      	mov	fp, r3
 80002aa:	006b      	lsls	r3, r5, #1
 80002ac:	0fed      	lsrs	r5, r5, #31
 80002ae:	4650      	mov	r0, sl
 80002b0:	0d5b      	lsrs	r3, r3, #21
 80002b2:	9501      	str	r5, [sp, #4]
 80002b4:	d05e      	beq.n	8000374 <__aeabi_ddiv+0x118>
 80002b6:	4a62      	ldr	r2, [pc, #392]	; (8000440 <__aeabi_ddiv+0x1e4>)
 80002b8:	4293      	cmp	r3, r2
 80002ba:	d053      	beq.n	8000364 <__aeabi_ddiv+0x108>
 80002bc:	465a      	mov	r2, fp
 80002be:	00d1      	lsls	r1, r2, #3
 80002c0:	2280      	movs	r2, #128	; 0x80
 80002c2:	0f40      	lsrs	r0, r0, #29
 80002c4:	0412      	lsls	r2, r2, #16
 80002c6:	4302      	orrs	r2, r0
 80002c8:	430a      	orrs	r2, r1
 80002ca:	4693      	mov	fp, r2
 80002cc:	4652      	mov	r2, sl
 80002ce:	00d1      	lsls	r1, r2, #3
 80002d0:	4a5c      	ldr	r2, [pc, #368]	; (8000444 <__aeabi_ddiv+0x1e8>)
 80002d2:	4694      	mov	ip, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	4463      	add	r3, ip
 80002d8:	0038      	movs	r0, r7
 80002da:	4068      	eors	r0, r5
 80002dc:	4684      	mov	ip, r0
 80002de:	9002      	str	r0, [sp, #8]
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	4316      	orrs	r6, r2
 80002e4:	2e0f      	cmp	r6, #15
 80002e6:	d900      	bls.n	80002ea <__aeabi_ddiv+0x8e>
 80002e8:	e0b4      	b.n	8000454 <__aeabi_ddiv+0x1f8>
 80002ea:	4b57      	ldr	r3, [pc, #348]	; (8000448 <__aeabi_ddiv+0x1ec>)
 80002ec:	00b6      	lsls	r6, r6, #2
 80002ee:	599b      	ldr	r3, [r3, r6]
 80002f0:	469f      	mov	pc, r3
 80002f2:	0003      	movs	r3, r0
 80002f4:	4333      	orrs	r3, r6
 80002f6:	4699      	mov	r9, r3
 80002f8:	d16c      	bne.n	80003d4 <__aeabi_ddiv+0x178>
 80002fa:	2300      	movs	r3, #0
 80002fc:	4698      	mov	r8, r3
 80002fe:	3302      	adds	r3, #2
 8000300:	2608      	movs	r6, #8
 8000302:	9303      	str	r3, [sp, #12]
 8000304:	e7ce      	b.n	80002a4 <__aeabi_ddiv+0x48>
 8000306:	46cb      	mov	fp, r9
 8000308:	4641      	mov	r1, r8
 800030a:	9a03      	ldr	r2, [sp, #12]
 800030c:	9701      	str	r7, [sp, #4]
 800030e:	2a02      	cmp	r2, #2
 8000310:	d165      	bne.n	80003de <__aeabi_ddiv+0x182>
 8000312:	9b01      	ldr	r3, [sp, #4]
 8000314:	4c4a      	ldr	r4, [pc, #296]	; (8000440 <__aeabi_ddiv+0x1e4>)
 8000316:	469c      	mov	ip, r3
 8000318:	2300      	movs	r3, #0
 800031a:	2200      	movs	r2, #0
 800031c:	4698      	mov	r8, r3
 800031e:	e06b      	b.n	80003f8 <__aeabi_ddiv+0x19c>
 8000320:	0003      	movs	r3, r0
 8000322:	4333      	orrs	r3, r6
 8000324:	4699      	mov	r9, r3
 8000326:	d04e      	beq.n	80003c6 <__aeabi_ddiv+0x16a>
 8000328:	2e00      	cmp	r6, #0
 800032a:	d100      	bne.n	800032e <__aeabi_ddiv+0xd2>
 800032c:	e1bc      	b.n	80006a8 <__aeabi_ddiv+0x44c>
 800032e:	0030      	movs	r0, r6
 8000330:	f000 fe88 	bl	8001044 <__clzsi2>
 8000334:	0003      	movs	r3, r0
 8000336:	3b0b      	subs	r3, #11
 8000338:	2b1c      	cmp	r3, #28
 800033a:	dd00      	ble.n	800033e <__aeabi_ddiv+0xe2>
 800033c:	e1ac      	b.n	8000698 <__aeabi_ddiv+0x43c>
 800033e:	221d      	movs	r2, #29
 8000340:	1ad3      	subs	r3, r2, r3
 8000342:	465a      	mov	r2, fp
 8000344:	0001      	movs	r1, r0
 8000346:	40da      	lsrs	r2, r3
 8000348:	3908      	subs	r1, #8
 800034a:	408e      	lsls	r6, r1
 800034c:	0013      	movs	r3, r2
 800034e:	4333      	orrs	r3, r6
 8000350:	4699      	mov	r9, r3
 8000352:	465b      	mov	r3, fp
 8000354:	408b      	lsls	r3, r1
 8000356:	4698      	mov	r8, r3
 8000358:	2300      	movs	r3, #0
 800035a:	4c3c      	ldr	r4, [pc, #240]	; (800044c <__aeabi_ddiv+0x1f0>)
 800035c:	2600      	movs	r6, #0
 800035e:	1a24      	subs	r4, r4, r0
 8000360:	9303      	str	r3, [sp, #12]
 8000362:	e79f      	b.n	80002a4 <__aeabi_ddiv+0x48>
 8000364:	4651      	mov	r1, sl
 8000366:	465a      	mov	r2, fp
 8000368:	4311      	orrs	r1, r2
 800036a:	d129      	bne.n	80003c0 <__aeabi_ddiv+0x164>
 800036c:	2200      	movs	r2, #0
 800036e:	4693      	mov	fp, r2
 8000370:	3202      	adds	r2, #2
 8000372:	e7b1      	b.n	80002d8 <__aeabi_ddiv+0x7c>
 8000374:	4659      	mov	r1, fp
 8000376:	4301      	orrs	r1, r0
 8000378:	d01e      	beq.n	80003b8 <__aeabi_ddiv+0x15c>
 800037a:	465b      	mov	r3, fp
 800037c:	2b00      	cmp	r3, #0
 800037e:	d100      	bne.n	8000382 <__aeabi_ddiv+0x126>
 8000380:	e19e      	b.n	80006c0 <__aeabi_ddiv+0x464>
 8000382:	4658      	mov	r0, fp
 8000384:	f000 fe5e 	bl	8001044 <__clzsi2>
 8000388:	0003      	movs	r3, r0
 800038a:	3b0b      	subs	r3, #11
 800038c:	2b1c      	cmp	r3, #28
 800038e:	dd00      	ble.n	8000392 <__aeabi_ddiv+0x136>
 8000390:	e18f      	b.n	80006b2 <__aeabi_ddiv+0x456>
 8000392:	0002      	movs	r2, r0
 8000394:	4659      	mov	r1, fp
 8000396:	3a08      	subs	r2, #8
 8000398:	4091      	lsls	r1, r2
 800039a:	468b      	mov	fp, r1
 800039c:	211d      	movs	r1, #29
 800039e:	1acb      	subs	r3, r1, r3
 80003a0:	4651      	mov	r1, sl
 80003a2:	40d9      	lsrs	r1, r3
 80003a4:	000b      	movs	r3, r1
 80003a6:	4659      	mov	r1, fp
 80003a8:	430b      	orrs	r3, r1
 80003aa:	4651      	mov	r1, sl
 80003ac:	469b      	mov	fp, r3
 80003ae:	4091      	lsls	r1, r2
 80003b0:	4b26      	ldr	r3, [pc, #152]	; (800044c <__aeabi_ddiv+0x1f0>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	1a1b      	subs	r3, r3, r0
 80003b6:	e78f      	b.n	80002d8 <__aeabi_ddiv+0x7c>
 80003b8:	2300      	movs	r3, #0
 80003ba:	2201      	movs	r2, #1
 80003bc:	469b      	mov	fp, r3
 80003be:	e78b      	b.n	80002d8 <__aeabi_ddiv+0x7c>
 80003c0:	4651      	mov	r1, sl
 80003c2:	2203      	movs	r2, #3
 80003c4:	e788      	b.n	80002d8 <__aeabi_ddiv+0x7c>
 80003c6:	2300      	movs	r3, #0
 80003c8:	4698      	mov	r8, r3
 80003ca:	3301      	adds	r3, #1
 80003cc:	2604      	movs	r6, #4
 80003ce:	2400      	movs	r4, #0
 80003d0:	9303      	str	r3, [sp, #12]
 80003d2:	e767      	b.n	80002a4 <__aeabi_ddiv+0x48>
 80003d4:	2303      	movs	r3, #3
 80003d6:	46b1      	mov	r9, r6
 80003d8:	9303      	str	r3, [sp, #12]
 80003da:	260c      	movs	r6, #12
 80003dc:	e762      	b.n	80002a4 <__aeabi_ddiv+0x48>
 80003de:	2a03      	cmp	r2, #3
 80003e0:	d100      	bne.n	80003e4 <__aeabi_ddiv+0x188>
 80003e2:	e25c      	b.n	800089e <__aeabi_ddiv+0x642>
 80003e4:	9b01      	ldr	r3, [sp, #4]
 80003e6:	2a01      	cmp	r2, #1
 80003e8:	d000      	beq.n	80003ec <__aeabi_ddiv+0x190>
 80003ea:	e1e4      	b.n	80007b6 <__aeabi_ddiv+0x55a>
 80003ec:	4013      	ands	r3, r2
 80003ee:	469c      	mov	ip, r3
 80003f0:	2300      	movs	r3, #0
 80003f2:	2400      	movs	r4, #0
 80003f4:	2200      	movs	r2, #0
 80003f6:	4698      	mov	r8, r3
 80003f8:	2100      	movs	r1, #0
 80003fa:	0312      	lsls	r2, r2, #12
 80003fc:	0b13      	lsrs	r3, r2, #12
 80003fe:	0d0a      	lsrs	r2, r1, #20
 8000400:	0512      	lsls	r2, r2, #20
 8000402:	431a      	orrs	r2, r3
 8000404:	0523      	lsls	r3, r4, #20
 8000406:	4c12      	ldr	r4, [pc, #72]	; (8000450 <__aeabi_ddiv+0x1f4>)
 8000408:	4640      	mov	r0, r8
 800040a:	4022      	ands	r2, r4
 800040c:	4313      	orrs	r3, r2
 800040e:	4662      	mov	r2, ip
 8000410:	005b      	lsls	r3, r3, #1
 8000412:	07d2      	lsls	r2, r2, #31
 8000414:	085b      	lsrs	r3, r3, #1
 8000416:	4313      	orrs	r3, r2
 8000418:	0019      	movs	r1, r3
 800041a:	b007      	add	sp, #28
 800041c:	bc3c      	pop	{r2, r3, r4, r5}
 800041e:	4690      	mov	r8, r2
 8000420:	4699      	mov	r9, r3
 8000422:	46a2      	mov	sl, r4
 8000424:	46ab      	mov	fp, r5
 8000426:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000428:	2300      	movs	r3, #0
 800042a:	2280      	movs	r2, #128	; 0x80
 800042c:	469c      	mov	ip, r3
 800042e:	0312      	lsls	r2, r2, #12
 8000430:	4698      	mov	r8, r3
 8000432:	4c03      	ldr	r4, [pc, #12]	; (8000440 <__aeabi_ddiv+0x1e4>)
 8000434:	e7e0      	b.n	80003f8 <__aeabi_ddiv+0x19c>
 8000436:	2300      	movs	r3, #0
 8000438:	4c01      	ldr	r4, [pc, #4]	; (8000440 <__aeabi_ddiv+0x1e4>)
 800043a:	2200      	movs	r2, #0
 800043c:	4698      	mov	r8, r3
 800043e:	e7db      	b.n	80003f8 <__aeabi_ddiv+0x19c>
 8000440:	000007ff 	.word	0x000007ff
 8000444:	fffffc01 	.word	0xfffffc01
 8000448:	08002c50 	.word	0x08002c50
 800044c:	fffffc0d 	.word	0xfffffc0d
 8000450:	800fffff 	.word	0x800fffff
 8000454:	45d9      	cmp	r9, fp
 8000456:	d900      	bls.n	800045a <__aeabi_ddiv+0x1fe>
 8000458:	e139      	b.n	80006ce <__aeabi_ddiv+0x472>
 800045a:	d100      	bne.n	800045e <__aeabi_ddiv+0x202>
 800045c:	e134      	b.n	80006c8 <__aeabi_ddiv+0x46c>
 800045e:	2300      	movs	r3, #0
 8000460:	4646      	mov	r6, r8
 8000462:	464d      	mov	r5, r9
 8000464:	469a      	mov	sl, r3
 8000466:	3c01      	subs	r4, #1
 8000468:	465b      	mov	r3, fp
 800046a:	0e0a      	lsrs	r2, r1, #24
 800046c:	021b      	lsls	r3, r3, #8
 800046e:	431a      	orrs	r2, r3
 8000470:	020b      	lsls	r3, r1, #8
 8000472:	0c17      	lsrs	r7, r2, #16
 8000474:	9303      	str	r3, [sp, #12]
 8000476:	0413      	lsls	r3, r2, #16
 8000478:	0c1b      	lsrs	r3, r3, #16
 800047a:	0039      	movs	r1, r7
 800047c:	0028      	movs	r0, r5
 800047e:	4690      	mov	r8, r2
 8000480:	9301      	str	r3, [sp, #4]
 8000482:	f7ff fe41 	bl	8000108 <__udivsi3>
 8000486:	0002      	movs	r2, r0
 8000488:	9b01      	ldr	r3, [sp, #4]
 800048a:	4683      	mov	fp, r0
 800048c:	435a      	muls	r2, r3
 800048e:	0028      	movs	r0, r5
 8000490:	0039      	movs	r1, r7
 8000492:	4691      	mov	r9, r2
 8000494:	f7ff febe 	bl	8000214 <__aeabi_uidivmod>
 8000498:	0c35      	lsrs	r5, r6, #16
 800049a:	0409      	lsls	r1, r1, #16
 800049c:	430d      	orrs	r5, r1
 800049e:	45a9      	cmp	r9, r5
 80004a0:	d90d      	bls.n	80004be <__aeabi_ddiv+0x262>
 80004a2:	465b      	mov	r3, fp
 80004a4:	4445      	add	r5, r8
 80004a6:	3b01      	subs	r3, #1
 80004a8:	45a8      	cmp	r8, r5
 80004aa:	d900      	bls.n	80004ae <__aeabi_ddiv+0x252>
 80004ac:	e13a      	b.n	8000724 <__aeabi_ddiv+0x4c8>
 80004ae:	45a9      	cmp	r9, r5
 80004b0:	d800      	bhi.n	80004b4 <__aeabi_ddiv+0x258>
 80004b2:	e137      	b.n	8000724 <__aeabi_ddiv+0x4c8>
 80004b4:	2302      	movs	r3, #2
 80004b6:	425b      	negs	r3, r3
 80004b8:	469c      	mov	ip, r3
 80004ba:	4445      	add	r5, r8
 80004bc:	44e3      	add	fp, ip
 80004be:	464b      	mov	r3, r9
 80004c0:	1aeb      	subs	r3, r5, r3
 80004c2:	0039      	movs	r1, r7
 80004c4:	0018      	movs	r0, r3
 80004c6:	9304      	str	r3, [sp, #16]
 80004c8:	f7ff fe1e 	bl	8000108 <__udivsi3>
 80004cc:	9b01      	ldr	r3, [sp, #4]
 80004ce:	0005      	movs	r5, r0
 80004d0:	4343      	muls	r3, r0
 80004d2:	0039      	movs	r1, r7
 80004d4:	9804      	ldr	r0, [sp, #16]
 80004d6:	4699      	mov	r9, r3
 80004d8:	f7ff fe9c 	bl	8000214 <__aeabi_uidivmod>
 80004dc:	0433      	lsls	r3, r6, #16
 80004de:	0409      	lsls	r1, r1, #16
 80004e0:	0c1b      	lsrs	r3, r3, #16
 80004e2:	430b      	orrs	r3, r1
 80004e4:	4599      	cmp	r9, r3
 80004e6:	d909      	bls.n	80004fc <__aeabi_ddiv+0x2a0>
 80004e8:	4443      	add	r3, r8
 80004ea:	1e6a      	subs	r2, r5, #1
 80004ec:	4598      	cmp	r8, r3
 80004ee:	d900      	bls.n	80004f2 <__aeabi_ddiv+0x296>
 80004f0:	e11a      	b.n	8000728 <__aeabi_ddiv+0x4cc>
 80004f2:	4599      	cmp	r9, r3
 80004f4:	d800      	bhi.n	80004f8 <__aeabi_ddiv+0x29c>
 80004f6:	e117      	b.n	8000728 <__aeabi_ddiv+0x4cc>
 80004f8:	3d02      	subs	r5, #2
 80004fa:	4443      	add	r3, r8
 80004fc:	464a      	mov	r2, r9
 80004fe:	1a9b      	subs	r3, r3, r2
 8000500:	465a      	mov	r2, fp
 8000502:	0412      	lsls	r2, r2, #16
 8000504:	432a      	orrs	r2, r5
 8000506:	9903      	ldr	r1, [sp, #12]
 8000508:	4693      	mov	fp, r2
 800050a:	0c10      	lsrs	r0, r2, #16
 800050c:	0c0a      	lsrs	r2, r1, #16
 800050e:	4691      	mov	r9, r2
 8000510:	0409      	lsls	r1, r1, #16
 8000512:	465a      	mov	r2, fp
 8000514:	0c09      	lsrs	r1, r1, #16
 8000516:	464e      	mov	r6, r9
 8000518:	000d      	movs	r5, r1
 800051a:	0412      	lsls	r2, r2, #16
 800051c:	0c12      	lsrs	r2, r2, #16
 800051e:	4345      	muls	r5, r0
 8000520:	9105      	str	r1, [sp, #20]
 8000522:	4351      	muls	r1, r2
 8000524:	4372      	muls	r2, r6
 8000526:	4370      	muls	r0, r6
 8000528:	1952      	adds	r2, r2, r5
 800052a:	0c0e      	lsrs	r6, r1, #16
 800052c:	18b2      	adds	r2, r6, r2
 800052e:	4295      	cmp	r5, r2
 8000530:	d903      	bls.n	800053a <__aeabi_ddiv+0x2de>
 8000532:	2580      	movs	r5, #128	; 0x80
 8000534:	026d      	lsls	r5, r5, #9
 8000536:	46ac      	mov	ip, r5
 8000538:	4460      	add	r0, ip
 800053a:	0c15      	lsrs	r5, r2, #16
 800053c:	0409      	lsls	r1, r1, #16
 800053e:	0412      	lsls	r2, r2, #16
 8000540:	0c09      	lsrs	r1, r1, #16
 8000542:	1828      	adds	r0, r5, r0
 8000544:	1852      	adds	r2, r2, r1
 8000546:	4283      	cmp	r3, r0
 8000548:	d200      	bcs.n	800054c <__aeabi_ddiv+0x2f0>
 800054a:	e0ce      	b.n	80006ea <__aeabi_ddiv+0x48e>
 800054c:	d100      	bne.n	8000550 <__aeabi_ddiv+0x2f4>
 800054e:	e0c8      	b.n	80006e2 <__aeabi_ddiv+0x486>
 8000550:	1a1d      	subs	r5, r3, r0
 8000552:	4653      	mov	r3, sl
 8000554:	1a9e      	subs	r6, r3, r2
 8000556:	45b2      	cmp	sl, r6
 8000558:	4192      	sbcs	r2, r2
 800055a:	4252      	negs	r2, r2
 800055c:	1aab      	subs	r3, r5, r2
 800055e:	469a      	mov	sl, r3
 8000560:	4598      	cmp	r8, r3
 8000562:	d100      	bne.n	8000566 <__aeabi_ddiv+0x30a>
 8000564:	e117      	b.n	8000796 <__aeabi_ddiv+0x53a>
 8000566:	0039      	movs	r1, r7
 8000568:	0018      	movs	r0, r3
 800056a:	f7ff fdcd 	bl	8000108 <__udivsi3>
 800056e:	9b01      	ldr	r3, [sp, #4]
 8000570:	0005      	movs	r5, r0
 8000572:	4343      	muls	r3, r0
 8000574:	0039      	movs	r1, r7
 8000576:	4650      	mov	r0, sl
 8000578:	9304      	str	r3, [sp, #16]
 800057a:	f7ff fe4b 	bl	8000214 <__aeabi_uidivmod>
 800057e:	9804      	ldr	r0, [sp, #16]
 8000580:	040b      	lsls	r3, r1, #16
 8000582:	0c31      	lsrs	r1, r6, #16
 8000584:	4319      	orrs	r1, r3
 8000586:	4288      	cmp	r0, r1
 8000588:	d909      	bls.n	800059e <__aeabi_ddiv+0x342>
 800058a:	4441      	add	r1, r8
 800058c:	1e6b      	subs	r3, r5, #1
 800058e:	4588      	cmp	r8, r1
 8000590:	d900      	bls.n	8000594 <__aeabi_ddiv+0x338>
 8000592:	e107      	b.n	80007a4 <__aeabi_ddiv+0x548>
 8000594:	4288      	cmp	r0, r1
 8000596:	d800      	bhi.n	800059a <__aeabi_ddiv+0x33e>
 8000598:	e104      	b.n	80007a4 <__aeabi_ddiv+0x548>
 800059a:	3d02      	subs	r5, #2
 800059c:	4441      	add	r1, r8
 800059e:	9b04      	ldr	r3, [sp, #16]
 80005a0:	1acb      	subs	r3, r1, r3
 80005a2:	0018      	movs	r0, r3
 80005a4:	0039      	movs	r1, r7
 80005a6:	9304      	str	r3, [sp, #16]
 80005a8:	f7ff fdae 	bl	8000108 <__udivsi3>
 80005ac:	9b01      	ldr	r3, [sp, #4]
 80005ae:	4682      	mov	sl, r0
 80005b0:	4343      	muls	r3, r0
 80005b2:	0039      	movs	r1, r7
 80005b4:	9804      	ldr	r0, [sp, #16]
 80005b6:	9301      	str	r3, [sp, #4]
 80005b8:	f7ff fe2c 	bl	8000214 <__aeabi_uidivmod>
 80005bc:	9801      	ldr	r0, [sp, #4]
 80005be:	040b      	lsls	r3, r1, #16
 80005c0:	0431      	lsls	r1, r6, #16
 80005c2:	0c09      	lsrs	r1, r1, #16
 80005c4:	4319      	orrs	r1, r3
 80005c6:	4288      	cmp	r0, r1
 80005c8:	d90d      	bls.n	80005e6 <__aeabi_ddiv+0x38a>
 80005ca:	4653      	mov	r3, sl
 80005cc:	4441      	add	r1, r8
 80005ce:	3b01      	subs	r3, #1
 80005d0:	4588      	cmp	r8, r1
 80005d2:	d900      	bls.n	80005d6 <__aeabi_ddiv+0x37a>
 80005d4:	e0e8      	b.n	80007a8 <__aeabi_ddiv+0x54c>
 80005d6:	4288      	cmp	r0, r1
 80005d8:	d800      	bhi.n	80005dc <__aeabi_ddiv+0x380>
 80005da:	e0e5      	b.n	80007a8 <__aeabi_ddiv+0x54c>
 80005dc:	2302      	movs	r3, #2
 80005de:	425b      	negs	r3, r3
 80005e0:	469c      	mov	ip, r3
 80005e2:	4441      	add	r1, r8
 80005e4:	44e2      	add	sl, ip
 80005e6:	9b01      	ldr	r3, [sp, #4]
 80005e8:	042d      	lsls	r5, r5, #16
 80005ea:	1ace      	subs	r6, r1, r3
 80005ec:	4651      	mov	r1, sl
 80005ee:	4329      	orrs	r1, r5
 80005f0:	9d05      	ldr	r5, [sp, #20]
 80005f2:	464f      	mov	r7, r9
 80005f4:	002a      	movs	r2, r5
 80005f6:	040b      	lsls	r3, r1, #16
 80005f8:	0c08      	lsrs	r0, r1, #16
 80005fa:	0c1b      	lsrs	r3, r3, #16
 80005fc:	435a      	muls	r2, r3
 80005fe:	4345      	muls	r5, r0
 8000600:	437b      	muls	r3, r7
 8000602:	4378      	muls	r0, r7
 8000604:	195b      	adds	r3, r3, r5
 8000606:	0c17      	lsrs	r7, r2, #16
 8000608:	18fb      	adds	r3, r7, r3
 800060a:	429d      	cmp	r5, r3
 800060c:	d903      	bls.n	8000616 <__aeabi_ddiv+0x3ba>
 800060e:	2580      	movs	r5, #128	; 0x80
 8000610:	026d      	lsls	r5, r5, #9
 8000612:	46ac      	mov	ip, r5
 8000614:	4460      	add	r0, ip
 8000616:	0c1d      	lsrs	r5, r3, #16
 8000618:	0412      	lsls	r2, r2, #16
 800061a:	041b      	lsls	r3, r3, #16
 800061c:	0c12      	lsrs	r2, r2, #16
 800061e:	1828      	adds	r0, r5, r0
 8000620:	189b      	adds	r3, r3, r2
 8000622:	4286      	cmp	r6, r0
 8000624:	d200      	bcs.n	8000628 <__aeabi_ddiv+0x3cc>
 8000626:	e093      	b.n	8000750 <__aeabi_ddiv+0x4f4>
 8000628:	d100      	bne.n	800062c <__aeabi_ddiv+0x3d0>
 800062a:	e08e      	b.n	800074a <__aeabi_ddiv+0x4ee>
 800062c:	2301      	movs	r3, #1
 800062e:	4319      	orrs	r1, r3
 8000630:	4ba0      	ldr	r3, [pc, #640]	; (80008b4 <__aeabi_ddiv+0x658>)
 8000632:	18e3      	adds	r3, r4, r3
 8000634:	2b00      	cmp	r3, #0
 8000636:	dc00      	bgt.n	800063a <__aeabi_ddiv+0x3de>
 8000638:	e099      	b.n	800076e <__aeabi_ddiv+0x512>
 800063a:	074a      	lsls	r2, r1, #29
 800063c:	d000      	beq.n	8000640 <__aeabi_ddiv+0x3e4>
 800063e:	e09e      	b.n	800077e <__aeabi_ddiv+0x522>
 8000640:	465a      	mov	r2, fp
 8000642:	01d2      	lsls	r2, r2, #7
 8000644:	d506      	bpl.n	8000654 <__aeabi_ddiv+0x3f8>
 8000646:	465a      	mov	r2, fp
 8000648:	4b9b      	ldr	r3, [pc, #620]	; (80008b8 <__aeabi_ddiv+0x65c>)
 800064a:	401a      	ands	r2, r3
 800064c:	2380      	movs	r3, #128	; 0x80
 800064e:	4693      	mov	fp, r2
 8000650:	00db      	lsls	r3, r3, #3
 8000652:	18e3      	adds	r3, r4, r3
 8000654:	4a99      	ldr	r2, [pc, #612]	; (80008bc <__aeabi_ddiv+0x660>)
 8000656:	4293      	cmp	r3, r2
 8000658:	dd68      	ble.n	800072c <__aeabi_ddiv+0x4d0>
 800065a:	2301      	movs	r3, #1
 800065c:	9a02      	ldr	r2, [sp, #8]
 800065e:	4c98      	ldr	r4, [pc, #608]	; (80008c0 <__aeabi_ddiv+0x664>)
 8000660:	401a      	ands	r2, r3
 8000662:	2300      	movs	r3, #0
 8000664:	4694      	mov	ip, r2
 8000666:	4698      	mov	r8, r3
 8000668:	2200      	movs	r2, #0
 800066a:	e6c5      	b.n	80003f8 <__aeabi_ddiv+0x19c>
 800066c:	2280      	movs	r2, #128	; 0x80
 800066e:	464b      	mov	r3, r9
 8000670:	0312      	lsls	r2, r2, #12
 8000672:	4213      	tst	r3, r2
 8000674:	d00a      	beq.n	800068c <__aeabi_ddiv+0x430>
 8000676:	465b      	mov	r3, fp
 8000678:	4213      	tst	r3, r2
 800067a:	d106      	bne.n	800068a <__aeabi_ddiv+0x42e>
 800067c:	431a      	orrs	r2, r3
 800067e:	0312      	lsls	r2, r2, #12
 8000680:	0b12      	lsrs	r2, r2, #12
 8000682:	46ac      	mov	ip, r5
 8000684:	4688      	mov	r8, r1
 8000686:	4c8e      	ldr	r4, [pc, #568]	; (80008c0 <__aeabi_ddiv+0x664>)
 8000688:	e6b6      	b.n	80003f8 <__aeabi_ddiv+0x19c>
 800068a:	464b      	mov	r3, r9
 800068c:	431a      	orrs	r2, r3
 800068e:	0312      	lsls	r2, r2, #12
 8000690:	0b12      	lsrs	r2, r2, #12
 8000692:	46bc      	mov	ip, r7
 8000694:	4c8a      	ldr	r4, [pc, #552]	; (80008c0 <__aeabi_ddiv+0x664>)
 8000696:	e6af      	b.n	80003f8 <__aeabi_ddiv+0x19c>
 8000698:	0003      	movs	r3, r0
 800069a:	465a      	mov	r2, fp
 800069c:	3b28      	subs	r3, #40	; 0x28
 800069e:	409a      	lsls	r2, r3
 80006a0:	2300      	movs	r3, #0
 80006a2:	4691      	mov	r9, r2
 80006a4:	4698      	mov	r8, r3
 80006a6:	e657      	b.n	8000358 <__aeabi_ddiv+0xfc>
 80006a8:	4658      	mov	r0, fp
 80006aa:	f000 fccb 	bl	8001044 <__clzsi2>
 80006ae:	3020      	adds	r0, #32
 80006b0:	e640      	b.n	8000334 <__aeabi_ddiv+0xd8>
 80006b2:	0003      	movs	r3, r0
 80006b4:	4652      	mov	r2, sl
 80006b6:	3b28      	subs	r3, #40	; 0x28
 80006b8:	409a      	lsls	r2, r3
 80006ba:	2100      	movs	r1, #0
 80006bc:	4693      	mov	fp, r2
 80006be:	e677      	b.n	80003b0 <__aeabi_ddiv+0x154>
 80006c0:	f000 fcc0 	bl	8001044 <__clzsi2>
 80006c4:	3020      	adds	r0, #32
 80006c6:	e65f      	b.n	8000388 <__aeabi_ddiv+0x12c>
 80006c8:	4588      	cmp	r8, r1
 80006ca:	d200      	bcs.n	80006ce <__aeabi_ddiv+0x472>
 80006cc:	e6c7      	b.n	800045e <__aeabi_ddiv+0x202>
 80006ce:	464b      	mov	r3, r9
 80006d0:	07de      	lsls	r6, r3, #31
 80006d2:	085d      	lsrs	r5, r3, #1
 80006d4:	4643      	mov	r3, r8
 80006d6:	085b      	lsrs	r3, r3, #1
 80006d8:	431e      	orrs	r6, r3
 80006da:	4643      	mov	r3, r8
 80006dc:	07db      	lsls	r3, r3, #31
 80006de:	469a      	mov	sl, r3
 80006e0:	e6c2      	b.n	8000468 <__aeabi_ddiv+0x20c>
 80006e2:	2500      	movs	r5, #0
 80006e4:	4592      	cmp	sl, r2
 80006e6:	d300      	bcc.n	80006ea <__aeabi_ddiv+0x48e>
 80006e8:	e733      	b.n	8000552 <__aeabi_ddiv+0x2f6>
 80006ea:	9e03      	ldr	r6, [sp, #12]
 80006ec:	4659      	mov	r1, fp
 80006ee:	46b4      	mov	ip, r6
 80006f0:	44e2      	add	sl, ip
 80006f2:	45b2      	cmp	sl, r6
 80006f4:	41ad      	sbcs	r5, r5
 80006f6:	426d      	negs	r5, r5
 80006f8:	4445      	add	r5, r8
 80006fa:	18eb      	adds	r3, r5, r3
 80006fc:	3901      	subs	r1, #1
 80006fe:	4598      	cmp	r8, r3
 8000700:	d207      	bcs.n	8000712 <__aeabi_ddiv+0x4b6>
 8000702:	4298      	cmp	r0, r3
 8000704:	d900      	bls.n	8000708 <__aeabi_ddiv+0x4ac>
 8000706:	e07f      	b.n	8000808 <__aeabi_ddiv+0x5ac>
 8000708:	d100      	bne.n	800070c <__aeabi_ddiv+0x4b0>
 800070a:	e0bc      	b.n	8000886 <__aeabi_ddiv+0x62a>
 800070c:	1a1d      	subs	r5, r3, r0
 800070e:	468b      	mov	fp, r1
 8000710:	e71f      	b.n	8000552 <__aeabi_ddiv+0x2f6>
 8000712:	4598      	cmp	r8, r3
 8000714:	d1fa      	bne.n	800070c <__aeabi_ddiv+0x4b0>
 8000716:	9d03      	ldr	r5, [sp, #12]
 8000718:	4555      	cmp	r5, sl
 800071a:	d9f2      	bls.n	8000702 <__aeabi_ddiv+0x4a6>
 800071c:	4643      	mov	r3, r8
 800071e:	468b      	mov	fp, r1
 8000720:	1a1d      	subs	r5, r3, r0
 8000722:	e716      	b.n	8000552 <__aeabi_ddiv+0x2f6>
 8000724:	469b      	mov	fp, r3
 8000726:	e6ca      	b.n	80004be <__aeabi_ddiv+0x262>
 8000728:	0015      	movs	r5, r2
 800072a:	e6e7      	b.n	80004fc <__aeabi_ddiv+0x2a0>
 800072c:	465a      	mov	r2, fp
 800072e:	08c9      	lsrs	r1, r1, #3
 8000730:	0752      	lsls	r2, r2, #29
 8000732:	430a      	orrs	r2, r1
 8000734:	055b      	lsls	r3, r3, #21
 8000736:	4690      	mov	r8, r2
 8000738:	0d5c      	lsrs	r4, r3, #21
 800073a:	465a      	mov	r2, fp
 800073c:	2301      	movs	r3, #1
 800073e:	9902      	ldr	r1, [sp, #8]
 8000740:	0252      	lsls	r2, r2, #9
 8000742:	4019      	ands	r1, r3
 8000744:	0b12      	lsrs	r2, r2, #12
 8000746:	468c      	mov	ip, r1
 8000748:	e656      	b.n	80003f8 <__aeabi_ddiv+0x19c>
 800074a:	2b00      	cmp	r3, #0
 800074c:	d100      	bne.n	8000750 <__aeabi_ddiv+0x4f4>
 800074e:	e76f      	b.n	8000630 <__aeabi_ddiv+0x3d4>
 8000750:	4446      	add	r6, r8
 8000752:	1e4a      	subs	r2, r1, #1
 8000754:	45b0      	cmp	r8, r6
 8000756:	d929      	bls.n	80007ac <__aeabi_ddiv+0x550>
 8000758:	0011      	movs	r1, r2
 800075a:	4286      	cmp	r6, r0
 800075c:	d000      	beq.n	8000760 <__aeabi_ddiv+0x504>
 800075e:	e765      	b.n	800062c <__aeabi_ddiv+0x3d0>
 8000760:	9a03      	ldr	r2, [sp, #12]
 8000762:	4293      	cmp	r3, r2
 8000764:	d000      	beq.n	8000768 <__aeabi_ddiv+0x50c>
 8000766:	e761      	b.n	800062c <__aeabi_ddiv+0x3d0>
 8000768:	e762      	b.n	8000630 <__aeabi_ddiv+0x3d4>
 800076a:	2101      	movs	r1, #1
 800076c:	4249      	negs	r1, r1
 800076e:	2001      	movs	r0, #1
 8000770:	1ac2      	subs	r2, r0, r3
 8000772:	2a38      	cmp	r2, #56	; 0x38
 8000774:	dd21      	ble.n	80007ba <__aeabi_ddiv+0x55e>
 8000776:	9b02      	ldr	r3, [sp, #8]
 8000778:	4003      	ands	r3, r0
 800077a:	469c      	mov	ip, r3
 800077c:	e638      	b.n	80003f0 <__aeabi_ddiv+0x194>
 800077e:	220f      	movs	r2, #15
 8000780:	400a      	ands	r2, r1
 8000782:	2a04      	cmp	r2, #4
 8000784:	d100      	bne.n	8000788 <__aeabi_ddiv+0x52c>
 8000786:	e75b      	b.n	8000640 <__aeabi_ddiv+0x3e4>
 8000788:	000a      	movs	r2, r1
 800078a:	1d11      	adds	r1, r2, #4
 800078c:	4291      	cmp	r1, r2
 800078e:	4192      	sbcs	r2, r2
 8000790:	4252      	negs	r2, r2
 8000792:	4493      	add	fp, r2
 8000794:	e754      	b.n	8000640 <__aeabi_ddiv+0x3e4>
 8000796:	4b47      	ldr	r3, [pc, #284]	; (80008b4 <__aeabi_ddiv+0x658>)
 8000798:	18e3      	adds	r3, r4, r3
 800079a:	2b00      	cmp	r3, #0
 800079c:	dde5      	ble.n	800076a <__aeabi_ddiv+0x50e>
 800079e:	2201      	movs	r2, #1
 80007a0:	4252      	negs	r2, r2
 80007a2:	e7f2      	b.n	800078a <__aeabi_ddiv+0x52e>
 80007a4:	001d      	movs	r5, r3
 80007a6:	e6fa      	b.n	800059e <__aeabi_ddiv+0x342>
 80007a8:	469a      	mov	sl, r3
 80007aa:	e71c      	b.n	80005e6 <__aeabi_ddiv+0x38a>
 80007ac:	42b0      	cmp	r0, r6
 80007ae:	d839      	bhi.n	8000824 <__aeabi_ddiv+0x5c8>
 80007b0:	d06e      	beq.n	8000890 <__aeabi_ddiv+0x634>
 80007b2:	0011      	movs	r1, r2
 80007b4:	e73a      	b.n	800062c <__aeabi_ddiv+0x3d0>
 80007b6:	9302      	str	r3, [sp, #8]
 80007b8:	e73a      	b.n	8000630 <__aeabi_ddiv+0x3d4>
 80007ba:	2a1f      	cmp	r2, #31
 80007bc:	dc3c      	bgt.n	8000838 <__aeabi_ddiv+0x5dc>
 80007be:	2320      	movs	r3, #32
 80007c0:	1a9b      	subs	r3, r3, r2
 80007c2:	000c      	movs	r4, r1
 80007c4:	4658      	mov	r0, fp
 80007c6:	4099      	lsls	r1, r3
 80007c8:	4098      	lsls	r0, r3
 80007ca:	1e4b      	subs	r3, r1, #1
 80007cc:	4199      	sbcs	r1, r3
 80007ce:	465b      	mov	r3, fp
 80007d0:	40d4      	lsrs	r4, r2
 80007d2:	40d3      	lsrs	r3, r2
 80007d4:	4320      	orrs	r0, r4
 80007d6:	4308      	orrs	r0, r1
 80007d8:	001a      	movs	r2, r3
 80007da:	0743      	lsls	r3, r0, #29
 80007dc:	d009      	beq.n	80007f2 <__aeabi_ddiv+0x596>
 80007de:	230f      	movs	r3, #15
 80007e0:	4003      	ands	r3, r0
 80007e2:	2b04      	cmp	r3, #4
 80007e4:	d005      	beq.n	80007f2 <__aeabi_ddiv+0x596>
 80007e6:	0001      	movs	r1, r0
 80007e8:	1d08      	adds	r0, r1, #4
 80007ea:	4288      	cmp	r0, r1
 80007ec:	419b      	sbcs	r3, r3
 80007ee:	425b      	negs	r3, r3
 80007f0:	18d2      	adds	r2, r2, r3
 80007f2:	0213      	lsls	r3, r2, #8
 80007f4:	d53a      	bpl.n	800086c <__aeabi_ddiv+0x610>
 80007f6:	2301      	movs	r3, #1
 80007f8:	9a02      	ldr	r2, [sp, #8]
 80007fa:	2401      	movs	r4, #1
 80007fc:	401a      	ands	r2, r3
 80007fe:	2300      	movs	r3, #0
 8000800:	4694      	mov	ip, r2
 8000802:	4698      	mov	r8, r3
 8000804:	2200      	movs	r2, #0
 8000806:	e5f7      	b.n	80003f8 <__aeabi_ddiv+0x19c>
 8000808:	2102      	movs	r1, #2
 800080a:	4249      	negs	r1, r1
 800080c:	468c      	mov	ip, r1
 800080e:	9d03      	ldr	r5, [sp, #12]
 8000810:	44e3      	add	fp, ip
 8000812:	46ac      	mov	ip, r5
 8000814:	44e2      	add	sl, ip
 8000816:	45aa      	cmp	sl, r5
 8000818:	41ad      	sbcs	r5, r5
 800081a:	426d      	negs	r5, r5
 800081c:	4445      	add	r5, r8
 800081e:	18ed      	adds	r5, r5, r3
 8000820:	1a2d      	subs	r5, r5, r0
 8000822:	e696      	b.n	8000552 <__aeabi_ddiv+0x2f6>
 8000824:	1e8a      	subs	r2, r1, #2
 8000826:	9903      	ldr	r1, [sp, #12]
 8000828:	004d      	lsls	r5, r1, #1
 800082a:	428d      	cmp	r5, r1
 800082c:	4189      	sbcs	r1, r1
 800082e:	4249      	negs	r1, r1
 8000830:	4441      	add	r1, r8
 8000832:	1876      	adds	r6, r6, r1
 8000834:	9503      	str	r5, [sp, #12]
 8000836:	e78f      	b.n	8000758 <__aeabi_ddiv+0x4fc>
 8000838:	201f      	movs	r0, #31
 800083a:	4240      	negs	r0, r0
 800083c:	1ac3      	subs	r3, r0, r3
 800083e:	4658      	mov	r0, fp
 8000840:	40d8      	lsrs	r0, r3
 8000842:	0003      	movs	r3, r0
 8000844:	2a20      	cmp	r2, #32
 8000846:	d028      	beq.n	800089a <__aeabi_ddiv+0x63e>
 8000848:	2040      	movs	r0, #64	; 0x40
 800084a:	465d      	mov	r5, fp
 800084c:	1a82      	subs	r2, r0, r2
 800084e:	4095      	lsls	r5, r2
 8000850:	4329      	orrs	r1, r5
 8000852:	1e4a      	subs	r2, r1, #1
 8000854:	4191      	sbcs	r1, r2
 8000856:	4319      	orrs	r1, r3
 8000858:	2307      	movs	r3, #7
 800085a:	2200      	movs	r2, #0
 800085c:	400b      	ands	r3, r1
 800085e:	d009      	beq.n	8000874 <__aeabi_ddiv+0x618>
 8000860:	230f      	movs	r3, #15
 8000862:	2200      	movs	r2, #0
 8000864:	400b      	ands	r3, r1
 8000866:	0008      	movs	r0, r1
 8000868:	2b04      	cmp	r3, #4
 800086a:	d1bd      	bne.n	80007e8 <__aeabi_ddiv+0x58c>
 800086c:	0001      	movs	r1, r0
 800086e:	0753      	lsls	r3, r2, #29
 8000870:	0252      	lsls	r2, r2, #9
 8000872:	0b12      	lsrs	r2, r2, #12
 8000874:	08c9      	lsrs	r1, r1, #3
 8000876:	4319      	orrs	r1, r3
 8000878:	2301      	movs	r3, #1
 800087a:	4688      	mov	r8, r1
 800087c:	9902      	ldr	r1, [sp, #8]
 800087e:	2400      	movs	r4, #0
 8000880:	4019      	ands	r1, r3
 8000882:	468c      	mov	ip, r1
 8000884:	e5b8      	b.n	80003f8 <__aeabi_ddiv+0x19c>
 8000886:	4552      	cmp	r2, sl
 8000888:	d8be      	bhi.n	8000808 <__aeabi_ddiv+0x5ac>
 800088a:	468b      	mov	fp, r1
 800088c:	2500      	movs	r5, #0
 800088e:	e660      	b.n	8000552 <__aeabi_ddiv+0x2f6>
 8000890:	9d03      	ldr	r5, [sp, #12]
 8000892:	429d      	cmp	r5, r3
 8000894:	d3c6      	bcc.n	8000824 <__aeabi_ddiv+0x5c8>
 8000896:	0011      	movs	r1, r2
 8000898:	e762      	b.n	8000760 <__aeabi_ddiv+0x504>
 800089a:	2500      	movs	r5, #0
 800089c:	e7d8      	b.n	8000850 <__aeabi_ddiv+0x5f4>
 800089e:	2280      	movs	r2, #128	; 0x80
 80008a0:	465b      	mov	r3, fp
 80008a2:	0312      	lsls	r2, r2, #12
 80008a4:	431a      	orrs	r2, r3
 80008a6:	9b01      	ldr	r3, [sp, #4]
 80008a8:	0312      	lsls	r2, r2, #12
 80008aa:	0b12      	lsrs	r2, r2, #12
 80008ac:	469c      	mov	ip, r3
 80008ae:	4688      	mov	r8, r1
 80008b0:	4c03      	ldr	r4, [pc, #12]	; (80008c0 <__aeabi_ddiv+0x664>)
 80008b2:	e5a1      	b.n	80003f8 <__aeabi_ddiv+0x19c>
 80008b4:	000003ff 	.word	0x000003ff
 80008b8:	feffffff 	.word	0xfeffffff
 80008bc:	000007fe 	.word	0x000007fe
 80008c0:	000007ff 	.word	0x000007ff

080008c4 <__aeabi_dsub>:
 80008c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008c6:	4646      	mov	r6, r8
 80008c8:	46d6      	mov	lr, sl
 80008ca:	464f      	mov	r7, r9
 80008cc:	030c      	lsls	r4, r1, #12
 80008ce:	b5c0      	push	{r6, r7, lr}
 80008d0:	0fcd      	lsrs	r5, r1, #31
 80008d2:	004e      	lsls	r6, r1, #1
 80008d4:	0a61      	lsrs	r1, r4, #9
 80008d6:	0f44      	lsrs	r4, r0, #29
 80008d8:	430c      	orrs	r4, r1
 80008da:	00c1      	lsls	r1, r0, #3
 80008dc:	0058      	lsls	r0, r3, #1
 80008de:	0d40      	lsrs	r0, r0, #21
 80008e0:	4684      	mov	ip, r0
 80008e2:	468a      	mov	sl, r1
 80008e4:	000f      	movs	r7, r1
 80008e6:	0319      	lsls	r1, r3, #12
 80008e8:	0f50      	lsrs	r0, r2, #29
 80008ea:	0a49      	lsrs	r1, r1, #9
 80008ec:	4301      	orrs	r1, r0
 80008ee:	48c6      	ldr	r0, [pc, #792]	; (8000c08 <__aeabi_dsub+0x344>)
 80008f0:	0d76      	lsrs	r6, r6, #21
 80008f2:	46a8      	mov	r8, r5
 80008f4:	0fdb      	lsrs	r3, r3, #31
 80008f6:	00d2      	lsls	r2, r2, #3
 80008f8:	4584      	cmp	ip, r0
 80008fa:	d100      	bne.n	80008fe <__aeabi_dsub+0x3a>
 80008fc:	e0d8      	b.n	8000ab0 <__aeabi_dsub+0x1ec>
 80008fe:	2001      	movs	r0, #1
 8000900:	4043      	eors	r3, r0
 8000902:	42ab      	cmp	r3, r5
 8000904:	d100      	bne.n	8000908 <__aeabi_dsub+0x44>
 8000906:	e0a6      	b.n	8000a56 <__aeabi_dsub+0x192>
 8000908:	4660      	mov	r0, ip
 800090a:	1a35      	subs	r5, r6, r0
 800090c:	2d00      	cmp	r5, #0
 800090e:	dc00      	bgt.n	8000912 <__aeabi_dsub+0x4e>
 8000910:	e105      	b.n	8000b1e <__aeabi_dsub+0x25a>
 8000912:	2800      	cmp	r0, #0
 8000914:	d110      	bne.n	8000938 <__aeabi_dsub+0x74>
 8000916:	000b      	movs	r3, r1
 8000918:	4313      	orrs	r3, r2
 800091a:	d100      	bne.n	800091e <__aeabi_dsub+0x5a>
 800091c:	e0d7      	b.n	8000ace <__aeabi_dsub+0x20a>
 800091e:	1e6b      	subs	r3, r5, #1
 8000920:	2b00      	cmp	r3, #0
 8000922:	d000      	beq.n	8000926 <__aeabi_dsub+0x62>
 8000924:	e14b      	b.n	8000bbe <__aeabi_dsub+0x2fa>
 8000926:	4653      	mov	r3, sl
 8000928:	1a9f      	subs	r7, r3, r2
 800092a:	45ba      	cmp	sl, r7
 800092c:	4180      	sbcs	r0, r0
 800092e:	1a64      	subs	r4, r4, r1
 8000930:	4240      	negs	r0, r0
 8000932:	1a24      	subs	r4, r4, r0
 8000934:	2601      	movs	r6, #1
 8000936:	e01e      	b.n	8000976 <__aeabi_dsub+0xb2>
 8000938:	4bb3      	ldr	r3, [pc, #716]	; (8000c08 <__aeabi_dsub+0x344>)
 800093a:	429e      	cmp	r6, r3
 800093c:	d048      	beq.n	80009d0 <__aeabi_dsub+0x10c>
 800093e:	2380      	movs	r3, #128	; 0x80
 8000940:	041b      	lsls	r3, r3, #16
 8000942:	4319      	orrs	r1, r3
 8000944:	2d38      	cmp	r5, #56	; 0x38
 8000946:	dd00      	ble.n	800094a <__aeabi_dsub+0x86>
 8000948:	e119      	b.n	8000b7e <__aeabi_dsub+0x2ba>
 800094a:	2d1f      	cmp	r5, #31
 800094c:	dd00      	ble.n	8000950 <__aeabi_dsub+0x8c>
 800094e:	e14c      	b.n	8000bea <__aeabi_dsub+0x326>
 8000950:	2320      	movs	r3, #32
 8000952:	000f      	movs	r7, r1
 8000954:	1b5b      	subs	r3, r3, r5
 8000956:	0010      	movs	r0, r2
 8000958:	409a      	lsls	r2, r3
 800095a:	409f      	lsls	r7, r3
 800095c:	40e8      	lsrs	r0, r5
 800095e:	1e53      	subs	r3, r2, #1
 8000960:	419a      	sbcs	r2, r3
 8000962:	40e9      	lsrs	r1, r5
 8000964:	4307      	orrs	r7, r0
 8000966:	4317      	orrs	r7, r2
 8000968:	4653      	mov	r3, sl
 800096a:	1bdf      	subs	r7, r3, r7
 800096c:	1a61      	subs	r1, r4, r1
 800096e:	45ba      	cmp	sl, r7
 8000970:	41a4      	sbcs	r4, r4
 8000972:	4264      	negs	r4, r4
 8000974:	1b0c      	subs	r4, r1, r4
 8000976:	0223      	lsls	r3, r4, #8
 8000978:	d400      	bmi.n	800097c <__aeabi_dsub+0xb8>
 800097a:	e0c5      	b.n	8000b08 <__aeabi_dsub+0x244>
 800097c:	0264      	lsls	r4, r4, #9
 800097e:	0a65      	lsrs	r5, r4, #9
 8000980:	2d00      	cmp	r5, #0
 8000982:	d100      	bne.n	8000986 <__aeabi_dsub+0xc2>
 8000984:	e0f6      	b.n	8000b74 <__aeabi_dsub+0x2b0>
 8000986:	0028      	movs	r0, r5
 8000988:	f000 fb5c 	bl	8001044 <__clzsi2>
 800098c:	0003      	movs	r3, r0
 800098e:	3b08      	subs	r3, #8
 8000990:	2b1f      	cmp	r3, #31
 8000992:	dd00      	ble.n	8000996 <__aeabi_dsub+0xd2>
 8000994:	e0e9      	b.n	8000b6a <__aeabi_dsub+0x2a6>
 8000996:	2220      	movs	r2, #32
 8000998:	003c      	movs	r4, r7
 800099a:	1ad2      	subs	r2, r2, r3
 800099c:	409d      	lsls	r5, r3
 800099e:	40d4      	lsrs	r4, r2
 80009a0:	409f      	lsls	r7, r3
 80009a2:	4325      	orrs	r5, r4
 80009a4:	429e      	cmp	r6, r3
 80009a6:	dd00      	ble.n	80009aa <__aeabi_dsub+0xe6>
 80009a8:	e0db      	b.n	8000b62 <__aeabi_dsub+0x29e>
 80009aa:	1b9e      	subs	r6, r3, r6
 80009ac:	1c73      	adds	r3, r6, #1
 80009ae:	2b1f      	cmp	r3, #31
 80009b0:	dd00      	ble.n	80009b4 <__aeabi_dsub+0xf0>
 80009b2:	e10a      	b.n	8000bca <__aeabi_dsub+0x306>
 80009b4:	2220      	movs	r2, #32
 80009b6:	0038      	movs	r0, r7
 80009b8:	1ad2      	subs	r2, r2, r3
 80009ba:	0029      	movs	r1, r5
 80009bc:	4097      	lsls	r7, r2
 80009be:	002c      	movs	r4, r5
 80009c0:	4091      	lsls	r1, r2
 80009c2:	40d8      	lsrs	r0, r3
 80009c4:	1e7a      	subs	r2, r7, #1
 80009c6:	4197      	sbcs	r7, r2
 80009c8:	40dc      	lsrs	r4, r3
 80009ca:	2600      	movs	r6, #0
 80009cc:	4301      	orrs	r1, r0
 80009ce:	430f      	orrs	r7, r1
 80009d0:	077b      	lsls	r3, r7, #29
 80009d2:	d009      	beq.n	80009e8 <__aeabi_dsub+0x124>
 80009d4:	230f      	movs	r3, #15
 80009d6:	403b      	ands	r3, r7
 80009d8:	2b04      	cmp	r3, #4
 80009da:	d005      	beq.n	80009e8 <__aeabi_dsub+0x124>
 80009dc:	1d3b      	adds	r3, r7, #4
 80009de:	42bb      	cmp	r3, r7
 80009e0:	41bf      	sbcs	r7, r7
 80009e2:	427f      	negs	r7, r7
 80009e4:	19e4      	adds	r4, r4, r7
 80009e6:	001f      	movs	r7, r3
 80009e8:	0223      	lsls	r3, r4, #8
 80009ea:	d525      	bpl.n	8000a38 <__aeabi_dsub+0x174>
 80009ec:	4b86      	ldr	r3, [pc, #536]	; (8000c08 <__aeabi_dsub+0x344>)
 80009ee:	3601      	adds	r6, #1
 80009f0:	429e      	cmp	r6, r3
 80009f2:	d100      	bne.n	80009f6 <__aeabi_dsub+0x132>
 80009f4:	e0af      	b.n	8000b56 <__aeabi_dsub+0x292>
 80009f6:	4b85      	ldr	r3, [pc, #532]	; (8000c0c <__aeabi_dsub+0x348>)
 80009f8:	2501      	movs	r5, #1
 80009fa:	401c      	ands	r4, r3
 80009fc:	4643      	mov	r3, r8
 80009fe:	0762      	lsls	r2, r4, #29
 8000a00:	08ff      	lsrs	r7, r7, #3
 8000a02:	0264      	lsls	r4, r4, #9
 8000a04:	0576      	lsls	r6, r6, #21
 8000a06:	4317      	orrs	r7, r2
 8000a08:	0b24      	lsrs	r4, r4, #12
 8000a0a:	0d76      	lsrs	r6, r6, #21
 8000a0c:	401d      	ands	r5, r3
 8000a0e:	2100      	movs	r1, #0
 8000a10:	0324      	lsls	r4, r4, #12
 8000a12:	0b23      	lsrs	r3, r4, #12
 8000a14:	0d0c      	lsrs	r4, r1, #20
 8000a16:	4a7e      	ldr	r2, [pc, #504]	; (8000c10 <__aeabi_dsub+0x34c>)
 8000a18:	0524      	lsls	r4, r4, #20
 8000a1a:	431c      	orrs	r4, r3
 8000a1c:	4014      	ands	r4, r2
 8000a1e:	0533      	lsls	r3, r6, #20
 8000a20:	4323      	orrs	r3, r4
 8000a22:	005b      	lsls	r3, r3, #1
 8000a24:	07ed      	lsls	r5, r5, #31
 8000a26:	085b      	lsrs	r3, r3, #1
 8000a28:	432b      	orrs	r3, r5
 8000a2a:	0038      	movs	r0, r7
 8000a2c:	0019      	movs	r1, r3
 8000a2e:	bc1c      	pop	{r2, r3, r4}
 8000a30:	4690      	mov	r8, r2
 8000a32:	4699      	mov	r9, r3
 8000a34:	46a2      	mov	sl, r4
 8000a36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a38:	2501      	movs	r5, #1
 8000a3a:	4643      	mov	r3, r8
 8000a3c:	0762      	lsls	r2, r4, #29
 8000a3e:	08ff      	lsrs	r7, r7, #3
 8000a40:	4317      	orrs	r7, r2
 8000a42:	08e4      	lsrs	r4, r4, #3
 8000a44:	401d      	ands	r5, r3
 8000a46:	4b70      	ldr	r3, [pc, #448]	; (8000c08 <__aeabi_dsub+0x344>)
 8000a48:	429e      	cmp	r6, r3
 8000a4a:	d036      	beq.n	8000aba <__aeabi_dsub+0x1f6>
 8000a4c:	0324      	lsls	r4, r4, #12
 8000a4e:	0576      	lsls	r6, r6, #21
 8000a50:	0b24      	lsrs	r4, r4, #12
 8000a52:	0d76      	lsrs	r6, r6, #21
 8000a54:	e7db      	b.n	8000a0e <__aeabi_dsub+0x14a>
 8000a56:	4663      	mov	r3, ip
 8000a58:	1af3      	subs	r3, r6, r3
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	dc00      	bgt.n	8000a60 <__aeabi_dsub+0x19c>
 8000a5e:	e094      	b.n	8000b8a <__aeabi_dsub+0x2c6>
 8000a60:	4660      	mov	r0, ip
 8000a62:	2800      	cmp	r0, #0
 8000a64:	d035      	beq.n	8000ad2 <__aeabi_dsub+0x20e>
 8000a66:	4868      	ldr	r0, [pc, #416]	; (8000c08 <__aeabi_dsub+0x344>)
 8000a68:	4286      	cmp	r6, r0
 8000a6a:	d0b1      	beq.n	80009d0 <__aeabi_dsub+0x10c>
 8000a6c:	2780      	movs	r7, #128	; 0x80
 8000a6e:	043f      	lsls	r7, r7, #16
 8000a70:	4339      	orrs	r1, r7
 8000a72:	2b38      	cmp	r3, #56	; 0x38
 8000a74:	dc00      	bgt.n	8000a78 <__aeabi_dsub+0x1b4>
 8000a76:	e0fd      	b.n	8000c74 <__aeabi_dsub+0x3b0>
 8000a78:	430a      	orrs	r2, r1
 8000a7a:	0017      	movs	r7, r2
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	1e7a      	subs	r2, r7, #1
 8000a80:	4197      	sbcs	r7, r2
 8000a82:	4457      	add	r7, sl
 8000a84:	4557      	cmp	r7, sl
 8000a86:	4180      	sbcs	r0, r0
 8000a88:	1909      	adds	r1, r1, r4
 8000a8a:	4244      	negs	r4, r0
 8000a8c:	190c      	adds	r4, r1, r4
 8000a8e:	0223      	lsls	r3, r4, #8
 8000a90:	d53a      	bpl.n	8000b08 <__aeabi_dsub+0x244>
 8000a92:	4b5d      	ldr	r3, [pc, #372]	; (8000c08 <__aeabi_dsub+0x344>)
 8000a94:	3601      	adds	r6, #1
 8000a96:	429e      	cmp	r6, r3
 8000a98:	d100      	bne.n	8000a9c <__aeabi_dsub+0x1d8>
 8000a9a:	e14b      	b.n	8000d34 <__aeabi_dsub+0x470>
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	4b5b      	ldr	r3, [pc, #364]	; (8000c0c <__aeabi_dsub+0x348>)
 8000aa0:	401c      	ands	r4, r3
 8000aa2:	087b      	lsrs	r3, r7, #1
 8000aa4:	4017      	ands	r7, r2
 8000aa6:	431f      	orrs	r7, r3
 8000aa8:	07e2      	lsls	r2, r4, #31
 8000aaa:	4317      	orrs	r7, r2
 8000aac:	0864      	lsrs	r4, r4, #1
 8000aae:	e78f      	b.n	80009d0 <__aeabi_dsub+0x10c>
 8000ab0:	0008      	movs	r0, r1
 8000ab2:	4310      	orrs	r0, r2
 8000ab4:	d000      	beq.n	8000ab8 <__aeabi_dsub+0x1f4>
 8000ab6:	e724      	b.n	8000902 <__aeabi_dsub+0x3e>
 8000ab8:	e721      	b.n	80008fe <__aeabi_dsub+0x3a>
 8000aba:	0023      	movs	r3, r4
 8000abc:	433b      	orrs	r3, r7
 8000abe:	d100      	bne.n	8000ac2 <__aeabi_dsub+0x1fe>
 8000ac0:	e1b9      	b.n	8000e36 <__aeabi_dsub+0x572>
 8000ac2:	2280      	movs	r2, #128	; 0x80
 8000ac4:	0312      	lsls	r2, r2, #12
 8000ac6:	4314      	orrs	r4, r2
 8000ac8:	0324      	lsls	r4, r4, #12
 8000aca:	0b24      	lsrs	r4, r4, #12
 8000acc:	e79f      	b.n	8000a0e <__aeabi_dsub+0x14a>
 8000ace:	002e      	movs	r6, r5
 8000ad0:	e77e      	b.n	80009d0 <__aeabi_dsub+0x10c>
 8000ad2:	0008      	movs	r0, r1
 8000ad4:	4310      	orrs	r0, r2
 8000ad6:	d100      	bne.n	8000ada <__aeabi_dsub+0x216>
 8000ad8:	e0ca      	b.n	8000c70 <__aeabi_dsub+0x3ac>
 8000ada:	1e58      	subs	r0, r3, #1
 8000adc:	4684      	mov	ip, r0
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	d000      	beq.n	8000ae4 <__aeabi_dsub+0x220>
 8000ae2:	e0e7      	b.n	8000cb4 <__aeabi_dsub+0x3f0>
 8000ae4:	4452      	add	r2, sl
 8000ae6:	4552      	cmp	r2, sl
 8000ae8:	4180      	sbcs	r0, r0
 8000aea:	1864      	adds	r4, r4, r1
 8000aec:	4240      	negs	r0, r0
 8000aee:	1824      	adds	r4, r4, r0
 8000af0:	0017      	movs	r7, r2
 8000af2:	2601      	movs	r6, #1
 8000af4:	0223      	lsls	r3, r4, #8
 8000af6:	d507      	bpl.n	8000b08 <__aeabi_dsub+0x244>
 8000af8:	2602      	movs	r6, #2
 8000afa:	e7cf      	b.n	8000a9c <__aeabi_dsub+0x1d8>
 8000afc:	4664      	mov	r4, ip
 8000afe:	432c      	orrs	r4, r5
 8000b00:	d100      	bne.n	8000b04 <__aeabi_dsub+0x240>
 8000b02:	e1b3      	b.n	8000e6c <__aeabi_dsub+0x5a8>
 8000b04:	002c      	movs	r4, r5
 8000b06:	4667      	mov	r7, ip
 8000b08:	077b      	lsls	r3, r7, #29
 8000b0a:	d000      	beq.n	8000b0e <__aeabi_dsub+0x24a>
 8000b0c:	e762      	b.n	80009d4 <__aeabi_dsub+0x110>
 8000b0e:	0763      	lsls	r3, r4, #29
 8000b10:	08ff      	lsrs	r7, r7, #3
 8000b12:	431f      	orrs	r7, r3
 8000b14:	2501      	movs	r5, #1
 8000b16:	4643      	mov	r3, r8
 8000b18:	08e4      	lsrs	r4, r4, #3
 8000b1a:	401d      	ands	r5, r3
 8000b1c:	e793      	b.n	8000a46 <__aeabi_dsub+0x182>
 8000b1e:	2d00      	cmp	r5, #0
 8000b20:	d178      	bne.n	8000c14 <__aeabi_dsub+0x350>
 8000b22:	1c75      	adds	r5, r6, #1
 8000b24:	056d      	lsls	r5, r5, #21
 8000b26:	0d6d      	lsrs	r5, r5, #21
 8000b28:	2d01      	cmp	r5, #1
 8000b2a:	dc00      	bgt.n	8000b2e <__aeabi_dsub+0x26a>
 8000b2c:	e0f2      	b.n	8000d14 <__aeabi_dsub+0x450>
 8000b2e:	4650      	mov	r0, sl
 8000b30:	1a80      	subs	r0, r0, r2
 8000b32:	4582      	cmp	sl, r0
 8000b34:	41bf      	sbcs	r7, r7
 8000b36:	1a65      	subs	r5, r4, r1
 8000b38:	427f      	negs	r7, r7
 8000b3a:	1bed      	subs	r5, r5, r7
 8000b3c:	4684      	mov	ip, r0
 8000b3e:	0228      	lsls	r0, r5, #8
 8000b40:	d400      	bmi.n	8000b44 <__aeabi_dsub+0x280>
 8000b42:	e08c      	b.n	8000c5e <__aeabi_dsub+0x39a>
 8000b44:	4650      	mov	r0, sl
 8000b46:	1a17      	subs	r7, r2, r0
 8000b48:	42ba      	cmp	r2, r7
 8000b4a:	4192      	sbcs	r2, r2
 8000b4c:	1b0c      	subs	r4, r1, r4
 8000b4e:	4255      	negs	r5, r2
 8000b50:	1b65      	subs	r5, r4, r5
 8000b52:	4698      	mov	r8, r3
 8000b54:	e714      	b.n	8000980 <__aeabi_dsub+0xbc>
 8000b56:	2501      	movs	r5, #1
 8000b58:	4643      	mov	r3, r8
 8000b5a:	2400      	movs	r4, #0
 8000b5c:	401d      	ands	r5, r3
 8000b5e:	2700      	movs	r7, #0
 8000b60:	e755      	b.n	8000a0e <__aeabi_dsub+0x14a>
 8000b62:	4c2a      	ldr	r4, [pc, #168]	; (8000c0c <__aeabi_dsub+0x348>)
 8000b64:	1af6      	subs	r6, r6, r3
 8000b66:	402c      	ands	r4, r5
 8000b68:	e732      	b.n	80009d0 <__aeabi_dsub+0x10c>
 8000b6a:	003d      	movs	r5, r7
 8000b6c:	3828      	subs	r0, #40	; 0x28
 8000b6e:	4085      	lsls	r5, r0
 8000b70:	2700      	movs	r7, #0
 8000b72:	e717      	b.n	80009a4 <__aeabi_dsub+0xe0>
 8000b74:	0038      	movs	r0, r7
 8000b76:	f000 fa65 	bl	8001044 <__clzsi2>
 8000b7a:	3020      	adds	r0, #32
 8000b7c:	e706      	b.n	800098c <__aeabi_dsub+0xc8>
 8000b7e:	430a      	orrs	r2, r1
 8000b80:	0017      	movs	r7, r2
 8000b82:	2100      	movs	r1, #0
 8000b84:	1e7a      	subs	r2, r7, #1
 8000b86:	4197      	sbcs	r7, r2
 8000b88:	e6ee      	b.n	8000968 <__aeabi_dsub+0xa4>
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d000      	beq.n	8000b90 <__aeabi_dsub+0x2cc>
 8000b8e:	e0e5      	b.n	8000d5c <__aeabi_dsub+0x498>
 8000b90:	1c73      	adds	r3, r6, #1
 8000b92:	469c      	mov	ip, r3
 8000b94:	055b      	lsls	r3, r3, #21
 8000b96:	0d5b      	lsrs	r3, r3, #21
 8000b98:	2b01      	cmp	r3, #1
 8000b9a:	dc00      	bgt.n	8000b9e <__aeabi_dsub+0x2da>
 8000b9c:	e09f      	b.n	8000cde <__aeabi_dsub+0x41a>
 8000b9e:	4b1a      	ldr	r3, [pc, #104]	; (8000c08 <__aeabi_dsub+0x344>)
 8000ba0:	459c      	cmp	ip, r3
 8000ba2:	d100      	bne.n	8000ba6 <__aeabi_dsub+0x2e2>
 8000ba4:	e0c5      	b.n	8000d32 <__aeabi_dsub+0x46e>
 8000ba6:	4452      	add	r2, sl
 8000ba8:	4552      	cmp	r2, sl
 8000baa:	4180      	sbcs	r0, r0
 8000bac:	1864      	adds	r4, r4, r1
 8000bae:	4240      	negs	r0, r0
 8000bb0:	1824      	adds	r4, r4, r0
 8000bb2:	07e7      	lsls	r7, r4, #31
 8000bb4:	0852      	lsrs	r2, r2, #1
 8000bb6:	4317      	orrs	r7, r2
 8000bb8:	0864      	lsrs	r4, r4, #1
 8000bba:	4666      	mov	r6, ip
 8000bbc:	e708      	b.n	80009d0 <__aeabi_dsub+0x10c>
 8000bbe:	4812      	ldr	r0, [pc, #72]	; (8000c08 <__aeabi_dsub+0x344>)
 8000bc0:	4285      	cmp	r5, r0
 8000bc2:	d100      	bne.n	8000bc6 <__aeabi_dsub+0x302>
 8000bc4:	e085      	b.n	8000cd2 <__aeabi_dsub+0x40e>
 8000bc6:	001d      	movs	r5, r3
 8000bc8:	e6bc      	b.n	8000944 <__aeabi_dsub+0x80>
 8000bca:	0029      	movs	r1, r5
 8000bcc:	3e1f      	subs	r6, #31
 8000bce:	40f1      	lsrs	r1, r6
 8000bd0:	2b20      	cmp	r3, #32
 8000bd2:	d100      	bne.n	8000bd6 <__aeabi_dsub+0x312>
 8000bd4:	e07f      	b.n	8000cd6 <__aeabi_dsub+0x412>
 8000bd6:	2240      	movs	r2, #64	; 0x40
 8000bd8:	1ad3      	subs	r3, r2, r3
 8000bda:	409d      	lsls	r5, r3
 8000bdc:	432f      	orrs	r7, r5
 8000bde:	1e7d      	subs	r5, r7, #1
 8000be0:	41af      	sbcs	r7, r5
 8000be2:	2400      	movs	r4, #0
 8000be4:	430f      	orrs	r7, r1
 8000be6:	2600      	movs	r6, #0
 8000be8:	e78e      	b.n	8000b08 <__aeabi_dsub+0x244>
 8000bea:	002b      	movs	r3, r5
 8000bec:	000f      	movs	r7, r1
 8000bee:	3b20      	subs	r3, #32
 8000bf0:	40df      	lsrs	r7, r3
 8000bf2:	2d20      	cmp	r5, #32
 8000bf4:	d071      	beq.n	8000cda <__aeabi_dsub+0x416>
 8000bf6:	2340      	movs	r3, #64	; 0x40
 8000bf8:	1b5d      	subs	r5, r3, r5
 8000bfa:	40a9      	lsls	r1, r5
 8000bfc:	430a      	orrs	r2, r1
 8000bfe:	1e51      	subs	r1, r2, #1
 8000c00:	418a      	sbcs	r2, r1
 8000c02:	2100      	movs	r1, #0
 8000c04:	4317      	orrs	r7, r2
 8000c06:	e6af      	b.n	8000968 <__aeabi_dsub+0xa4>
 8000c08:	000007ff 	.word	0x000007ff
 8000c0c:	ff7fffff 	.word	0xff7fffff
 8000c10:	800fffff 	.word	0x800fffff
 8000c14:	2e00      	cmp	r6, #0
 8000c16:	d03e      	beq.n	8000c96 <__aeabi_dsub+0x3d2>
 8000c18:	4eb3      	ldr	r6, [pc, #716]	; (8000ee8 <__aeabi_dsub+0x624>)
 8000c1a:	45b4      	cmp	ip, r6
 8000c1c:	d045      	beq.n	8000caa <__aeabi_dsub+0x3e6>
 8000c1e:	2680      	movs	r6, #128	; 0x80
 8000c20:	0436      	lsls	r6, r6, #16
 8000c22:	426d      	negs	r5, r5
 8000c24:	4334      	orrs	r4, r6
 8000c26:	2d38      	cmp	r5, #56	; 0x38
 8000c28:	dd00      	ble.n	8000c2c <__aeabi_dsub+0x368>
 8000c2a:	e0a8      	b.n	8000d7e <__aeabi_dsub+0x4ba>
 8000c2c:	2d1f      	cmp	r5, #31
 8000c2e:	dd00      	ble.n	8000c32 <__aeabi_dsub+0x36e>
 8000c30:	e11f      	b.n	8000e72 <__aeabi_dsub+0x5ae>
 8000c32:	2620      	movs	r6, #32
 8000c34:	0027      	movs	r7, r4
 8000c36:	4650      	mov	r0, sl
 8000c38:	1b76      	subs	r6, r6, r5
 8000c3a:	40b7      	lsls	r7, r6
 8000c3c:	40e8      	lsrs	r0, r5
 8000c3e:	4307      	orrs	r7, r0
 8000c40:	4650      	mov	r0, sl
 8000c42:	40b0      	lsls	r0, r6
 8000c44:	1e46      	subs	r6, r0, #1
 8000c46:	41b0      	sbcs	r0, r6
 8000c48:	40ec      	lsrs	r4, r5
 8000c4a:	4338      	orrs	r0, r7
 8000c4c:	1a17      	subs	r7, r2, r0
 8000c4e:	42ba      	cmp	r2, r7
 8000c50:	4192      	sbcs	r2, r2
 8000c52:	1b0c      	subs	r4, r1, r4
 8000c54:	4252      	negs	r2, r2
 8000c56:	1aa4      	subs	r4, r4, r2
 8000c58:	4666      	mov	r6, ip
 8000c5a:	4698      	mov	r8, r3
 8000c5c:	e68b      	b.n	8000976 <__aeabi_dsub+0xb2>
 8000c5e:	4664      	mov	r4, ip
 8000c60:	4667      	mov	r7, ip
 8000c62:	432c      	orrs	r4, r5
 8000c64:	d000      	beq.n	8000c68 <__aeabi_dsub+0x3a4>
 8000c66:	e68b      	b.n	8000980 <__aeabi_dsub+0xbc>
 8000c68:	2500      	movs	r5, #0
 8000c6a:	2600      	movs	r6, #0
 8000c6c:	2700      	movs	r7, #0
 8000c6e:	e6ea      	b.n	8000a46 <__aeabi_dsub+0x182>
 8000c70:	001e      	movs	r6, r3
 8000c72:	e6ad      	b.n	80009d0 <__aeabi_dsub+0x10c>
 8000c74:	2b1f      	cmp	r3, #31
 8000c76:	dc60      	bgt.n	8000d3a <__aeabi_dsub+0x476>
 8000c78:	2720      	movs	r7, #32
 8000c7a:	1af8      	subs	r0, r7, r3
 8000c7c:	000f      	movs	r7, r1
 8000c7e:	4684      	mov	ip, r0
 8000c80:	4087      	lsls	r7, r0
 8000c82:	0010      	movs	r0, r2
 8000c84:	40d8      	lsrs	r0, r3
 8000c86:	4307      	orrs	r7, r0
 8000c88:	4660      	mov	r0, ip
 8000c8a:	4082      	lsls	r2, r0
 8000c8c:	1e50      	subs	r0, r2, #1
 8000c8e:	4182      	sbcs	r2, r0
 8000c90:	40d9      	lsrs	r1, r3
 8000c92:	4317      	orrs	r7, r2
 8000c94:	e6f5      	b.n	8000a82 <__aeabi_dsub+0x1be>
 8000c96:	0026      	movs	r6, r4
 8000c98:	4650      	mov	r0, sl
 8000c9a:	4306      	orrs	r6, r0
 8000c9c:	d005      	beq.n	8000caa <__aeabi_dsub+0x3e6>
 8000c9e:	43ed      	mvns	r5, r5
 8000ca0:	2d00      	cmp	r5, #0
 8000ca2:	d0d3      	beq.n	8000c4c <__aeabi_dsub+0x388>
 8000ca4:	4e90      	ldr	r6, [pc, #576]	; (8000ee8 <__aeabi_dsub+0x624>)
 8000ca6:	45b4      	cmp	ip, r6
 8000ca8:	d1bd      	bne.n	8000c26 <__aeabi_dsub+0x362>
 8000caa:	000c      	movs	r4, r1
 8000cac:	0017      	movs	r7, r2
 8000cae:	4666      	mov	r6, ip
 8000cb0:	4698      	mov	r8, r3
 8000cb2:	e68d      	b.n	80009d0 <__aeabi_dsub+0x10c>
 8000cb4:	488c      	ldr	r0, [pc, #560]	; (8000ee8 <__aeabi_dsub+0x624>)
 8000cb6:	4283      	cmp	r3, r0
 8000cb8:	d00b      	beq.n	8000cd2 <__aeabi_dsub+0x40e>
 8000cba:	4663      	mov	r3, ip
 8000cbc:	e6d9      	b.n	8000a72 <__aeabi_dsub+0x1ae>
 8000cbe:	2d00      	cmp	r5, #0
 8000cc0:	d000      	beq.n	8000cc4 <__aeabi_dsub+0x400>
 8000cc2:	e096      	b.n	8000df2 <__aeabi_dsub+0x52e>
 8000cc4:	0008      	movs	r0, r1
 8000cc6:	4310      	orrs	r0, r2
 8000cc8:	d100      	bne.n	8000ccc <__aeabi_dsub+0x408>
 8000cca:	e0e2      	b.n	8000e92 <__aeabi_dsub+0x5ce>
 8000ccc:	000c      	movs	r4, r1
 8000cce:	0017      	movs	r7, r2
 8000cd0:	4698      	mov	r8, r3
 8000cd2:	4e85      	ldr	r6, [pc, #532]	; (8000ee8 <__aeabi_dsub+0x624>)
 8000cd4:	e67c      	b.n	80009d0 <__aeabi_dsub+0x10c>
 8000cd6:	2500      	movs	r5, #0
 8000cd8:	e780      	b.n	8000bdc <__aeabi_dsub+0x318>
 8000cda:	2100      	movs	r1, #0
 8000cdc:	e78e      	b.n	8000bfc <__aeabi_dsub+0x338>
 8000cde:	0023      	movs	r3, r4
 8000ce0:	4650      	mov	r0, sl
 8000ce2:	4303      	orrs	r3, r0
 8000ce4:	2e00      	cmp	r6, #0
 8000ce6:	d000      	beq.n	8000cea <__aeabi_dsub+0x426>
 8000ce8:	e0a8      	b.n	8000e3c <__aeabi_dsub+0x578>
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d100      	bne.n	8000cf0 <__aeabi_dsub+0x42c>
 8000cee:	e0de      	b.n	8000eae <__aeabi_dsub+0x5ea>
 8000cf0:	000b      	movs	r3, r1
 8000cf2:	4313      	orrs	r3, r2
 8000cf4:	d100      	bne.n	8000cf8 <__aeabi_dsub+0x434>
 8000cf6:	e66b      	b.n	80009d0 <__aeabi_dsub+0x10c>
 8000cf8:	4452      	add	r2, sl
 8000cfa:	4552      	cmp	r2, sl
 8000cfc:	4180      	sbcs	r0, r0
 8000cfe:	1864      	adds	r4, r4, r1
 8000d00:	4240      	negs	r0, r0
 8000d02:	1824      	adds	r4, r4, r0
 8000d04:	0017      	movs	r7, r2
 8000d06:	0223      	lsls	r3, r4, #8
 8000d08:	d400      	bmi.n	8000d0c <__aeabi_dsub+0x448>
 8000d0a:	e6fd      	b.n	8000b08 <__aeabi_dsub+0x244>
 8000d0c:	4b77      	ldr	r3, [pc, #476]	; (8000eec <__aeabi_dsub+0x628>)
 8000d0e:	4666      	mov	r6, ip
 8000d10:	401c      	ands	r4, r3
 8000d12:	e65d      	b.n	80009d0 <__aeabi_dsub+0x10c>
 8000d14:	0025      	movs	r5, r4
 8000d16:	4650      	mov	r0, sl
 8000d18:	4305      	orrs	r5, r0
 8000d1a:	2e00      	cmp	r6, #0
 8000d1c:	d1cf      	bne.n	8000cbe <__aeabi_dsub+0x3fa>
 8000d1e:	2d00      	cmp	r5, #0
 8000d20:	d14f      	bne.n	8000dc2 <__aeabi_dsub+0x4fe>
 8000d22:	000c      	movs	r4, r1
 8000d24:	4314      	orrs	r4, r2
 8000d26:	d100      	bne.n	8000d2a <__aeabi_dsub+0x466>
 8000d28:	e0a0      	b.n	8000e6c <__aeabi_dsub+0x5a8>
 8000d2a:	000c      	movs	r4, r1
 8000d2c:	0017      	movs	r7, r2
 8000d2e:	4698      	mov	r8, r3
 8000d30:	e64e      	b.n	80009d0 <__aeabi_dsub+0x10c>
 8000d32:	4666      	mov	r6, ip
 8000d34:	2400      	movs	r4, #0
 8000d36:	2700      	movs	r7, #0
 8000d38:	e685      	b.n	8000a46 <__aeabi_dsub+0x182>
 8000d3a:	001f      	movs	r7, r3
 8000d3c:	0008      	movs	r0, r1
 8000d3e:	3f20      	subs	r7, #32
 8000d40:	40f8      	lsrs	r0, r7
 8000d42:	0007      	movs	r7, r0
 8000d44:	2b20      	cmp	r3, #32
 8000d46:	d100      	bne.n	8000d4a <__aeabi_dsub+0x486>
 8000d48:	e08e      	b.n	8000e68 <__aeabi_dsub+0x5a4>
 8000d4a:	2040      	movs	r0, #64	; 0x40
 8000d4c:	1ac3      	subs	r3, r0, r3
 8000d4e:	4099      	lsls	r1, r3
 8000d50:	430a      	orrs	r2, r1
 8000d52:	1e51      	subs	r1, r2, #1
 8000d54:	418a      	sbcs	r2, r1
 8000d56:	2100      	movs	r1, #0
 8000d58:	4317      	orrs	r7, r2
 8000d5a:	e692      	b.n	8000a82 <__aeabi_dsub+0x1be>
 8000d5c:	2e00      	cmp	r6, #0
 8000d5e:	d114      	bne.n	8000d8a <__aeabi_dsub+0x4c6>
 8000d60:	0026      	movs	r6, r4
 8000d62:	4650      	mov	r0, sl
 8000d64:	4306      	orrs	r6, r0
 8000d66:	d062      	beq.n	8000e2e <__aeabi_dsub+0x56a>
 8000d68:	43db      	mvns	r3, r3
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d15c      	bne.n	8000e28 <__aeabi_dsub+0x564>
 8000d6e:	1887      	adds	r7, r0, r2
 8000d70:	4297      	cmp	r7, r2
 8000d72:	4192      	sbcs	r2, r2
 8000d74:	1864      	adds	r4, r4, r1
 8000d76:	4252      	negs	r2, r2
 8000d78:	18a4      	adds	r4, r4, r2
 8000d7a:	4666      	mov	r6, ip
 8000d7c:	e687      	b.n	8000a8e <__aeabi_dsub+0x1ca>
 8000d7e:	4650      	mov	r0, sl
 8000d80:	4320      	orrs	r0, r4
 8000d82:	1e44      	subs	r4, r0, #1
 8000d84:	41a0      	sbcs	r0, r4
 8000d86:	2400      	movs	r4, #0
 8000d88:	e760      	b.n	8000c4c <__aeabi_dsub+0x388>
 8000d8a:	4e57      	ldr	r6, [pc, #348]	; (8000ee8 <__aeabi_dsub+0x624>)
 8000d8c:	45b4      	cmp	ip, r6
 8000d8e:	d04e      	beq.n	8000e2e <__aeabi_dsub+0x56a>
 8000d90:	2680      	movs	r6, #128	; 0x80
 8000d92:	0436      	lsls	r6, r6, #16
 8000d94:	425b      	negs	r3, r3
 8000d96:	4334      	orrs	r4, r6
 8000d98:	2b38      	cmp	r3, #56	; 0x38
 8000d9a:	dd00      	ble.n	8000d9e <__aeabi_dsub+0x4da>
 8000d9c:	e07f      	b.n	8000e9e <__aeabi_dsub+0x5da>
 8000d9e:	2b1f      	cmp	r3, #31
 8000da0:	dd00      	ble.n	8000da4 <__aeabi_dsub+0x4e0>
 8000da2:	e08b      	b.n	8000ebc <__aeabi_dsub+0x5f8>
 8000da4:	2620      	movs	r6, #32
 8000da6:	0027      	movs	r7, r4
 8000da8:	4650      	mov	r0, sl
 8000daa:	1af6      	subs	r6, r6, r3
 8000dac:	40b7      	lsls	r7, r6
 8000dae:	40d8      	lsrs	r0, r3
 8000db0:	4307      	orrs	r7, r0
 8000db2:	4650      	mov	r0, sl
 8000db4:	40b0      	lsls	r0, r6
 8000db6:	1e46      	subs	r6, r0, #1
 8000db8:	41b0      	sbcs	r0, r6
 8000dba:	4307      	orrs	r7, r0
 8000dbc:	40dc      	lsrs	r4, r3
 8000dbe:	18bf      	adds	r7, r7, r2
 8000dc0:	e7d6      	b.n	8000d70 <__aeabi_dsub+0x4ac>
 8000dc2:	000d      	movs	r5, r1
 8000dc4:	4315      	orrs	r5, r2
 8000dc6:	d100      	bne.n	8000dca <__aeabi_dsub+0x506>
 8000dc8:	e602      	b.n	80009d0 <__aeabi_dsub+0x10c>
 8000dca:	4650      	mov	r0, sl
 8000dcc:	1a80      	subs	r0, r0, r2
 8000dce:	4582      	cmp	sl, r0
 8000dd0:	41bf      	sbcs	r7, r7
 8000dd2:	1a65      	subs	r5, r4, r1
 8000dd4:	427f      	negs	r7, r7
 8000dd6:	1bed      	subs	r5, r5, r7
 8000dd8:	4684      	mov	ip, r0
 8000dda:	0228      	lsls	r0, r5, #8
 8000ddc:	d400      	bmi.n	8000de0 <__aeabi_dsub+0x51c>
 8000dde:	e68d      	b.n	8000afc <__aeabi_dsub+0x238>
 8000de0:	4650      	mov	r0, sl
 8000de2:	1a17      	subs	r7, r2, r0
 8000de4:	42ba      	cmp	r2, r7
 8000de6:	4192      	sbcs	r2, r2
 8000de8:	1b0c      	subs	r4, r1, r4
 8000dea:	4252      	negs	r2, r2
 8000dec:	1aa4      	subs	r4, r4, r2
 8000dee:	4698      	mov	r8, r3
 8000df0:	e5ee      	b.n	80009d0 <__aeabi_dsub+0x10c>
 8000df2:	000d      	movs	r5, r1
 8000df4:	4315      	orrs	r5, r2
 8000df6:	d100      	bne.n	8000dfa <__aeabi_dsub+0x536>
 8000df8:	e76b      	b.n	8000cd2 <__aeabi_dsub+0x40e>
 8000dfa:	4650      	mov	r0, sl
 8000dfc:	0767      	lsls	r7, r4, #29
 8000dfe:	08c0      	lsrs	r0, r0, #3
 8000e00:	4307      	orrs	r7, r0
 8000e02:	2080      	movs	r0, #128	; 0x80
 8000e04:	08e4      	lsrs	r4, r4, #3
 8000e06:	0300      	lsls	r0, r0, #12
 8000e08:	4204      	tst	r4, r0
 8000e0a:	d007      	beq.n	8000e1c <__aeabi_dsub+0x558>
 8000e0c:	08cd      	lsrs	r5, r1, #3
 8000e0e:	4205      	tst	r5, r0
 8000e10:	d104      	bne.n	8000e1c <__aeabi_dsub+0x558>
 8000e12:	002c      	movs	r4, r5
 8000e14:	4698      	mov	r8, r3
 8000e16:	08d7      	lsrs	r7, r2, #3
 8000e18:	0749      	lsls	r1, r1, #29
 8000e1a:	430f      	orrs	r7, r1
 8000e1c:	0f7b      	lsrs	r3, r7, #29
 8000e1e:	00e4      	lsls	r4, r4, #3
 8000e20:	431c      	orrs	r4, r3
 8000e22:	00ff      	lsls	r7, r7, #3
 8000e24:	4e30      	ldr	r6, [pc, #192]	; (8000ee8 <__aeabi_dsub+0x624>)
 8000e26:	e5d3      	b.n	80009d0 <__aeabi_dsub+0x10c>
 8000e28:	4e2f      	ldr	r6, [pc, #188]	; (8000ee8 <__aeabi_dsub+0x624>)
 8000e2a:	45b4      	cmp	ip, r6
 8000e2c:	d1b4      	bne.n	8000d98 <__aeabi_dsub+0x4d4>
 8000e2e:	000c      	movs	r4, r1
 8000e30:	0017      	movs	r7, r2
 8000e32:	4666      	mov	r6, ip
 8000e34:	e5cc      	b.n	80009d0 <__aeabi_dsub+0x10c>
 8000e36:	2700      	movs	r7, #0
 8000e38:	2400      	movs	r4, #0
 8000e3a:	e5e8      	b.n	8000a0e <__aeabi_dsub+0x14a>
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d039      	beq.n	8000eb4 <__aeabi_dsub+0x5f0>
 8000e40:	000b      	movs	r3, r1
 8000e42:	4313      	orrs	r3, r2
 8000e44:	d100      	bne.n	8000e48 <__aeabi_dsub+0x584>
 8000e46:	e744      	b.n	8000cd2 <__aeabi_dsub+0x40e>
 8000e48:	08c0      	lsrs	r0, r0, #3
 8000e4a:	0767      	lsls	r7, r4, #29
 8000e4c:	4307      	orrs	r7, r0
 8000e4e:	2080      	movs	r0, #128	; 0x80
 8000e50:	08e4      	lsrs	r4, r4, #3
 8000e52:	0300      	lsls	r0, r0, #12
 8000e54:	4204      	tst	r4, r0
 8000e56:	d0e1      	beq.n	8000e1c <__aeabi_dsub+0x558>
 8000e58:	08cb      	lsrs	r3, r1, #3
 8000e5a:	4203      	tst	r3, r0
 8000e5c:	d1de      	bne.n	8000e1c <__aeabi_dsub+0x558>
 8000e5e:	08d7      	lsrs	r7, r2, #3
 8000e60:	0749      	lsls	r1, r1, #29
 8000e62:	430f      	orrs	r7, r1
 8000e64:	001c      	movs	r4, r3
 8000e66:	e7d9      	b.n	8000e1c <__aeabi_dsub+0x558>
 8000e68:	2100      	movs	r1, #0
 8000e6a:	e771      	b.n	8000d50 <__aeabi_dsub+0x48c>
 8000e6c:	2500      	movs	r5, #0
 8000e6e:	2700      	movs	r7, #0
 8000e70:	e5e9      	b.n	8000a46 <__aeabi_dsub+0x182>
 8000e72:	002e      	movs	r6, r5
 8000e74:	0027      	movs	r7, r4
 8000e76:	3e20      	subs	r6, #32
 8000e78:	40f7      	lsrs	r7, r6
 8000e7a:	2d20      	cmp	r5, #32
 8000e7c:	d02f      	beq.n	8000ede <__aeabi_dsub+0x61a>
 8000e7e:	2640      	movs	r6, #64	; 0x40
 8000e80:	1b75      	subs	r5, r6, r5
 8000e82:	40ac      	lsls	r4, r5
 8000e84:	4650      	mov	r0, sl
 8000e86:	4320      	orrs	r0, r4
 8000e88:	1e44      	subs	r4, r0, #1
 8000e8a:	41a0      	sbcs	r0, r4
 8000e8c:	2400      	movs	r4, #0
 8000e8e:	4338      	orrs	r0, r7
 8000e90:	e6dc      	b.n	8000c4c <__aeabi_dsub+0x388>
 8000e92:	2480      	movs	r4, #128	; 0x80
 8000e94:	2500      	movs	r5, #0
 8000e96:	0324      	lsls	r4, r4, #12
 8000e98:	4e13      	ldr	r6, [pc, #76]	; (8000ee8 <__aeabi_dsub+0x624>)
 8000e9a:	2700      	movs	r7, #0
 8000e9c:	e5d3      	b.n	8000a46 <__aeabi_dsub+0x182>
 8000e9e:	4650      	mov	r0, sl
 8000ea0:	4320      	orrs	r0, r4
 8000ea2:	0007      	movs	r7, r0
 8000ea4:	1e78      	subs	r0, r7, #1
 8000ea6:	4187      	sbcs	r7, r0
 8000ea8:	2400      	movs	r4, #0
 8000eaa:	18bf      	adds	r7, r7, r2
 8000eac:	e760      	b.n	8000d70 <__aeabi_dsub+0x4ac>
 8000eae:	000c      	movs	r4, r1
 8000eb0:	0017      	movs	r7, r2
 8000eb2:	e58d      	b.n	80009d0 <__aeabi_dsub+0x10c>
 8000eb4:	000c      	movs	r4, r1
 8000eb6:	0017      	movs	r7, r2
 8000eb8:	4e0b      	ldr	r6, [pc, #44]	; (8000ee8 <__aeabi_dsub+0x624>)
 8000eba:	e589      	b.n	80009d0 <__aeabi_dsub+0x10c>
 8000ebc:	001e      	movs	r6, r3
 8000ebe:	0027      	movs	r7, r4
 8000ec0:	3e20      	subs	r6, #32
 8000ec2:	40f7      	lsrs	r7, r6
 8000ec4:	2b20      	cmp	r3, #32
 8000ec6:	d00c      	beq.n	8000ee2 <__aeabi_dsub+0x61e>
 8000ec8:	2640      	movs	r6, #64	; 0x40
 8000eca:	1af3      	subs	r3, r6, r3
 8000ecc:	409c      	lsls	r4, r3
 8000ece:	4650      	mov	r0, sl
 8000ed0:	4320      	orrs	r0, r4
 8000ed2:	1e44      	subs	r4, r0, #1
 8000ed4:	41a0      	sbcs	r0, r4
 8000ed6:	4307      	orrs	r7, r0
 8000ed8:	2400      	movs	r4, #0
 8000eda:	18bf      	adds	r7, r7, r2
 8000edc:	e748      	b.n	8000d70 <__aeabi_dsub+0x4ac>
 8000ede:	2400      	movs	r4, #0
 8000ee0:	e7d0      	b.n	8000e84 <__aeabi_dsub+0x5c0>
 8000ee2:	2400      	movs	r4, #0
 8000ee4:	e7f3      	b.n	8000ece <__aeabi_dsub+0x60a>
 8000ee6:	46c0      	nop			; (mov r8, r8)
 8000ee8:	000007ff 	.word	0x000007ff
 8000eec:	ff7fffff 	.word	0xff7fffff

08000ef0 <__aeabi_d2iz>:
 8000ef0:	b530      	push	{r4, r5, lr}
 8000ef2:	4d13      	ldr	r5, [pc, #76]	; (8000f40 <__aeabi_d2iz+0x50>)
 8000ef4:	030a      	lsls	r2, r1, #12
 8000ef6:	004b      	lsls	r3, r1, #1
 8000ef8:	0b12      	lsrs	r2, r2, #12
 8000efa:	0d5b      	lsrs	r3, r3, #21
 8000efc:	0fc9      	lsrs	r1, r1, #31
 8000efe:	2400      	movs	r4, #0
 8000f00:	42ab      	cmp	r3, r5
 8000f02:	dd10      	ble.n	8000f26 <__aeabi_d2iz+0x36>
 8000f04:	4c0f      	ldr	r4, [pc, #60]	; (8000f44 <__aeabi_d2iz+0x54>)
 8000f06:	42a3      	cmp	r3, r4
 8000f08:	dc0f      	bgt.n	8000f2a <__aeabi_d2iz+0x3a>
 8000f0a:	2480      	movs	r4, #128	; 0x80
 8000f0c:	4d0e      	ldr	r5, [pc, #56]	; (8000f48 <__aeabi_d2iz+0x58>)
 8000f0e:	0364      	lsls	r4, r4, #13
 8000f10:	4322      	orrs	r2, r4
 8000f12:	1aed      	subs	r5, r5, r3
 8000f14:	2d1f      	cmp	r5, #31
 8000f16:	dd0b      	ble.n	8000f30 <__aeabi_d2iz+0x40>
 8000f18:	480c      	ldr	r0, [pc, #48]	; (8000f4c <__aeabi_d2iz+0x5c>)
 8000f1a:	1ac3      	subs	r3, r0, r3
 8000f1c:	40da      	lsrs	r2, r3
 8000f1e:	4254      	negs	r4, r2
 8000f20:	2900      	cmp	r1, #0
 8000f22:	d100      	bne.n	8000f26 <__aeabi_d2iz+0x36>
 8000f24:	0014      	movs	r4, r2
 8000f26:	0020      	movs	r0, r4
 8000f28:	bd30      	pop	{r4, r5, pc}
 8000f2a:	4b09      	ldr	r3, [pc, #36]	; (8000f50 <__aeabi_d2iz+0x60>)
 8000f2c:	18cc      	adds	r4, r1, r3
 8000f2e:	e7fa      	b.n	8000f26 <__aeabi_d2iz+0x36>
 8000f30:	4c08      	ldr	r4, [pc, #32]	; (8000f54 <__aeabi_d2iz+0x64>)
 8000f32:	40e8      	lsrs	r0, r5
 8000f34:	46a4      	mov	ip, r4
 8000f36:	4463      	add	r3, ip
 8000f38:	409a      	lsls	r2, r3
 8000f3a:	4302      	orrs	r2, r0
 8000f3c:	e7ef      	b.n	8000f1e <__aeabi_d2iz+0x2e>
 8000f3e:	46c0      	nop			; (mov r8, r8)
 8000f40:	000003fe 	.word	0x000003fe
 8000f44:	0000041d 	.word	0x0000041d
 8000f48:	00000433 	.word	0x00000433
 8000f4c:	00000413 	.word	0x00000413
 8000f50:	7fffffff 	.word	0x7fffffff
 8000f54:	fffffbed 	.word	0xfffffbed

08000f58 <__aeabi_ui2d>:
 8000f58:	b510      	push	{r4, lr}
 8000f5a:	1e04      	subs	r4, r0, #0
 8000f5c:	d028      	beq.n	8000fb0 <__aeabi_ui2d+0x58>
 8000f5e:	f000 f871 	bl	8001044 <__clzsi2>
 8000f62:	4b15      	ldr	r3, [pc, #84]	; (8000fb8 <__aeabi_ui2d+0x60>)
 8000f64:	4a15      	ldr	r2, [pc, #84]	; (8000fbc <__aeabi_ui2d+0x64>)
 8000f66:	1a1b      	subs	r3, r3, r0
 8000f68:	1ad2      	subs	r2, r2, r3
 8000f6a:	2a1f      	cmp	r2, #31
 8000f6c:	dd15      	ble.n	8000f9a <__aeabi_ui2d+0x42>
 8000f6e:	4a14      	ldr	r2, [pc, #80]	; (8000fc0 <__aeabi_ui2d+0x68>)
 8000f70:	1ad2      	subs	r2, r2, r3
 8000f72:	4094      	lsls	r4, r2
 8000f74:	2200      	movs	r2, #0
 8000f76:	0324      	lsls	r4, r4, #12
 8000f78:	055b      	lsls	r3, r3, #21
 8000f7a:	0b24      	lsrs	r4, r4, #12
 8000f7c:	0d5b      	lsrs	r3, r3, #21
 8000f7e:	2100      	movs	r1, #0
 8000f80:	0010      	movs	r0, r2
 8000f82:	0324      	lsls	r4, r4, #12
 8000f84:	0d0a      	lsrs	r2, r1, #20
 8000f86:	0b24      	lsrs	r4, r4, #12
 8000f88:	0512      	lsls	r2, r2, #20
 8000f8a:	4322      	orrs	r2, r4
 8000f8c:	4c0d      	ldr	r4, [pc, #52]	; (8000fc4 <__aeabi_ui2d+0x6c>)
 8000f8e:	051b      	lsls	r3, r3, #20
 8000f90:	4022      	ands	r2, r4
 8000f92:	4313      	orrs	r3, r2
 8000f94:	005b      	lsls	r3, r3, #1
 8000f96:	0859      	lsrs	r1, r3, #1
 8000f98:	bd10      	pop	{r4, pc}
 8000f9a:	0021      	movs	r1, r4
 8000f9c:	4091      	lsls	r1, r2
 8000f9e:	000a      	movs	r2, r1
 8000fa0:	210b      	movs	r1, #11
 8000fa2:	1a08      	subs	r0, r1, r0
 8000fa4:	40c4      	lsrs	r4, r0
 8000fa6:	055b      	lsls	r3, r3, #21
 8000fa8:	0324      	lsls	r4, r4, #12
 8000faa:	0b24      	lsrs	r4, r4, #12
 8000fac:	0d5b      	lsrs	r3, r3, #21
 8000fae:	e7e6      	b.n	8000f7e <__aeabi_ui2d+0x26>
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	2400      	movs	r4, #0
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	e7e2      	b.n	8000f7e <__aeabi_ui2d+0x26>
 8000fb8:	0000041e 	.word	0x0000041e
 8000fbc:	00000433 	.word	0x00000433
 8000fc0:	00000413 	.word	0x00000413
 8000fc4:	800fffff 	.word	0x800fffff

08000fc8 <__aeabi_cdrcmple>:
 8000fc8:	4684      	mov	ip, r0
 8000fca:	1c10      	adds	r0, r2, #0
 8000fcc:	4662      	mov	r2, ip
 8000fce:	468c      	mov	ip, r1
 8000fd0:	1c19      	adds	r1, r3, #0
 8000fd2:	4663      	mov	r3, ip
 8000fd4:	e000      	b.n	8000fd8 <__aeabi_cdcmpeq>
 8000fd6:	46c0      	nop			; (mov r8, r8)

08000fd8 <__aeabi_cdcmpeq>:
 8000fd8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000fda:	f000 f8ef 	bl	80011bc <__ledf2>
 8000fde:	2800      	cmp	r0, #0
 8000fe0:	d401      	bmi.n	8000fe6 <__aeabi_cdcmpeq+0xe>
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	42c8      	cmn	r0, r1
 8000fe6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000fe8 <__aeabi_dcmpeq>:
 8000fe8:	b510      	push	{r4, lr}
 8000fea:	f000 f849 	bl	8001080 <__eqdf2>
 8000fee:	4240      	negs	r0, r0
 8000ff0:	3001      	adds	r0, #1
 8000ff2:	bd10      	pop	{r4, pc}

08000ff4 <__aeabi_dcmplt>:
 8000ff4:	b510      	push	{r4, lr}
 8000ff6:	f000 f8e1 	bl	80011bc <__ledf2>
 8000ffa:	2800      	cmp	r0, #0
 8000ffc:	db01      	blt.n	8001002 <__aeabi_dcmplt+0xe>
 8000ffe:	2000      	movs	r0, #0
 8001000:	bd10      	pop	{r4, pc}
 8001002:	2001      	movs	r0, #1
 8001004:	bd10      	pop	{r4, pc}
 8001006:	46c0      	nop			; (mov r8, r8)

08001008 <__aeabi_dcmple>:
 8001008:	b510      	push	{r4, lr}
 800100a:	f000 f8d7 	bl	80011bc <__ledf2>
 800100e:	2800      	cmp	r0, #0
 8001010:	dd01      	ble.n	8001016 <__aeabi_dcmple+0xe>
 8001012:	2000      	movs	r0, #0
 8001014:	bd10      	pop	{r4, pc}
 8001016:	2001      	movs	r0, #1
 8001018:	bd10      	pop	{r4, pc}
 800101a:	46c0      	nop			; (mov r8, r8)

0800101c <__aeabi_dcmpgt>:
 800101c:	b510      	push	{r4, lr}
 800101e:	f000 f869 	bl	80010f4 <__gedf2>
 8001022:	2800      	cmp	r0, #0
 8001024:	dc01      	bgt.n	800102a <__aeabi_dcmpgt+0xe>
 8001026:	2000      	movs	r0, #0
 8001028:	bd10      	pop	{r4, pc}
 800102a:	2001      	movs	r0, #1
 800102c:	bd10      	pop	{r4, pc}
 800102e:	46c0      	nop			; (mov r8, r8)

08001030 <__aeabi_dcmpge>:
 8001030:	b510      	push	{r4, lr}
 8001032:	f000 f85f 	bl	80010f4 <__gedf2>
 8001036:	2800      	cmp	r0, #0
 8001038:	da01      	bge.n	800103e <__aeabi_dcmpge+0xe>
 800103a:	2000      	movs	r0, #0
 800103c:	bd10      	pop	{r4, pc}
 800103e:	2001      	movs	r0, #1
 8001040:	bd10      	pop	{r4, pc}
 8001042:	46c0      	nop			; (mov r8, r8)

08001044 <__clzsi2>:
 8001044:	211c      	movs	r1, #28
 8001046:	2301      	movs	r3, #1
 8001048:	041b      	lsls	r3, r3, #16
 800104a:	4298      	cmp	r0, r3
 800104c:	d301      	bcc.n	8001052 <__clzsi2+0xe>
 800104e:	0c00      	lsrs	r0, r0, #16
 8001050:	3910      	subs	r1, #16
 8001052:	0a1b      	lsrs	r3, r3, #8
 8001054:	4298      	cmp	r0, r3
 8001056:	d301      	bcc.n	800105c <__clzsi2+0x18>
 8001058:	0a00      	lsrs	r0, r0, #8
 800105a:	3908      	subs	r1, #8
 800105c:	091b      	lsrs	r3, r3, #4
 800105e:	4298      	cmp	r0, r3
 8001060:	d301      	bcc.n	8001066 <__clzsi2+0x22>
 8001062:	0900      	lsrs	r0, r0, #4
 8001064:	3904      	subs	r1, #4
 8001066:	a202      	add	r2, pc, #8	; (adr r2, 8001070 <__clzsi2+0x2c>)
 8001068:	5c10      	ldrb	r0, [r2, r0]
 800106a:	1840      	adds	r0, r0, r1
 800106c:	4770      	bx	lr
 800106e:	46c0      	nop			; (mov r8, r8)
 8001070:	02020304 	.word	0x02020304
 8001074:	01010101 	.word	0x01010101
	...

08001080 <__eqdf2>:
 8001080:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001082:	464f      	mov	r7, r9
 8001084:	4646      	mov	r6, r8
 8001086:	46d6      	mov	lr, sl
 8001088:	005c      	lsls	r4, r3, #1
 800108a:	b5c0      	push	{r6, r7, lr}
 800108c:	031f      	lsls	r7, r3, #12
 800108e:	0fdb      	lsrs	r3, r3, #31
 8001090:	469a      	mov	sl, r3
 8001092:	4b17      	ldr	r3, [pc, #92]	; (80010f0 <__eqdf2+0x70>)
 8001094:	030e      	lsls	r6, r1, #12
 8001096:	004d      	lsls	r5, r1, #1
 8001098:	4684      	mov	ip, r0
 800109a:	4680      	mov	r8, r0
 800109c:	0b36      	lsrs	r6, r6, #12
 800109e:	0d6d      	lsrs	r5, r5, #21
 80010a0:	0fc9      	lsrs	r1, r1, #31
 80010a2:	4691      	mov	r9, r2
 80010a4:	0b3f      	lsrs	r7, r7, #12
 80010a6:	0d64      	lsrs	r4, r4, #21
 80010a8:	2001      	movs	r0, #1
 80010aa:	429d      	cmp	r5, r3
 80010ac:	d008      	beq.n	80010c0 <__eqdf2+0x40>
 80010ae:	429c      	cmp	r4, r3
 80010b0:	d001      	beq.n	80010b6 <__eqdf2+0x36>
 80010b2:	42a5      	cmp	r5, r4
 80010b4:	d00b      	beq.n	80010ce <__eqdf2+0x4e>
 80010b6:	bc1c      	pop	{r2, r3, r4}
 80010b8:	4690      	mov	r8, r2
 80010ba:	4699      	mov	r9, r3
 80010bc:	46a2      	mov	sl, r4
 80010be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010c0:	4663      	mov	r3, ip
 80010c2:	4333      	orrs	r3, r6
 80010c4:	d1f7      	bne.n	80010b6 <__eqdf2+0x36>
 80010c6:	42ac      	cmp	r4, r5
 80010c8:	d1f5      	bne.n	80010b6 <__eqdf2+0x36>
 80010ca:	433a      	orrs	r2, r7
 80010cc:	d1f3      	bne.n	80010b6 <__eqdf2+0x36>
 80010ce:	2001      	movs	r0, #1
 80010d0:	42be      	cmp	r6, r7
 80010d2:	d1f0      	bne.n	80010b6 <__eqdf2+0x36>
 80010d4:	45c8      	cmp	r8, r9
 80010d6:	d1ee      	bne.n	80010b6 <__eqdf2+0x36>
 80010d8:	4551      	cmp	r1, sl
 80010da:	d007      	beq.n	80010ec <__eqdf2+0x6c>
 80010dc:	2d00      	cmp	r5, #0
 80010de:	d1ea      	bne.n	80010b6 <__eqdf2+0x36>
 80010e0:	4663      	mov	r3, ip
 80010e2:	431e      	orrs	r6, r3
 80010e4:	0030      	movs	r0, r6
 80010e6:	1e46      	subs	r6, r0, #1
 80010e8:	41b0      	sbcs	r0, r6
 80010ea:	e7e4      	b.n	80010b6 <__eqdf2+0x36>
 80010ec:	2000      	movs	r0, #0
 80010ee:	e7e2      	b.n	80010b6 <__eqdf2+0x36>
 80010f0:	000007ff 	.word	0x000007ff

080010f4 <__gedf2>:
 80010f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010f6:	4645      	mov	r5, r8
 80010f8:	46de      	mov	lr, fp
 80010fa:	4657      	mov	r7, sl
 80010fc:	464e      	mov	r6, r9
 80010fe:	b5e0      	push	{r5, r6, r7, lr}
 8001100:	031f      	lsls	r7, r3, #12
 8001102:	0b3d      	lsrs	r5, r7, #12
 8001104:	4f2c      	ldr	r7, [pc, #176]	; (80011b8 <__gedf2+0xc4>)
 8001106:	030e      	lsls	r6, r1, #12
 8001108:	004c      	lsls	r4, r1, #1
 800110a:	46ab      	mov	fp, r5
 800110c:	005d      	lsls	r5, r3, #1
 800110e:	4684      	mov	ip, r0
 8001110:	0b36      	lsrs	r6, r6, #12
 8001112:	0d64      	lsrs	r4, r4, #21
 8001114:	0fc9      	lsrs	r1, r1, #31
 8001116:	4690      	mov	r8, r2
 8001118:	0d6d      	lsrs	r5, r5, #21
 800111a:	0fdb      	lsrs	r3, r3, #31
 800111c:	42bc      	cmp	r4, r7
 800111e:	d02a      	beq.n	8001176 <__gedf2+0x82>
 8001120:	4f25      	ldr	r7, [pc, #148]	; (80011b8 <__gedf2+0xc4>)
 8001122:	42bd      	cmp	r5, r7
 8001124:	d02d      	beq.n	8001182 <__gedf2+0x8e>
 8001126:	2c00      	cmp	r4, #0
 8001128:	d10f      	bne.n	800114a <__gedf2+0x56>
 800112a:	4330      	orrs	r0, r6
 800112c:	0007      	movs	r7, r0
 800112e:	4681      	mov	r9, r0
 8001130:	4278      	negs	r0, r7
 8001132:	4178      	adcs	r0, r7
 8001134:	b2c0      	uxtb	r0, r0
 8001136:	2d00      	cmp	r5, #0
 8001138:	d117      	bne.n	800116a <__gedf2+0x76>
 800113a:	465f      	mov	r7, fp
 800113c:	433a      	orrs	r2, r7
 800113e:	d114      	bne.n	800116a <__gedf2+0x76>
 8001140:	464b      	mov	r3, r9
 8001142:	2000      	movs	r0, #0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d00a      	beq.n	800115e <__gedf2+0x6a>
 8001148:	e006      	b.n	8001158 <__gedf2+0x64>
 800114a:	2d00      	cmp	r5, #0
 800114c:	d102      	bne.n	8001154 <__gedf2+0x60>
 800114e:	4658      	mov	r0, fp
 8001150:	4302      	orrs	r2, r0
 8001152:	d001      	beq.n	8001158 <__gedf2+0x64>
 8001154:	4299      	cmp	r1, r3
 8001156:	d018      	beq.n	800118a <__gedf2+0x96>
 8001158:	4248      	negs	r0, r1
 800115a:	2101      	movs	r1, #1
 800115c:	4308      	orrs	r0, r1
 800115e:	bc3c      	pop	{r2, r3, r4, r5}
 8001160:	4690      	mov	r8, r2
 8001162:	4699      	mov	r9, r3
 8001164:	46a2      	mov	sl, r4
 8001166:	46ab      	mov	fp, r5
 8001168:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800116a:	2800      	cmp	r0, #0
 800116c:	d0f2      	beq.n	8001154 <__gedf2+0x60>
 800116e:	2001      	movs	r0, #1
 8001170:	3b01      	subs	r3, #1
 8001172:	4318      	orrs	r0, r3
 8001174:	e7f3      	b.n	800115e <__gedf2+0x6a>
 8001176:	0037      	movs	r7, r6
 8001178:	4307      	orrs	r7, r0
 800117a:	d0d1      	beq.n	8001120 <__gedf2+0x2c>
 800117c:	2002      	movs	r0, #2
 800117e:	4240      	negs	r0, r0
 8001180:	e7ed      	b.n	800115e <__gedf2+0x6a>
 8001182:	465f      	mov	r7, fp
 8001184:	4317      	orrs	r7, r2
 8001186:	d0ce      	beq.n	8001126 <__gedf2+0x32>
 8001188:	e7f8      	b.n	800117c <__gedf2+0x88>
 800118a:	42ac      	cmp	r4, r5
 800118c:	dce4      	bgt.n	8001158 <__gedf2+0x64>
 800118e:	da03      	bge.n	8001198 <__gedf2+0xa4>
 8001190:	1e48      	subs	r0, r1, #1
 8001192:	2101      	movs	r1, #1
 8001194:	4308      	orrs	r0, r1
 8001196:	e7e2      	b.n	800115e <__gedf2+0x6a>
 8001198:	455e      	cmp	r6, fp
 800119a:	d8dd      	bhi.n	8001158 <__gedf2+0x64>
 800119c:	d006      	beq.n	80011ac <__gedf2+0xb8>
 800119e:	2000      	movs	r0, #0
 80011a0:	455e      	cmp	r6, fp
 80011a2:	d2dc      	bcs.n	800115e <__gedf2+0x6a>
 80011a4:	2301      	movs	r3, #1
 80011a6:	1e48      	subs	r0, r1, #1
 80011a8:	4318      	orrs	r0, r3
 80011aa:	e7d8      	b.n	800115e <__gedf2+0x6a>
 80011ac:	45c4      	cmp	ip, r8
 80011ae:	d8d3      	bhi.n	8001158 <__gedf2+0x64>
 80011b0:	2000      	movs	r0, #0
 80011b2:	45c4      	cmp	ip, r8
 80011b4:	d3f6      	bcc.n	80011a4 <__gedf2+0xb0>
 80011b6:	e7d2      	b.n	800115e <__gedf2+0x6a>
 80011b8:	000007ff 	.word	0x000007ff

080011bc <__ledf2>:
 80011bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011be:	464e      	mov	r6, r9
 80011c0:	4645      	mov	r5, r8
 80011c2:	46de      	mov	lr, fp
 80011c4:	4657      	mov	r7, sl
 80011c6:	005c      	lsls	r4, r3, #1
 80011c8:	b5e0      	push	{r5, r6, r7, lr}
 80011ca:	031f      	lsls	r7, r3, #12
 80011cc:	0fdb      	lsrs	r3, r3, #31
 80011ce:	4699      	mov	r9, r3
 80011d0:	4b2a      	ldr	r3, [pc, #168]	; (800127c <__ledf2+0xc0>)
 80011d2:	030e      	lsls	r6, r1, #12
 80011d4:	004d      	lsls	r5, r1, #1
 80011d6:	0fc9      	lsrs	r1, r1, #31
 80011d8:	4684      	mov	ip, r0
 80011da:	0b36      	lsrs	r6, r6, #12
 80011dc:	0d6d      	lsrs	r5, r5, #21
 80011de:	468b      	mov	fp, r1
 80011e0:	4690      	mov	r8, r2
 80011e2:	0b3f      	lsrs	r7, r7, #12
 80011e4:	0d64      	lsrs	r4, r4, #21
 80011e6:	429d      	cmp	r5, r3
 80011e8:	d020      	beq.n	800122c <__ledf2+0x70>
 80011ea:	4b24      	ldr	r3, [pc, #144]	; (800127c <__ledf2+0xc0>)
 80011ec:	429c      	cmp	r4, r3
 80011ee:	d022      	beq.n	8001236 <__ledf2+0x7a>
 80011f0:	2d00      	cmp	r5, #0
 80011f2:	d112      	bne.n	800121a <__ledf2+0x5e>
 80011f4:	4330      	orrs	r0, r6
 80011f6:	4243      	negs	r3, r0
 80011f8:	4143      	adcs	r3, r0
 80011fa:	b2db      	uxtb	r3, r3
 80011fc:	2c00      	cmp	r4, #0
 80011fe:	d01f      	beq.n	8001240 <__ledf2+0x84>
 8001200:	2b00      	cmp	r3, #0
 8001202:	d00c      	beq.n	800121e <__ledf2+0x62>
 8001204:	464b      	mov	r3, r9
 8001206:	2001      	movs	r0, #1
 8001208:	3b01      	subs	r3, #1
 800120a:	4303      	orrs	r3, r0
 800120c:	0018      	movs	r0, r3
 800120e:	bc3c      	pop	{r2, r3, r4, r5}
 8001210:	4690      	mov	r8, r2
 8001212:	4699      	mov	r9, r3
 8001214:	46a2      	mov	sl, r4
 8001216:	46ab      	mov	fp, r5
 8001218:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800121a:	2c00      	cmp	r4, #0
 800121c:	d016      	beq.n	800124c <__ledf2+0x90>
 800121e:	45cb      	cmp	fp, r9
 8001220:	d017      	beq.n	8001252 <__ledf2+0x96>
 8001222:	465b      	mov	r3, fp
 8001224:	4259      	negs	r1, r3
 8001226:	2301      	movs	r3, #1
 8001228:	430b      	orrs	r3, r1
 800122a:	e7ef      	b.n	800120c <__ledf2+0x50>
 800122c:	0031      	movs	r1, r6
 800122e:	2302      	movs	r3, #2
 8001230:	4301      	orrs	r1, r0
 8001232:	d1eb      	bne.n	800120c <__ledf2+0x50>
 8001234:	e7d9      	b.n	80011ea <__ledf2+0x2e>
 8001236:	0039      	movs	r1, r7
 8001238:	2302      	movs	r3, #2
 800123a:	4311      	orrs	r1, r2
 800123c:	d1e6      	bne.n	800120c <__ledf2+0x50>
 800123e:	e7d7      	b.n	80011f0 <__ledf2+0x34>
 8001240:	433a      	orrs	r2, r7
 8001242:	d1dd      	bne.n	8001200 <__ledf2+0x44>
 8001244:	2300      	movs	r3, #0
 8001246:	2800      	cmp	r0, #0
 8001248:	d0e0      	beq.n	800120c <__ledf2+0x50>
 800124a:	e7ea      	b.n	8001222 <__ledf2+0x66>
 800124c:	433a      	orrs	r2, r7
 800124e:	d1e6      	bne.n	800121e <__ledf2+0x62>
 8001250:	e7e7      	b.n	8001222 <__ledf2+0x66>
 8001252:	42a5      	cmp	r5, r4
 8001254:	dce5      	bgt.n	8001222 <__ledf2+0x66>
 8001256:	db05      	blt.n	8001264 <__ledf2+0xa8>
 8001258:	42be      	cmp	r6, r7
 800125a:	d8e2      	bhi.n	8001222 <__ledf2+0x66>
 800125c:	d007      	beq.n	800126e <__ledf2+0xb2>
 800125e:	2300      	movs	r3, #0
 8001260:	42be      	cmp	r6, r7
 8001262:	d2d3      	bcs.n	800120c <__ledf2+0x50>
 8001264:	4659      	mov	r1, fp
 8001266:	2301      	movs	r3, #1
 8001268:	3901      	subs	r1, #1
 800126a:	430b      	orrs	r3, r1
 800126c:	e7ce      	b.n	800120c <__ledf2+0x50>
 800126e:	45c4      	cmp	ip, r8
 8001270:	d8d7      	bhi.n	8001222 <__ledf2+0x66>
 8001272:	2300      	movs	r3, #0
 8001274:	45c4      	cmp	ip, r8
 8001276:	d3f5      	bcc.n	8001264 <__ledf2+0xa8>
 8001278:	e7c8      	b.n	800120c <__ledf2+0x50>
 800127a:	46c0      	nop			; (mov r8, r8)
 800127c:	000007ff 	.word	0x000007ff

08001280 <CAN_DeInit>:
  * @brief  Deinitializes the CAN peripheral registers to their default reset values.
  * @param  CANx: where x can be 1 to select the CAN peripheral.
  * @retval None.
  */
void CAN_DeInit(CAN_TypeDef* CANx)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
 
  /* Enable CAN reset state */
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN, ENABLE);
 8001288:	2380      	movs	r3, #128	; 0x80
 800128a:	049b      	lsls	r3, r3, #18
 800128c:	2101      	movs	r1, #1
 800128e:	0018      	movs	r0, r3
 8001290:	f000 fd92 	bl	8001db8 <RCC_APB1PeriphResetCmd>
  /* Release CAN from reset state */
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN, DISABLE);
 8001294:	2380      	movs	r3, #128	; 0x80
 8001296:	049b      	lsls	r3, r3, #18
 8001298:	2100      	movs	r1, #0
 800129a:	0018      	movs	r0, r3
 800129c:	f000 fd8c 	bl	8001db8 <RCC_APB1PeriphResetCmd>
}
 80012a0:	46c0      	nop			; (mov r8, r8)
 80012a2:	46bd      	mov	sp, r7
 80012a4:	b002      	add	sp, #8
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <CAN_Init>:
  *         the configuration information for the CAN peripheral.
  * @retval Constant indicates initialization succeed which will be 
  *         CAN_InitStatus_Failed or CAN_InitStatus_Success.
  */
uint8_t CAN_Init(CAN_TypeDef* CANx, CAN_InitTypeDef* CAN_InitStruct)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	6039      	str	r1, [r7, #0]
  uint8_t InitStatus = CAN_InitStatus_Failed;
 80012b2:	230f      	movs	r3, #15
 80012b4:	18fb      	adds	r3, r7, r3
 80012b6:	2200      	movs	r2, #0
 80012b8:	701a      	strb	r2, [r3, #0]
  uint32_t wait_ack = 0x00000000;
 80012ba:	2300      	movs	r3, #0
 80012bc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_CAN_BS1(CAN_InitStruct->CAN_BS1));
  assert_param(IS_CAN_BS2(CAN_InitStruct->CAN_BS2));
  assert_param(IS_CAN_PRESCALER(CAN_InitStruct->CAN_Prescaler));

  /* Exit from sleep mode */
  CANx->MCR &= (~(uint32_t)CAN_MCR_SLEEP);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	2202      	movs	r2, #2
 80012c4:	4393      	bics	r3, r2
 80012c6:	001a      	movs	r2, r3
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	601a      	str	r2, [r3, #0]

  /* Request initialisation */
  CANx->MCR |= CAN_MCR_INRQ ;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	2201      	movs	r2, #1
 80012d2:	431a      	orrs	r2, r3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	601a      	str	r2, [r3, #0]

  /* Wait the acknowledge */
  while (((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 80012d8:	e002      	b.n	80012e0 <CAN_Init+0x38>
  {
    wait_ack++;
 80012da:	68bb      	ldr	r3, [r7, #8]
 80012dc:	3301      	adds	r3, #1
 80012de:	60bb      	str	r3, [r7, #8]
  while (((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	2201      	movs	r2, #1
 80012e6:	4013      	ands	r3, r2
 80012e8:	2b01      	cmp	r3, #1
 80012ea:	d003      	beq.n	80012f4 <CAN_Init+0x4c>
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	4a5e      	ldr	r2, [pc, #376]	; (8001468 <CAN_Init+0x1c0>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d1f2      	bne.n	80012da <CAN_Init+0x32>
  }

  /* Check acknowledge */
  if ((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	2201      	movs	r2, #1
 80012fa:	4013      	ands	r3, r2
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	d004      	beq.n	800130a <CAN_Init+0x62>
  {
    InitStatus = CAN_InitStatus_Failed;
 8001300:	230f      	movs	r3, #15
 8001302:	18fb      	adds	r3, r7, r3
 8001304:	2200      	movs	r2, #0
 8001306:	701a      	strb	r2, [r3, #0]
 8001308:	e0a6      	b.n	8001458 <CAN_Init+0x1b0>
  }
  else 
  {
    /* Set the time triggered communication mode */
    if (CAN_InitStruct->CAN_TTCM == ENABLE)
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	799b      	ldrb	r3, [r3, #6]
 800130e:	2b01      	cmp	r3, #1
 8001310:	d106      	bne.n	8001320 <CAN_Init+0x78>
    {
      CANx->MCR |= CAN_MCR_TTCM;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	2280      	movs	r2, #128	; 0x80
 8001318:	431a      	orrs	r2, r3
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	601a      	str	r2, [r3, #0]
 800131e:	e006      	b.n	800132e <CAN_Init+0x86>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_TTCM;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	2280      	movs	r2, #128	; 0x80
 8001326:	4393      	bics	r3, r2
 8001328:	001a      	movs	r2, r3
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	601a      	str	r2, [r3, #0]
    }

    /* Set the automatic bus-off management */
    if (CAN_InitStruct->CAN_ABOM == ENABLE)
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	79db      	ldrb	r3, [r3, #7]
 8001332:	2b01      	cmp	r3, #1
 8001334:	d106      	bne.n	8001344 <CAN_Init+0x9c>
    {
      CANx->MCR |= CAN_MCR_ABOM;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	2240      	movs	r2, #64	; 0x40
 800133c:	431a      	orrs	r2, r3
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	601a      	str	r2, [r3, #0]
 8001342:	e006      	b.n	8001352 <CAN_Init+0xaa>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_ABOM;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	2240      	movs	r2, #64	; 0x40
 800134a:	4393      	bics	r3, r2
 800134c:	001a      	movs	r2, r3
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	601a      	str	r2, [r3, #0]
    }

    /* Set the automatic wake-up mode */
    if (CAN_InitStruct->CAN_AWUM == ENABLE)
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	7a1b      	ldrb	r3, [r3, #8]
 8001356:	2b01      	cmp	r3, #1
 8001358:	d106      	bne.n	8001368 <CAN_Init+0xc0>
    {
      CANx->MCR |= CAN_MCR_AWUM;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	2220      	movs	r2, #32
 8001360:	431a      	orrs	r2, r3
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	601a      	str	r2, [r3, #0]
 8001366:	e006      	b.n	8001376 <CAN_Init+0xce>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_AWUM;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	2220      	movs	r2, #32
 800136e:	4393      	bics	r3, r2
 8001370:	001a      	movs	r2, r3
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	601a      	str	r2, [r3, #0]
    }

    /* Set the no automatic retransmission */
    if (CAN_InitStruct->CAN_NART == ENABLE)
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	7a5b      	ldrb	r3, [r3, #9]
 800137a:	2b01      	cmp	r3, #1
 800137c:	d106      	bne.n	800138c <CAN_Init+0xe4>
    {
      CANx->MCR |= CAN_MCR_NART;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	2210      	movs	r2, #16
 8001384:	431a      	orrs	r2, r3
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	601a      	str	r2, [r3, #0]
 800138a:	e006      	b.n	800139a <CAN_Init+0xf2>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_NART;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	2210      	movs	r2, #16
 8001392:	4393      	bics	r3, r2
 8001394:	001a      	movs	r2, r3
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	601a      	str	r2, [r3, #0]
    }

    /* Set the receive FIFO locked mode */
    if (CAN_InitStruct->CAN_RFLM == ENABLE)
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	7a9b      	ldrb	r3, [r3, #10]
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d106      	bne.n	80013b0 <CAN_Init+0x108>
    {
      CANx->MCR |= CAN_MCR_RFLM;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	2208      	movs	r2, #8
 80013a8:	431a      	orrs	r2, r3
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	601a      	str	r2, [r3, #0]
 80013ae:	e006      	b.n	80013be <CAN_Init+0x116>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_RFLM;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	2208      	movs	r2, #8
 80013b6:	4393      	bics	r3, r2
 80013b8:	001a      	movs	r2, r3
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	601a      	str	r2, [r3, #0]
    }

    /* Set the transmit FIFO priority */
    if (CAN_InitStruct->CAN_TXFP == ENABLE)
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	7adb      	ldrb	r3, [r3, #11]
 80013c2:	2b01      	cmp	r3, #1
 80013c4:	d106      	bne.n	80013d4 <CAN_Init+0x12c>
    {
      CANx->MCR |= CAN_MCR_TXFP;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	2204      	movs	r2, #4
 80013cc:	431a      	orrs	r2, r3
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	601a      	str	r2, [r3, #0]
 80013d2:	e006      	b.n	80013e2 <CAN_Init+0x13a>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_TXFP;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	2204      	movs	r2, #4
 80013da:	4393      	bics	r3, r2
 80013dc:	001a      	movs	r2, r3
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	601a      	str	r2, [r3, #0]
    }

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	789b      	ldrb	r3, [r3, #2]
 80013e6:	079a      	lsls	r2, r3, #30
                ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	78db      	ldrb	r3, [r3, #3]
 80013ec:	061b      	lsls	r3, r3, #24
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
 80013ee:	431a      	orrs	r2, r3
                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	791b      	ldrb	r3, [r3, #4]
 80013f4:	041b      	lsls	r3, r3, #16
                ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
 80013f6:	431a      	orrs	r2, r3
                ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	795b      	ldrb	r3, [r3, #5]
 80013fc:	051b      	lsls	r3, r3, #20
                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
 80013fe:	431a      	orrs	r2, r3
               ((uint32_t)CAN_InitStruct->CAN_Prescaler - 1);
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	881b      	ldrh	r3, [r3, #0]
 8001404:	3b01      	subs	r3, #1
                ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
 8001406:	431a      	orrs	r2, r3
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	61da      	str	r2, [r3, #28]

    /* Request leave initialisation */
    CANx->MCR &= ~(uint32_t)CAN_MCR_INRQ;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	2201      	movs	r2, #1
 8001412:	4393      	bics	r3, r2
 8001414:	001a      	movs	r2, r3
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	601a      	str	r2, [r3, #0]

   /* Wait the acknowledge */
   wait_ack = 0;
 800141a:	2300      	movs	r3, #0
 800141c:	60bb      	str	r3, [r7, #8]

   while (((CANx->MSR & CAN_MSR_INAK) == (uint16_t)CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 800141e:	e002      	b.n	8001426 <CAN_Init+0x17e>
   {
     wait_ack++;
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	3301      	adds	r3, #1
 8001424:	60bb      	str	r3, [r7, #8]
   while (((CANx->MSR & CAN_MSR_INAK) == (uint16_t)CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	2201      	movs	r2, #1
 800142c:	4013      	ands	r3, r2
 800142e:	2b01      	cmp	r3, #1
 8001430:	d103      	bne.n	800143a <CAN_Init+0x192>
 8001432:	68bb      	ldr	r3, [r7, #8]
 8001434:	4a0c      	ldr	r2, [pc, #48]	; (8001468 <CAN_Init+0x1c0>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d1f2      	bne.n	8001420 <CAN_Init+0x178>
   }

    /* ...and check acknowledged */
    if ((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	2201      	movs	r2, #1
 8001440:	4013      	ands	r3, r2
 8001442:	2b01      	cmp	r3, #1
 8001444:	d104      	bne.n	8001450 <CAN_Init+0x1a8>
    {
      InitStatus = CAN_InitStatus_Failed;
 8001446:	230f      	movs	r3, #15
 8001448:	18fb      	adds	r3, r7, r3
 800144a:	2200      	movs	r2, #0
 800144c:	701a      	strb	r2, [r3, #0]
 800144e:	e003      	b.n	8001458 <CAN_Init+0x1b0>
    }
    else
    {
      InitStatus = CAN_InitStatus_Success ;
 8001450:	230f      	movs	r3, #15
 8001452:	18fb      	adds	r3, r7, r3
 8001454:	2201      	movs	r2, #1
 8001456:	701a      	strb	r2, [r3, #0]
    }
  }

  /* At this step, return the status of initialization */
  return InitStatus;
 8001458:	230f      	movs	r3, #15
 800145a:	18fb      	adds	r3, r7, r3
 800145c:	781b      	ldrb	r3, [r3, #0]
}
 800145e:	0018      	movs	r0, r3
 8001460:	46bd      	mov	sp, r7
 8001462:	b004      	add	sp, #16
 8001464:	bd80      	pop	{r7, pc}
 8001466:	46c0      	nop			; (mov r8, r8)
 8001468:	00ffffff 	.word	0x00ffffff

0800146c <CAN_FilterInit>:
  * @param  CAN_FilterInitStruct: pointer to a CAN_FilterInitTypeDef structure that
  *         contains the configuration information.
  * @retval None
  */
void CAN_FilterInit(CAN_FilterInitTypeDef* CAN_FilterInitStruct)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  uint32_t filter_number_bit_pos = 0;
 8001474:	2300      	movs	r3, #0
 8001476:	60fb      	str	r3, [r7, #12]
  assert_param(IS_CAN_FILTER_MODE(CAN_FilterInitStruct->CAN_FilterMode));
  assert_param(IS_CAN_FILTER_SCALE(CAN_FilterInitStruct->CAN_FilterScale));
  assert_param(IS_CAN_FILTER_FIFO(CAN_FilterInitStruct->CAN_FilterFIFOAssignment));
  assert_param(IS_FUNCTIONAL_STATE(CAN_FilterInitStruct->CAN_FilterActivation));

  filter_number_bit_pos = ((uint32_t)1) << CAN_FilterInitStruct->CAN_FilterNumber;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	7a9b      	ldrb	r3, [r3, #10]
 800147c:	001a      	movs	r2, r3
 800147e:	2301      	movs	r3, #1
 8001480:	4093      	lsls	r3, r2
 8001482:	60fb      	str	r3, [r7, #12]

  /* Initialisation mode for the filter */
  CAN->FMR |= FMR_FINIT;
 8001484:	4960      	ldr	r1, [pc, #384]	; (8001608 <CAN_FilterInit+0x19c>)
 8001486:	4a60      	ldr	r2, [pc, #384]	; (8001608 <CAN_FilterInit+0x19c>)
 8001488:	2380      	movs	r3, #128	; 0x80
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	58d3      	ldr	r3, [r2, r3]
 800148e:	2201      	movs	r2, #1
 8001490:	431a      	orrs	r2, r3
 8001492:	2380      	movs	r3, #128	; 0x80
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	50ca      	str	r2, [r1, r3]

  /* Filter Deactivation */
  CAN->FA1R &= ~(uint32_t)filter_number_bit_pos;
 8001498:	495b      	ldr	r1, [pc, #364]	; (8001608 <CAN_FilterInit+0x19c>)
 800149a:	4a5b      	ldr	r2, [pc, #364]	; (8001608 <CAN_FilterInit+0x19c>)
 800149c:	2387      	movs	r3, #135	; 0x87
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	58d3      	ldr	r3, [r2, r3]
 80014a2:	68fa      	ldr	r2, [r7, #12]
 80014a4:	43d2      	mvns	r2, r2
 80014a6:	401a      	ands	r2, r3
 80014a8:	2387      	movs	r3, #135	; 0x87
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	50ca      	str	r2, [r1, r3]

  /* Filter Scale */
  if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_16bit)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	7b1b      	ldrb	r3, [r3, #12]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d128      	bne.n	8001508 <CAN_FilterInit+0x9c>
  {
    /* 16-bit scale for the filter */
    CAN->FS1R &= ~(uint32_t)filter_number_bit_pos;
 80014b6:	4954      	ldr	r1, [pc, #336]	; (8001608 <CAN_FilterInit+0x19c>)
 80014b8:	4a53      	ldr	r2, [pc, #332]	; (8001608 <CAN_FilterInit+0x19c>)
 80014ba:	2383      	movs	r3, #131	; 0x83
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	58d3      	ldr	r3, [r2, r3]
 80014c0:	68fa      	ldr	r2, [r7, #12]
 80014c2:	43d2      	mvns	r2, r2
 80014c4:	401a      	ands	r2, r3
 80014c6:	2383      	movs	r3, #131	; 0x83
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	50ca      	str	r2, [r1, r3]

    /* First 16-bit identifier and First 16-bit mask */
    /* Or First 16-bit identifier and Second 16-bit identifier */
    CAN->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 80014cc:	494e      	ldr	r1, [pc, #312]	; (8001608 <CAN_FilterInit+0x19c>)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	7a9b      	ldrb	r3, [r3, #10]
 80014d2:	0018      	movs	r0, r3
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	88db      	ldrh	r3, [r3, #6]
 80014d8:	041b      	lsls	r3, r3, #16
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 80014da:	687a      	ldr	r2, [r7, #4]
 80014dc:	8852      	ldrh	r2, [r2, #2]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
 80014de:	431a      	orrs	r2, r3
    CAN->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 80014e0:	0003      	movs	r3, r0
 80014e2:	3348      	adds	r3, #72	; 0x48
 80014e4:	00db      	lsls	r3, r3, #3
 80014e6:	505a      	str	r2, [r3, r1]

    /* Second 16-bit identifier and Second 16-bit mask */
    /* Or Third 16-bit identifier and Fourth 16-bit identifier */
    CAN->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 80014e8:	4947      	ldr	r1, [pc, #284]	; (8001608 <CAN_FilterInit+0x19c>)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	7a9b      	ldrb	r3, [r3, #10]
 80014ee:	0018      	movs	r0, r3
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	889b      	ldrh	r3, [r3, #4]
 80014f4:	041b      	lsls	r3, r3, #16
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh);
 80014f6:	687a      	ldr	r2, [r7, #4]
 80014f8:	8812      	ldrh	r2, [r2, #0]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 80014fa:	431a      	orrs	r2, r3
    CAN->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 80014fc:	0003      	movs	r3, r0
 80014fe:	3348      	adds	r3, #72	; 0x48
 8001500:	00db      	lsls	r3, r3, #3
 8001502:	18cb      	adds	r3, r1, r3
 8001504:	3304      	adds	r3, #4
 8001506:	601a      	str	r2, [r3, #0]
  }

  if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_32bit)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	7b1b      	ldrb	r3, [r3, #12]
 800150c:	2b01      	cmp	r3, #1
 800150e:	d127      	bne.n	8001560 <CAN_FilterInit+0xf4>
  {
    /* 32-bit scale for the filter */
    CAN->FS1R |= filter_number_bit_pos;
 8001510:	493d      	ldr	r1, [pc, #244]	; (8001608 <CAN_FilterInit+0x19c>)
 8001512:	4a3d      	ldr	r2, [pc, #244]	; (8001608 <CAN_FilterInit+0x19c>)
 8001514:	2383      	movs	r3, #131	; 0x83
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	58d2      	ldr	r2, [r2, r3]
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	431a      	orrs	r2, r3
 800151e:	2383      	movs	r3, #131	; 0x83
 8001520:	009b      	lsls	r3, r3, #2
 8001522:	50ca      	str	r2, [r1, r3]
    /* 32-bit identifier or First 32-bit identifier */
    CAN->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 8001524:	4938      	ldr	r1, [pc, #224]	; (8001608 <CAN_FilterInit+0x19c>)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	7a9b      	ldrb	r3, [r3, #10]
 800152a:	0018      	movs	r0, r3
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	881b      	ldrh	r3, [r3, #0]
 8001530:	041b      	lsls	r3, r3, #16
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 8001532:	687a      	ldr	r2, [r7, #4]
 8001534:	8852      	ldrh	r2, [r2, #2]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
 8001536:	431a      	orrs	r2, r3
    CAN->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 8001538:	0003      	movs	r3, r0
 800153a:	3348      	adds	r3, #72	; 0x48
 800153c:	00db      	lsls	r3, r3, #3
 800153e:	505a      	str	r2, [r3, r1]
    /* 32-bit mask or Second 32-bit identifier */
    CAN->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 8001540:	4931      	ldr	r1, [pc, #196]	; (8001608 <CAN_FilterInit+0x19c>)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	7a9b      	ldrb	r3, [r3, #10]
 8001546:	0018      	movs	r0, r3
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	889b      	ldrh	r3, [r3, #4]
 800154c:	041b      	lsls	r3, r3, #16
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow);
 800154e:	687a      	ldr	r2, [r7, #4]
 8001550:	88d2      	ldrh	r2, [r2, #6]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 8001552:	431a      	orrs	r2, r3
    CAN->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 8001554:	0003      	movs	r3, r0
 8001556:	3348      	adds	r3, #72	; 0x48
 8001558:	00db      	lsls	r3, r3, #3
 800155a:	18cb      	adds	r3, r1, r3
 800155c:	3304      	adds	r3, #4
 800155e:	601a      	str	r2, [r3, #0]
  }

  /* Filter Mode */
  if (CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdMask)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	7adb      	ldrb	r3, [r3, #11]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d10b      	bne.n	8001580 <CAN_FilterInit+0x114>
  {
    /*Id/Mask mode for the filter*/
    CAN->FM1R &= ~(uint32_t)filter_number_bit_pos;
 8001568:	4927      	ldr	r1, [pc, #156]	; (8001608 <CAN_FilterInit+0x19c>)
 800156a:	4a27      	ldr	r2, [pc, #156]	; (8001608 <CAN_FilterInit+0x19c>)
 800156c:	2381      	movs	r3, #129	; 0x81
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	58d3      	ldr	r3, [r2, r3]
 8001572:	68fa      	ldr	r2, [r7, #12]
 8001574:	43d2      	mvns	r2, r2
 8001576:	401a      	ands	r2, r3
 8001578:	2381      	movs	r3, #129	; 0x81
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	50ca      	str	r2, [r1, r3]
 800157e:	e009      	b.n	8001594 <CAN_FilterInit+0x128>
  }
  else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
  {
    /*Identifier list mode for the filter*/
    CAN->FM1R |= (uint32_t)filter_number_bit_pos;
 8001580:	4921      	ldr	r1, [pc, #132]	; (8001608 <CAN_FilterInit+0x19c>)
 8001582:	4a21      	ldr	r2, [pc, #132]	; (8001608 <CAN_FilterInit+0x19c>)
 8001584:	2381      	movs	r3, #129	; 0x81
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	58d2      	ldr	r2, [r2, r3]
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	431a      	orrs	r2, r3
 800158e:	2381      	movs	r3, #129	; 0x81
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	50ca      	str	r2, [r1, r3]
  }

  /* Filter FIFO assignment */
  if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO0)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	891b      	ldrh	r3, [r3, #8]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d10a      	bne.n	80015b2 <CAN_FilterInit+0x146>
  {
    /* FIFO 0 assignation for the filter */
    CAN->FFA1R &= ~(uint32_t)filter_number_bit_pos;
 800159c:	491a      	ldr	r1, [pc, #104]	; (8001608 <CAN_FilterInit+0x19c>)
 800159e:	4a1a      	ldr	r2, [pc, #104]	; (8001608 <CAN_FilterInit+0x19c>)
 80015a0:	2385      	movs	r3, #133	; 0x85
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	58d3      	ldr	r3, [r2, r3]
 80015a6:	68fa      	ldr	r2, [r7, #12]
 80015a8:	43d2      	mvns	r2, r2
 80015aa:	401a      	ands	r2, r3
 80015ac:	2385      	movs	r3, #133	; 0x85
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	50ca      	str	r2, [r1, r3]
  }

  if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO1)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	891b      	ldrh	r3, [r3, #8]
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d109      	bne.n	80015ce <CAN_FilterInit+0x162>
  {
    /* FIFO 1 assignation for the filter */
    CAN->FFA1R |= (uint32_t)filter_number_bit_pos;
 80015ba:	4913      	ldr	r1, [pc, #76]	; (8001608 <CAN_FilterInit+0x19c>)
 80015bc:	4a12      	ldr	r2, [pc, #72]	; (8001608 <CAN_FilterInit+0x19c>)
 80015be:	2385      	movs	r3, #133	; 0x85
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	58d2      	ldr	r2, [r2, r3]
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	431a      	orrs	r2, r3
 80015c8:	2385      	movs	r3, #133	; 0x85
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	50ca      	str	r2, [r1, r3]
  }
  
  /* Filter activation */
  if (CAN_FilterInitStruct->CAN_FilterActivation == ENABLE)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	7b5b      	ldrb	r3, [r3, #13]
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d109      	bne.n	80015ea <CAN_FilterInit+0x17e>
  {
    CAN->FA1R |= filter_number_bit_pos;
 80015d6:	490c      	ldr	r1, [pc, #48]	; (8001608 <CAN_FilterInit+0x19c>)
 80015d8:	4a0b      	ldr	r2, [pc, #44]	; (8001608 <CAN_FilterInit+0x19c>)
 80015da:	2387      	movs	r3, #135	; 0x87
 80015dc:	009b      	lsls	r3, r3, #2
 80015de:	58d2      	ldr	r2, [r2, r3]
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	431a      	orrs	r2, r3
 80015e4:	2387      	movs	r3, #135	; 0x87
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	50ca      	str	r2, [r1, r3]
  }

  /* Leave the initialisation mode for the filter */
  CAN->FMR &= ~FMR_FINIT;
 80015ea:	4907      	ldr	r1, [pc, #28]	; (8001608 <CAN_FilterInit+0x19c>)
 80015ec:	4a06      	ldr	r2, [pc, #24]	; (8001608 <CAN_FilterInit+0x19c>)
 80015ee:	2380      	movs	r3, #128	; 0x80
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	58d3      	ldr	r3, [r2, r3]
 80015f4:	2201      	movs	r2, #1
 80015f6:	4393      	bics	r3, r2
 80015f8:	001a      	movs	r2, r3
 80015fa:	2380      	movs	r3, #128	; 0x80
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	50ca      	str	r2, [r1, r3]
}
 8001600:	46c0      	nop			; (mov r8, r8)
 8001602:	46bd      	mov	sp, r7
 8001604:	b004      	add	sp, #16
 8001606:	bd80      	pop	{r7, pc}
 8001608:	40006400 	.word	0x40006400

0800160c <CAN_StructInit>:
  * @brief  Fills each CAN_InitStruct member with its default value.
  * @param  CAN_InitStruct: pointer to a CAN_InitTypeDef structure which ill be initialized.
  * @retval None
  */
void CAN_StructInit(CAN_InitTypeDef* CAN_InitStruct)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  /* Reset CAN init structure parameters values */
  
  /* Initialize the time triggered communication mode */
  CAN_InitStruct->CAN_TTCM = DISABLE;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2200      	movs	r2, #0
 8001618:	719a      	strb	r2, [r3, #6]
  
  /* Initialize the automatic bus-off management */
  CAN_InitStruct->CAN_ABOM = DISABLE;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2200      	movs	r2, #0
 800161e:	71da      	strb	r2, [r3, #7]
  
  /* Initialize the automatic wake-up mode */
  CAN_InitStruct->CAN_AWUM = DISABLE;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2200      	movs	r2, #0
 8001624:	721a      	strb	r2, [r3, #8]
  
  /* Initialize the no automatic retransmission */
  CAN_InitStruct->CAN_NART = DISABLE;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2200      	movs	r2, #0
 800162a:	725a      	strb	r2, [r3, #9]
  
  /* Initialize the receive FIFO locked mode */
  CAN_InitStruct->CAN_RFLM = DISABLE;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2200      	movs	r2, #0
 8001630:	729a      	strb	r2, [r3, #10]
  
  /* Initialize the transmit FIFO priority */
  CAN_InitStruct->CAN_TXFP = DISABLE;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2200      	movs	r2, #0
 8001636:	72da      	strb	r2, [r3, #11]
  
  /* Initialize the CAN_Mode member */
  CAN_InitStruct->CAN_Mode = CAN_Mode_Normal;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2200      	movs	r2, #0
 800163c:	709a      	strb	r2, [r3, #2]
  
  /* Initialize the CAN_SJW member */
  CAN_InitStruct->CAN_SJW = CAN_SJW_1tq;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2200      	movs	r2, #0
 8001642:	70da      	strb	r2, [r3, #3]
  
  /* Initialize the CAN_BS1 member */
  CAN_InitStruct->CAN_BS1 = CAN_BS1_4tq;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2203      	movs	r2, #3
 8001648:	711a      	strb	r2, [r3, #4]
  
  /* Initialize the CAN_BS2 member */
  CAN_InitStruct->CAN_BS2 = CAN_BS2_3tq;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2202      	movs	r2, #2
 800164e:	715a      	strb	r2, [r3, #5]
  
  /* Initialize the CAN_Prescaler member */
  CAN_InitStruct->CAN_Prescaler = 1;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2201      	movs	r2, #1
 8001654:	801a      	strh	r2, [r3, #0]
}
 8001656:	46c0      	nop			; (mov r8, r8)
 8001658:	46bd      	mov	sp, r7
 800165a:	b002      	add	sp, #8
 800165c:	bd80      	pop	{r7, pc}

0800165e <CAN_Receive>:
  * @param  RxMessage: pointer to a structure receive frame which contains CAN Id,
  *         CAN DLC, CAN data and FMI number.
  * @retval None
  */
void CAN_Receive(CAN_TypeDef* CANx, uint8_t FIFONumber, CanRxMsg* RxMessage)
{
 800165e:	b580      	push	{r7, lr}
 8001660:	b084      	sub	sp, #16
 8001662:	af00      	add	r7, sp, #0
 8001664:	60f8      	str	r0, [r7, #12]
 8001666:	607a      	str	r2, [r7, #4]
 8001668:	230b      	movs	r3, #11
 800166a:	18fb      	adds	r3, r7, r3
 800166c:	1c0a      	adds	r2, r1, #0
 800166e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_FIFO(FIFONumber));
  /* Get the Id */
  RxMessage->IDE = (uint8_t)0x04 & CANx->sFIFOMailBox[FIFONumber].RIR;
 8001670:	230b      	movs	r3, #11
 8001672:	18fb      	adds	r3, r7, r3
 8001674:	781a      	ldrb	r2, [r3, #0]
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	321b      	adds	r2, #27
 800167a:	0112      	lsls	r2, r2, #4
 800167c:	58d3      	ldr	r3, [r2, r3]
 800167e:	b2db      	uxtb	r3, r3
 8001680:	2204      	movs	r2, #4
 8001682:	4013      	ands	r3, r2
 8001684:	b2da      	uxtb	r2, r3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	721a      	strb	r2, [r3, #8]
  if (RxMessage->IDE == CAN_Id_Standard)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	7a1b      	ldrb	r3, [r3, #8]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d10c      	bne.n	80016ac <CAN_Receive+0x4e>
  {
    RxMessage->StdId = (uint32_t)0x000007FF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 21);
 8001692:	230b      	movs	r3, #11
 8001694:	18fb      	adds	r3, r7, r3
 8001696:	781a      	ldrb	r2, [r3, #0]
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	321b      	adds	r2, #27
 800169c:	0112      	lsls	r2, r2, #4
 800169e:	58d3      	ldr	r3, [r2, r3]
 80016a0:	0d5b      	lsrs	r3, r3, #21
 80016a2:	055b      	lsls	r3, r3, #21
 80016a4:	0d5a      	lsrs	r2, r3, #21
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	601a      	str	r2, [r3, #0]
 80016aa:	e00b      	b.n	80016c4 <CAN_Receive+0x66>
  }
  else
  {
    RxMessage->ExtId = (uint32_t)0x1FFFFFFF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 3);
 80016ac:	230b      	movs	r3, #11
 80016ae:	18fb      	adds	r3, r7, r3
 80016b0:	781a      	ldrb	r2, [r3, #0]
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	321b      	adds	r2, #27
 80016b6:	0112      	lsls	r2, r2, #4
 80016b8:	58d3      	ldr	r3, [r2, r3]
 80016ba:	08db      	lsrs	r3, r3, #3
 80016bc:	00db      	lsls	r3, r3, #3
 80016be:	08da      	lsrs	r2, r3, #3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	605a      	str	r2, [r3, #4]
  }
  
  RxMessage->RTR = (uint8_t)0x02 & CANx->sFIFOMailBox[FIFONumber].RIR;
 80016c4:	230b      	movs	r3, #11
 80016c6:	18fb      	adds	r3, r7, r3
 80016c8:	781a      	ldrb	r2, [r3, #0]
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	321b      	adds	r2, #27
 80016ce:	0112      	lsls	r2, r2, #4
 80016d0:	58d3      	ldr	r3, [r2, r3]
 80016d2:	b2db      	uxtb	r3, r3
 80016d4:	2202      	movs	r2, #2
 80016d6:	4013      	ands	r3, r2
 80016d8:	b2da      	uxtb	r2, r3
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	725a      	strb	r2, [r3, #9]
  /* Get the DLC */
  RxMessage->DLC = (uint8_t)0x0F & CANx->sFIFOMailBox[FIFONumber].RDTR;
 80016de:	230b      	movs	r3, #11
 80016e0:	18fb      	adds	r3, r7, r3
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	68fa      	ldr	r2, [r7, #12]
 80016e6:	331b      	adds	r3, #27
 80016e8:	011b      	lsls	r3, r3, #4
 80016ea:	18d3      	adds	r3, r2, r3
 80016ec:	3304      	adds	r3, #4
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	220f      	movs	r2, #15
 80016f4:	4013      	ands	r3, r2
 80016f6:	b2da      	uxtb	r2, r3
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	729a      	strb	r2, [r3, #10]
  /* Get the FMI */
  RxMessage->FMI = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDTR >> 8);
 80016fc:	230b      	movs	r3, #11
 80016fe:	18fb      	adds	r3, r7, r3
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	68fa      	ldr	r2, [r7, #12]
 8001704:	331b      	adds	r3, #27
 8001706:	011b      	lsls	r3, r3, #4
 8001708:	18d3      	adds	r3, r2, r3
 800170a:	3304      	adds	r3, #4
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	0a1b      	lsrs	r3, r3, #8
 8001710:	b2da      	uxtb	r2, r3
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	74da      	strb	r2, [r3, #19]
  /* Get the data field */
  RxMessage->Data[0] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDLR;
 8001716:	230b      	movs	r3, #11
 8001718:	18fb      	adds	r3, r7, r3
 800171a:	781a      	ldrb	r2, [r3, #0]
 800171c:	68f9      	ldr	r1, [r7, #12]
 800171e:	23dc      	movs	r3, #220	; 0xdc
 8001720:	005b      	lsls	r3, r3, #1
 8001722:	0112      	lsls	r2, r2, #4
 8001724:	188a      	adds	r2, r1, r2
 8001726:	18d3      	adds	r3, r2, r3
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	b2da      	uxtb	r2, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	72da      	strb	r2, [r3, #11]
  RxMessage->Data[1] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 8);
 8001730:	230b      	movs	r3, #11
 8001732:	18fb      	adds	r3, r7, r3
 8001734:	781a      	ldrb	r2, [r3, #0]
 8001736:	68f9      	ldr	r1, [r7, #12]
 8001738:	23dc      	movs	r3, #220	; 0xdc
 800173a:	005b      	lsls	r3, r3, #1
 800173c:	0112      	lsls	r2, r2, #4
 800173e:	188a      	adds	r2, r1, r2
 8001740:	18d3      	adds	r3, r2, r3
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	0a1b      	lsrs	r3, r3, #8
 8001746:	b2da      	uxtb	r2, r3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	731a      	strb	r2, [r3, #12]
  RxMessage->Data[2] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 16);
 800174c:	230b      	movs	r3, #11
 800174e:	18fb      	adds	r3, r7, r3
 8001750:	781a      	ldrb	r2, [r3, #0]
 8001752:	68f9      	ldr	r1, [r7, #12]
 8001754:	23dc      	movs	r3, #220	; 0xdc
 8001756:	005b      	lsls	r3, r3, #1
 8001758:	0112      	lsls	r2, r2, #4
 800175a:	188a      	adds	r2, r1, r2
 800175c:	18d3      	adds	r3, r2, r3
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	0c1b      	lsrs	r3, r3, #16
 8001762:	b2da      	uxtb	r2, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	735a      	strb	r2, [r3, #13]
  RxMessage->Data[3] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 24);
 8001768:	230b      	movs	r3, #11
 800176a:	18fb      	adds	r3, r7, r3
 800176c:	781a      	ldrb	r2, [r3, #0]
 800176e:	68f9      	ldr	r1, [r7, #12]
 8001770:	23dc      	movs	r3, #220	; 0xdc
 8001772:	005b      	lsls	r3, r3, #1
 8001774:	0112      	lsls	r2, r2, #4
 8001776:	188a      	adds	r2, r1, r2
 8001778:	18d3      	adds	r3, r2, r3
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	0e1b      	lsrs	r3, r3, #24
 800177e:	b2da      	uxtb	r2, r3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	739a      	strb	r2, [r3, #14]
  RxMessage->Data[4] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDHR;
 8001784:	230b      	movs	r3, #11
 8001786:	18fb      	adds	r3, r7, r3
 8001788:	781a      	ldrb	r2, [r3, #0]
 800178a:	68f9      	ldr	r1, [r7, #12]
 800178c:	23de      	movs	r3, #222	; 0xde
 800178e:	005b      	lsls	r3, r3, #1
 8001790:	0112      	lsls	r2, r2, #4
 8001792:	188a      	adds	r2, r1, r2
 8001794:	18d3      	adds	r3, r2, r3
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	b2da      	uxtb	r2, r3
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	73da      	strb	r2, [r3, #15]
  RxMessage->Data[5] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 8);
 800179e:	230b      	movs	r3, #11
 80017a0:	18fb      	adds	r3, r7, r3
 80017a2:	781a      	ldrb	r2, [r3, #0]
 80017a4:	68f9      	ldr	r1, [r7, #12]
 80017a6:	23de      	movs	r3, #222	; 0xde
 80017a8:	005b      	lsls	r3, r3, #1
 80017aa:	0112      	lsls	r2, r2, #4
 80017ac:	188a      	adds	r2, r1, r2
 80017ae:	18d3      	adds	r3, r2, r3
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	0a1b      	lsrs	r3, r3, #8
 80017b4:	b2da      	uxtb	r2, r3
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	741a      	strb	r2, [r3, #16]
  RxMessage->Data[6] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 16);
 80017ba:	230b      	movs	r3, #11
 80017bc:	18fb      	adds	r3, r7, r3
 80017be:	781a      	ldrb	r2, [r3, #0]
 80017c0:	68f9      	ldr	r1, [r7, #12]
 80017c2:	23de      	movs	r3, #222	; 0xde
 80017c4:	005b      	lsls	r3, r3, #1
 80017c6:	0112      	lsls	r2, r2, #4
 80017c8:	188a      	adds	r2, r1, r2
 80017ca:	18d3      	adds	r3, r2, r3
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	0c1b      	lsrs	r3, r3, #16
 80017d0:	b2da      	uxtb	r2, r3
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	745a      	strb	r2, [r3, #17]
  RxMessage->Data[7] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 24);
 80017d6:	230b      	movs	r3, #11
 80017d8:	18fb      	adds	r3, r7, r3
 80017da:	781a      	ldrb	r2, [r3, #0]
 80017dc:	68f9      	ldr	r1, [r7, #12]
 80017de:	23de      	movs	r3, #222	; 0xde
 80017e0:	005b      	lsls	r3, r3, #1
 80017e2:	0112      	lsls	r2, r2, #4
 80017e4:	188a      	adds	r2, r1, r2
 80017e6:	18d3      	adds	r3, r2, r3
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	0e1b      	lsrs	r3, r3, #24
 80017ec:	b2da      	uxtb	r2, r3
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	749a      	strb	r2, [r3, #18]
  /* Release the FIFO */
  /* Release FIFO0 */
  if (FIFONumber == CAN_FIFO0)
 80017f2:	230b      	movs	r3, #11
 80017f4:	18fb      	adds	r3, r7, r3
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d106      	bne.n	800180a <CAN_Receive+0x1ac>
  {
    CANx->RF0R |= CAN_RF0R_RFOM0;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	2220      	movs	r2, #32
 8001802:	431a      	orrs	r2, r3
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	60da      	str	r2, [r3, #12]
  /* Release FIFO1 */
  else /* FIFONumber == CAN_FIFO1 */
  {
    CANx->RF1R |= CAN_RF1R_RFOM1;
  }
}
 8001808:	e005      	b.n	8001816 <CAN_Receive+0x1b8>
    CANx->RF1R |= CAN_RF1R_RFOM1;
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	691b      	ldr	r3, [r3, #16]
 800180e:	2220      	movs	r2, #32
 8001810:	431a      	orrs	r2, r3
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	611a      	str	r2, [r3, #16]
}
 8001816:	46c0      	nop			; (mov r8, r8)
 8001818:	46bd      	mov	sp, r7
 800181a:	b004      	add	sp, #16
 800181c:	bd80      	pop	{r7, pc}

0800181e <CAN_ITConfig>:
  * @param  NewState: new state of the CAN interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void CAN_ITConfig(CAN_TypeDef* CANx, uint32_t CAN_IT, FunctionalState NewState)
{
 800181e:	b580      	push	{r7, lr}
 8001820:	b084      	sub	sp, #16
 8001822:	af00      	add	r7, sp, #0
 8001824:	60f8      	str	r0, [r7, #12]
 8001826:	60b9      	str	r1, [r7, #8]
 8001828:	1dfb      	adds	r3, r7, #7
 800182a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_IT(CAN_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800182c:	1dfb      	adds	r3, r7, #7
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d006      	beq.n	8001842 <CAN_ITConfig+0x24>
  {
    /* Enable the selected CANx interrupt */
    CANx->IER |= CAN_IT;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	695a      	ldr	r2, [r3, #20]
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	431a      	orrs	r2, r3
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	615a      	str	r2, [r3, #20]
  else
  {
    /* Disable the selected CANx interrupt */
    CANx->IER &= ~CAN_IT;
  }
}
 8001840:	e006      	b.n	8001850 <CAN_ITConfig+0x32>
    CANx->IER &= ~CAN_IT;
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	695b      	ldr	r3, [r3, #20]
 8001846:	68ba      	ldr	r2, [r7, #8]
 8001848:	43d2      	mvns	r2, r2
 800184a:	401a      	ands	r2, r3
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	615a      	str	r2, [r3, #20]
}
 8001850:	46c0      	nop			; (mov r8, r8)
 8001852:	46bd      	mov	sp, r7
 8001854:	b004      	add	sp, #16
 8001856:	bd80      	pop	{r7, pc}

08001858 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b086      	sub	sp, #24
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8001862:	2300      	movs	r3, #0
 8001864:	617b      	str	r3, [r7, #20]
 8001866:	2300      	movs	r3, #0
 8001868:	613b      	str	r3, [r7, #16]
 800186a:	2300      	movs	r3, #0
 800186c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800186e:	2300      	movs	r3, #0
 8001870:	617b      	str	r3, [r7, #20]
 8001872:	e07c      	b.n	800196e <GPIO_Init+0x116>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8001874:	2201      	movs	r2, #1
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	409a      	lsls	r2, r3
 800187a:	0013      	movs	r3, r2
 800187c:	613b      	str	r3, [r7, #16]

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	693a      	ldr	r2, [r7, #16]
 8001884:	4013      	ands	r3, r2
 8001886:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8001888:	68fa      	ldr	r2, [r7, #12]
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	429a      	cmp	r2, r3
 800188e:	d16b      	bne.n	8001968 <GPIO_Init+0x110>
    {
      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	791b      	ldrb	r3, [r3, #4]
 8001894:	2b01      	cmp	r3, #1
 8001896:	d003      	beq.n	80018a0 <GPIO_Init+0x48>
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	791b      	ldrb	r3, [r3, #4]
 800189c:	2b02      	cmp	r3, #2
 800189e:	d134      	bne.n	800190a <GPIO_Init+0xb2>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	697a      	ldr	r2, [r7, #20]
 80018a6:	0052      	lsls	r2, r2, #1
 80018a8:	2103      	movs	r1, #3
 80018aa:	4091      	lsls	r1, r2
 80018ac:	000a      	movs	r2, r1
 80018ae:	43d2      	mvns	r2, r2
 80018b0:	401a      	ands	r2, r3
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	689a      	ldr	r2, [r3, #8]
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	795b      	ldrb	r3, [r3, #5]
 80018be:	0019      	movs	r1, r3
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	005b      	lsls	r3, r3, #1
 80018c4:	4099      	lsls	r1, r3
 80018c6:	000b      	movs	r3, r1
 80018c8:	431a      	orrs	r2, r3
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos));
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	889b      	ldrh	r3, [r3, #4]
 80018d2:	b29b      	uxth	r3, r3
 80018d4:	697a      	ldr	r2, [r7, #20]
 80018d6:	b292      	uxth	r2, r2
 80018d8:	0011      	movs	r1, r2
 80018da:	2201      	movs	r2, #1
 80018dc:	408a      	lsls	r2, r1
 80018de:	b292      	uxth	r2, r2
 80018e0:	43d2      	mvns	r2, r2
 80018e2:	b292      	uxth	r2, r2
 80018e4:	4013      	ands	r3, r2
 80018e6:	b29a      	uxth	r2, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	809a      	strh	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	889b      	ldrh	r3, [r3, #4]
 80018f0:	b29a      	uxth	r2, r3
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	799b      	ldrb	r3, [r3, #6]
 80018f6:	0019      	movs	r1, r3
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	b29b      	uxth	r3, r3
 80018fc:	4099      	lsls	r1, r3
 80018fe:	000b      	movs	r3, r1
 8001900:	b29b      	uxth	r3, r3
 8001902:	4313      	orrs	r3, r2
 8001904:	b29a      	uxth	r2, r3
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	809a      	strh	r2, [r3, #4]
      }

      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	697a      	ldr	r2, [r7, #20]
 8001910:	0052      	lsls	r2, r2, #1
 8001912:	2103      	movs	r1, #3
 8001914:	4091      	lsls	r1, r2
 8001916:	000a      	movs	r2, r1
 8001918:	43d2      	mvns	r2, r2
 800191a:	401a      	ands	r2, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	601a      	str	r2, [r3, #0]

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	791b      	ldrb	r3, [r3, #4]
 8001928:	0019      	movs	r1, r3
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	005b      	lsls	r3, r3, #1
 800192e:	4099      	lsls	r1, r3
 8001930:	000b      	movs	r3, r1
 8001932:	431a      	orrs	r2, r3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	601a      	str	r2, [r3, #0]

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	68db      	ldr	r3, [r3, #12]
 800193c:	697a      	ldr	r2, [r7, #20]
 800193e:	b292      	uxth	r2, r2
 8001940:	0052      	lsls	r2, r2, #1
 8001942:	2103      	movs	r1, #3
 8001944:	4091      	lsls	r1, r2
 8001946:	000a      	movs	r2, r1
 8001948:	43d2      	mvns	r2, r2
 800194a:	401a      	ands	r2, r3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	68da      	ldr	r2, [r3, #12]
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	79db      	ldrb	r3, [r3, #7]
 8001958:	0019      	movs	r1, r3
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	005b      	lsls	r3, r3, #1
 800195e:	4099      	lsls	r1, r3
 8001960:	000b      	movs	r3, r1
 8001962:	431a      	orrs	r2, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	3301      	adds	r3, #1
 800196c:	617b      	str	r3, [r7, #20]
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	2b0f      	cmp	r3, #15
 8001972:	d800      	bhi.n	8001976 <GPIO_Init+0x11e>
 8001974:	e77e      	b.n	8001874 <GPIO_Init+0x1c>
    }
  }
}
 8001976:	46c0      	nop			; (mov r8, r8)
 8001978:	46bd      	mov	sp, r7
 800197a:	b006      	add	sp, #24
 800197c:	bd80      	pop	{r7, pc}
	...

08001980 <GPIO_StructInit>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	4a09      	ldr	r2, [pc, #36]	; (80019b0 <GPIO_StructInit+0x30>)
 800198c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2200      	movs	r2, #0
 8001992:	711a      	strb	r2, [r3, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_Level_2;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2201      	movs	r2, #1
 8001998:	715a      	strb	r2, [r3, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2200      	movs	r2, #0
 800199e:	719a      	strb	r2, [r3, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2200      	movs	r2, #0
 80019a4:	71da      	strb	r2, [r3, #7]
}
 80019a6:	46c0      	nop			; (mov r8, r8)
 80019a8:	46bd      	mov	sp, r7
 80019aa:	b002      	add	sp, #8
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	46c0      	nop			; (mov r8, r8)
 80019b0:	0000ffff 	.word	0x0000ffff

080019b4 <GPIO_SetBits>:
  *         For STM32F072: (0..15) for GPIOA, GPIOB, GPIOC, GPIOD, GPIOE, (0..10) for GPIOF.
  *         For STM32F031: (0..15) for GPIOA, GPIOB, (13..15) for GPIOC and (0..1, 6..7) for GPIOF. 
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	000a      	movs	r2, r1
 80019be:	1cbb      	adds	r3, r7, #2
 80019c0:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRR = GPIO_Pin;
 80019c2:	1cbb      	adds	r3, r7, #2
 80019c4:	881a      	ldrh	r2, [r3, #0]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	619a      	str	r2, [r3, #24]
}
 80019ca:	46c0      	nop			; (mov r8, r8)
 80019cc:	46bd      	mov	sp, r7
 80019ce:	b002      	add	sp, #8
 80019d0:	bd80      	pop	{r7, pc}

080019d2 <GPIO_ResetBits>:
  *         For STM32F072: (0..15) for GPIOA, GPIOB, GPIOC, GPIOD, GPIOE, (0..10) for GPIOF.
  *         For STM32F031: (0..15) for GPIOA, GPIOB, (13..15) for GPIOC and (0..1, 6..7) for GPIOF. 
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80019d2:	b580      	push	{r7, lr}
 80019d4:	b082      	sub	sp, #8
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	6078      	str	r0, [r7, #4]
 80019da:	000a      	movs	r2, r1
 80019dc:	1cbb      	adds	r3, r7, #2
 80019de:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BRR = GPIO_Pin;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	1cba      	adds	r2, r7, #2
 80019e4:	8812      	ldrh	r2, [r2, #0]
 80019e6:	851a      	strh	r2, [r3, #40]	; 0x28
}
 80019e8:	46c0      	nop			; (mov r8, r8)
 80019ea:	46bd      	mov	sp, r7
 80019ec:	b002      	add	sp, #8
 80019ee:	bd80      	pop	{r7, pc}

080019f0 <GPIO_PinAFConfig>:
  *         for the detailed mapping of the system and peripherals'alternate 
  *         function I/O pins.
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b084      	sub	sp, #16
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	0008      	movs	r0, r1
 80019fa:	0011      	movs	r1, r2
 80019fc:	1cbb      	adds	r3, r7, #2
 80019fe:	1c02      	adds	r2, r0, #0
 8001a00:	801a      	strh	r2, [r3, #0]
 8001a02:	1c7b      	adds	r3, r7, #1
 8001a04:	1c0a      	adds	r2, r1, #0
 8001a06:	701a      	strb	r2, [r3, #0]
  uint32_t temp = 0x00;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));

  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 8001a10:	1c7b      	adds	r3, r7, #1
 8001a12:	781a      	ldrb	r2, [r3, #0]
 8001a14:	1cbb      	adds	r3, r7, #2
 8001a16:	881b      	ldrh	r3, [r3, #0]
 8001a18:	2107      	movs	r1, #7
 8001a1a:	400b      	ands	r3, r1
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	409a      	lsls	r2, r3
 8001a20:	0013      	movs	r3, r2
 8001a22:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 8001a24:	1cbb      	adds	r3, r7, #2
 8001a26:	881b      	ldrh	r3, [r3, #0]
 8001a28:	08db      	lsrs	r3, r3, #3
 8001a2a:	b29b      	uxth	r3, r3
 8001a2c:	0018      	movs	r0, r3
 8001a2e:	1cbb      	adds	r3, r7, #2
 8001a30:	881b      	ldrh	r3, [r3, #0]
 8001a32:	08db      	lsrs	r3, r3, #3
 8001a34:	b29b      	uxth	r3, r3
 8001a36:	001a      	movs	r2, r3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	3208      	adds	r2, #8
 8001a3c:	0092      	lsls	r2, r2, #2
 8001a3e:	58d3      	ldr	r3, [r2, r3]
 8001a40:	1cba      	adds	r2, r7, #2
 8001a42:	8812      	ldrh	r2, [r2, #0]
 8001a44:	2107      	movs	r1, #7
 8001a46:	400a      	ands	r2, r1
 8001a48:	0092      	lsls	r2, r2, #2
 8001a4a:	210f      	movs	r1, #15
 8001a4c:	4091      	lsls	r1, r2
 8001a4e:	000a      	movs	r2, r1
 8001a50:	43d2      	mvns	r2, r2
 8001a52:	401a      	ands	r2, r3
 8001a54:	0011      	movs	r1, r2
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	0002      	movs	r2, r0
 8001a5a:	3208      	adds	r2, #8
 8001a5c:	0092      	lsls	r2, r2, #2
 8001a5e:	50d1      	str	r1, [r2, r3]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8001a60:	1cbb      	adds	r3, r7, #2
 8001a62:	881b      	ldrh	r3, [r3, #0]
 8001a64:	08db      	lsrs	r3, r3, #3
 8001a66:	b29b      	uxth	r3, r3
 8001a68:	001a      	movs	r2, r3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	3208      	adds	r2, #8
 8001a6e:	0092      	lsls	r2, r2, #2
 8001a70:	58d2      	ldr	r2, [r2, r3]
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	4313      	orrs	r3, r2
 8001a76:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8001a78:	1cbb      	adds	r3, r7, #2
 8001a7a:	881b      	ldrh	r3, [r3, #0]
 8001a7c:	08db      	lsrs	r3, r3, #3
 8001a7e:	b29b      	uxth	r3, r3
 8001a80:	001a      	movs	r2, r3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	3208      	adds	r2, #8
 8001a86:	0092      	lsls	r2, r2, #2
 8001a88:	68b9      	ldr	r1, [r7, #8]
 8001a8a:	50d1      	str	r1, [r2, r3]
}
 8001a8c:	46c0      	nop			; (mov r8, r8)
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	b004      	add	sp, #16
 8001a92:	bd80      	pop	{r7, pc}

08001a94 <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that
  *         contains the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_I2C_OWN_ADDRESS1(I2C_InitStruct->I2C_OwnAddress1));
  assert_param(IS_I2C_ACK(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

  /* Disable I2Cx Peripheral */
  I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_CR1_PE);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	4393      	bics	r3, r2
 8001aaa:	001a      	movs	r2, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx FILTERS Configuration ------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	60fb      	str	r3, [r7, #12]
  /* Clear I2Cx CR1 register */
  tmpreg &= CR1_CLEAR_MASK;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	4a27      	ldr	r2, [pc, #156]	; (8001b58 <I2C_Init+0xc4>)
 8001aba:	4013      	ands	r3, r2
 8001abc:	60fb      	str	r3, [r7, #12]
  /* Configure I2Cx: analog and digital filter */
  /* Set ANFOFF bit according to I2C_AnalogFilter value */
  /* Set DFN bits according to I2C_DigitalFilter value */
  tmpreg |= (uint32_t)I2C_InitStruct->I2C_AnalogFilter |(I2C_InitStruct->I2C_DigitalFilter << 8);
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	685a      	ldr	r2, [r3, #4]
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	021b      	lsls	r3, r3, #8
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	68fa      	ldr	r2, [r7, #12]
 8001acc:	4313      	orrs	r3, r2
 8001ace:	60fb      	str	r3, [r7, #12]

  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	68fa      	ldr	r2, [r7, #12]
 8001ad4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMING Configuration -------------------*/
  /* Configure I2Cx: Timing */
  /* Set TIMINGR bits according to I2C_Timing */
  /* Write to I2Cx TIMING */
  I2Cx->TIMINGR = I2C_InitStruct->I2C_Timing & TIMING_CLEAR_MASK;
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a20      	ldr	r2, [pc, #128]	; (8001b5c <I2C_Init+0xc8>)
 8001adc:	401a      	ands	r2, r3
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	611a      	str	r2, [r3, #16]

  /* Enable I2Cx Peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	431a      	orrs	r2, r3
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Clear tmpreg local variable */
  tmpreg = 0;
 8001aee:	2300      	movs	r3, #0
 8001af0:	60fb      	str	r3, [r7, #12]
  /* Clear OAR1 register */
  I2Cx->OAR1 = (uint32_t)tmpreg;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	68fa      	ldr	r2, [r7, #12]
 8001af6:	609a      	str	r2, [r3, #8]
  /* Clear OAR2 register */
  I2Cx->OAR2 = (uint32_t)tmpreg;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	68fa      	ldr	r2, [r7, #12]
 8001afc:	60da      	str	r2, [r3, #12]
  /* Configure I2Cx: Own Address1 and acknowledged address */
  /* Set OA1MODE bit according to I2C_AcknowledgedAddress value */
  /* Set OA1 bits according to I2C_OwnAddress1 value */
  tmpreg = (uint32_t)((uint32_t)I2C_InitStruct->I2C_AcknowledgedAddress | \
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	699a      	ldr	r2, [r3, #24]
                      (uint32_t)I2C_InitStruct->I2C_OwnAddress1);
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	691b      	ldr	r3, [r3, #16]
  tmpreg = (uint32_t)((uint32_t)I2C_InitStruct->I2C_AcknowledgedAddress | \
 8001b06:	4313      	orrs	r3, r2
 8001b08:	60fb      	str	r3, [r7, #12]
  /* Write to I2Cx OAR1 */
  I2Cx->OAR1 = tmpreg;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	68fa      	ldr	r2, [r7, #12]
 8001b0e:	609a      	str	r2, [r3, #8]
  /* Enable Own Address1 acknowledgement */
  I2Cx->OAR1 |= I2C_OAR1_OA1EN;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	2280      	movs	r2, #128	; 0x80
 8001b16:	0212      	lsls	r2, r2, #8
 8001b18:	431a      	orrs	r2, r3
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	609a      	str	r2, [r3, #8]

  /*---------------------------- I2Cx MODE Configuration ---------------------*/
  /* Configure I2Cx: mode */
  /* Set SMBDEN and SMBHEN bits according to I2C_Mode value */
  tmpreg = I2C_InitStruct->I2C_Mode;
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	68db      	ldr	r3, [r3, #12]
 8001b22:	60fb      	str	r3, [r7, #12]
  /* Write to I2Cx CR1 */
  I2Cx->CR1 |= tmpreg;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	431a      	orrs	r2, r3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx ACK Configuration ----------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	60fb      	str	r3, [r7, #12]
  /* Clear I2Cx CR2 register */
  tmpreg &= CR2_CLEAR_MASK;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	4a09      	ldr	r2, [pc, #36]	; (8001b60 <I2C_Init+0xcc>)
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	60fb      	str	r3, [r7, #12]
  /* Configure I2Cx: acknowledgement */
  /* Set NACK bit according to I2C_Ack value */
  tmpreg |= I2C_InitStruct->I2C_Ack;
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	695b      	ldr	r3, [r3, #20]
 8001b42:	68fa      	ldr	r2, [r7, #12]
 8001b44:	4313      	orrs	r3, r2
 8001b46:	60fb      	str	r3, [r7, #12]
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	68fa      	ldr	r2, [r7, #12]
 8001b4c:	605a      	str	r2, [r3, #4]
}
 8001b4e:	46c0      	nop			; (mov r8, r8)
 8001b50:	46bd      	mov	sp, r7
 8001b52:	b004      	add	sp, #16
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	46c0      	nop			; (mov r8, r8)
 8001b58:	00cfe0ff 	.word	0x00cfe0ff
 8001b5c:	f0ffffff 	.word	0xf0ffffff
 8001b60:	07ff7fff 	.word	0x07ff7fff

08001b64 <I2C_Cmd>:
  * @param  NewState: new state of the I2Cx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	000a      	movs	r2, r1
 8001b6e:	1cfb      	adds	r3, r7, #3
 8001b70:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001b72:	1cfb      	adds	r3, r7, #3
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d006      	beq.n	8001b88 <I2C_Cmd+0x24>
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= I2C_CR1_PE;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	2201      	movs	r2, #1
 8001b80:	431a      	orrs	r2, r3
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_CR1_PE);
  }
}
 8001b86:	e006      	b.n	8001b96 <I2C_Cmd+0x32>
    I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_CR1_PE);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	4393      	bics	r3, r2
 8001b90:	001a      	movs	r2, r3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	601a      	str	r2, [r3, #0]
}
 8001b96:	46c0      	nop			; (mov r8, r8)
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	b002      	add	sp, #8
 8001b9c:	bd80      	pop	{r7, pc}
	...

08001ba0 <I2C_TransferHandling>:
  *            @arg I2C_Generate_Start_Read: Generate Restart for read request.
  *            @arg I2C_Generate_Start_Write: Generate Restart for write request.
  * @retval None
  */
void I2C_TransferHandling(I2C_TypeDef* I2Cx, uint16_t Address, uint8_t Number_Bytes, uint32_t ReloadEndMode, uint32_t StartStopMode)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b086      	sub	sp, #24
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	60f8      	str	r0, [r7, #12]
 8001ba8:	0008      	movs	r0, r1
 8001baa:	0011      	movs	r1, r2
 8001bac:	607b      	str	r3, [r7, #4]
 8001bae:	230a      	movs	r3, #10
 8001bb0:	18fb      	adds	r3, r7, r3
 8001bb2:	1c02      	adds	r2, r0, #0
 8001bb4:	801a      	strh	r2, [r3, #0]
 8001bb6:	2309      	movs	r3, #9
 8001bb8:	18fb      	adds	r3, r7, r3
 8001bba:	1c0a      	adds	r2, r1, #0
 8001bbc:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	617b      	str	r3, [r7, #20]
  assert_param(IS_I2C_SLAVE_ADDRESS(Address));  
  assert_param(IS_RELOAD_END_MODE(ReloadEndMode));
  assert_param(IS_START_STOP_MODE(StartStopMode));
    
  /* Get the CR2 register value */
  tmpreg = I2Cx->CR2;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	617b      	str	r3, [r7, #20]
  
  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	4a0f      	ldr	r2, [pc, #60]	; (8001c08 <I2C_TransferHandling+0x68>)
 8001bcc:	4013      	ands	r3, r2
 8001bce:	617b      	str	r3, [r7, #20]
  
  /* update tmpreg */
  tmpreg |= (uint32_t)(((uint32_t)Address & I2C_CR2_SADD) | (((uint32_t)Number_Bytes << 16 ) & I2C_CR2_NBYTES) | \
 8001bd0:	230a      	movs	r3, #10
 8001bd2:	18fb      	adds	r3, r7, r3
 8001bd4:	881b      	ldrh	r3, [r3, #0]
 8001bd6:	059b      	lsls	r3, r3, #22
 8001bd8:	0d9a      	lsrs	r2, r3, #22
 8001bda:	2309      	movs	r3, #9
 8001bdc:	18fb      	adds	r3, r7, r3
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	0419      	lsls	r1, r3, #16
 8001be2:	23ff      	movs	r3, #255	; 0xff
 8001be4:	041b      	lsls	r3, r3, #16
 8001be6:	400b      	ands	r3, r1
 8001be8:	431a      	orrs	r2, r3
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	431a      	orrs	r2, r3
 8001bee:	6a3b      	ldr	r3, [r7, #32]
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	697a      	ldr	r2, [r7, #20]
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	617b      	str	r3, [r7, #20]
            (uint32_t)ReloadEndMode | (uint32_t)StartStopMode);
  
  /* update CR2 register */
  I2Cx->CR2 = tmpreg;  
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	697a      	ldr	r2, [r7, #20]
 8001bfc:	605a      	str	r2, [r3, #4]
}
 8001bfe:	46c0      	nop			; (mov r8, r8)
 8001c00:	46bd      	mov	sp, r7
 8001c02:	b006      	add	sp, #24
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	46c0      	nop			; (mov r8, r8)
 8001c08:	fc009800 	.word	0xfc009800

08001c0c <I2C_SendData>:
  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
  * @param  Data: Byte to be transmitted..
  * @retval None
  */
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	000a      	movs	r2, r1
 8001c16:	1cfb      	adds	r3, r7, #3
 8001c18:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  
  /* Write in the DR register the data to be sent */
  I2Cx->TXDR = (uint8_t)Data;
 8001c1a:	1cfb      	adds	r3, r7, #3
 8001c1c:	781a      	ldrb	r2, [r3, #0]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001c22:	46c0      	nop			; (mov r8, r8)
 8001c24:	46bd      	mov	sp, r7
 8001c26:	b002      	add	sp, #8
 8001c28:	bd80      	pop	{r7, pc}

08001c2a <I2C_GetFlagStatus>:
  *            @arg I2C_FLAG_ALERT: SMBus Alert
  *            @arg I2C_FLAG_BUSY: Bus busy
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 8001c2a:	b580      	push	{r7, lr}
 8001c2c:	b084      	sub	sp, #16
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	6078      	str	r0, [r7, #4]
 8001c32:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8001c34:	2300      	movs	r3, #0
 8001c36:	60bb      	str	r3, [r7, #8]
  FlagStatus bitstatus = RESET;
 8001c38:	230f      	movs	r3, #15
 8001c3a:	18fb      	adds	r3, r7, r3
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));
  
  /* Get the ISR register value */
  tmpreg = I2Cx->ISR;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	699b      	ldr	r3, [r3, #24]
 8001c44:	60bb      	str	r3, [r7, #8]
  
  /* Get flag status */
  tmpreg &= I2C_FLAG;
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	683a      	ldr	r2, [r7, #0]
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	60bb      	str	r3, [r7, #8]
  
  if(tmpreg != 0)
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d004      	beq.n	8001c5e <I2C_GetFlagStatus+0x34>
  {
    /* I2C_FLAG is set */
    bitstatus = SET;
 8001c54:	230f      	movs	r3, #15
 8001c56:	18fb      	adds	r3, r7, r3
 8001c58:	2201      	movs	r2, #1
 8001c5a:	701a      	strb	r2, [r3, #0]
 8001c5c:	e003      	b.n	8001c66 <I2C_GetFlagStatus+0x3c>
  }
  else
  {
    /* I2C_FLAG is reset */
    bitstatus = RESET;
 8001c5e:	230f      	movs	r3, #15
 8001c60:	18fb      	adds	r3, r7, r3
 8001c62:	2200      	movs	r2, #0
 8001c64:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001c66:	230f      	movs	r3, #15
 8001c68:	18fb      	adds	r3, r7, r3
 8001c6a:	781b      	ldrb	r3, [r3, #0]
} 
 8001c6c:	0018      	movs	r0, r3
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	b004      	add	sp, #16
 8001c72:	bd80      	pop	{r7, pc}

08001c74 <I2C_ClearFlag>:
  *            @arg I2C_FLAG_TIMEOUT: Timeout or Tlow detection flag
  *            @arg I2C_FLAG_ALERT: SMBus Alert
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
void I2C_ClearFlag(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{ 
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_CLEAR_FLAG(I2C_FLAG));

  /* Clear the selected flag */
  I2Cx->ICR = I2C_FLAG;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	683a      	ldr	r2, [r7, #0]
 8001c82:	61da      	str	r2, [r3, #28]
  }
 8001c84:	46c0      	nop			; (mov r8, r8)
 8001c86:	46bd      	mov	sp, r7
 8001c88:	b002      	add	sp, #8
 8001c8a:	bd80      	pop	{r7, pc}

08001c8c <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00;
 8001c94:	2300      	movs	r3, #0
 8001c96:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPriority));  
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	789b      	ldrb	r3, [r3, #2]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d039      	beq.n	8001d14 <NVIC_Init+0x88>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel >> 0x02];
 8001ca0:	4a24      	ldr	r2, [pc, #144]	; (8001d34 <NVIC_Init+0xa8>)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	089b      	lsrs	r3, r3, #2
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	33c0      	adds	r3, #192	; 0xc0
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	589b      	ldr	r3, [r3, r2]
 8001cb0:	60fb      	str	r3, [r7, #12]
    tmppriority &= (uint32_t)(~(((uint32_t)0xFF) << ((NVIC_InitStruct->NVIC_IRQChannel & 0x03) * 8)));
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	001a      	movs	r2, r3
 8001cb8:	2303      	movs	r3, #3
 8001cba:	4013      	ands	r3, r2
 8001cbc:	00db      	lsls	r3, r3, #3
 8001cbe:	22ff      	movs	r2, #255	; 0xff
 8001cc0:	409a      	lsls	r2, r3
 8001cc2:	0013      	movs	r3, r2
 8001cc4:	43da      	mvns	r2, r3
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	4013      	ands	r3, r2
 8001cca:	60fb      	str	r3, [r7, #12]
    tmppriority |= (uint32_t)((((uint32_t)NVIC_InitStruct->NVIC_IRQChannelPriority << 6) & 0xFF) << ((NVIC_InitStruct->NVIC_IRQChannel & 0x03) * 8));    
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	785b      	ldrb	r3, [r3, #1]
 8001cd0:	019b      	lsls	r3, r3, #6
 8001cd2:	22ff      	movs	r2, #255	; 0xff
 8001cd4:	401a      	ands	r2, r3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	0019      	movs	r1, r3
 8001cdc:	2303      	movs	r3, #3
 8001cde:	400b      	ands	r3, r1
 8001ce0:	00db      	lsls	r3, r3, #3
 8001ce2:	409a      	lsls	r2, r3
 8001ce4:	0013      	movs	r3, r2
 8001ce6:	68fa      	ldr	r2, [r7, #12]
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	60fb      	str	r3, [r7, #12]
    
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel >> 0x02] = tmppriority;
 8001cec:	4911      	ldr	r1, [pc, #68]	; (8001d34 <NVIC_Init+0xa8>)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	089b      	lsrs	r3, r3, #2
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	33c0      	adds	r3, #192	; 0xc0
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	68fa      	ldr	r2, [r7, #12]
 8001cfc:	505a      	str	r2, [r3, r1]
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[0] = (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8001cfe:	4b0d      	ldr	r3, [pc, #52]	; (8001d34 <NVIC_Init+0xa8>)
 8001d00:	687a      	ldr	r2, [r7, #4]
 8001d02:	7812      	ldrb	r2, [r2, #0]
 8001d04:	0011      	movs	r1, r2
 8001d06:	221f      	movs	r2, #31
 8001d08:	400a      	ands	r2, r1
 8001d0a:	2101      	movs	r1, #1
 8001d0c:	4091      	lsls	r1, r2
 8001d0e:	000a      	movs	r2, r1
 8001d10:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[0] = (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8001d12:	e00a      	b.n	8001d2a <NVIC_Init+0x9e>
    NVIC->ICER[0] = (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8001d14:	4907      	ldr	r1, [pc, #28]	; (8001d34 <NVIC_Init+0xa8>)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	001a      	movs	r2, r3
 8001d1c:	231f      	movs	r3, #31
 8001d1e:	4013      	ands	r3, r2
 8001d20:	2201      	movs	r2, #1
 8001d22:	409a      	lsls	r2, r3
 8001d24:	0013      	movs	r3, r2
 8001d26:	2280      	movs	r2, #128	; 0x80
 8001d28:	508b      	str	r3, [r1, r2]
}
 8001d2a:	46c0      	nop			; (mov r8, r8)
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	b004      	add	sp, #16
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	46c0      	nop			; (mov r8, r8)
 8001d34:	e000e100 	.word	0xe000e100

08001d38 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	000a      	movs	r2, r1
 8001d42:	1cfb      	adds	r3, r7, #3
 8001d44:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001d46:	1cfb      	adds	r3, r7, #3
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d006      	beq.n	8001d5c <RCC_AHBPeriphClockCmd+0x24>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8001d4e:	4b09      	ldr	r3, [pc, #36]	; (8001d74 <RCC_AHBPeriphClockCmd+0x3c>)
 8001d50:	4a08      	ldr	r2, [pc, #32]	; (8001d74 <RCC_AHBPeriphClockCmd+0x3c>)
 8001d52:	6951      	ldr	r1, [r2, #20]
 8001d54:	687a      	ldr	r2, [r7, #4]
 8001d56:	430a      	orrs	r2, r1
 8001d58:	615a      	str	r2, [r3, #20]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 8001d5a:	e006      	b.n	8001d6a <RCC_AHBPeriphClockCmd+0x32>
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8001d5c:	4b05      	ldr	r3, [pc, #20]	; (8001d74 <RCC_AHBPeriphClockCmd+0x3c>)
 8001d5e:	4a05      	ldr	r2, [pc, #20]	; (8001d74 <RCC_AHBPeriphClockCmd+0x3c>)
 8001d60:	6952      	ldr	r2, [r2, #20]
 8001d62:	6879      	ldr	r1, [r7, #4]
 8001d64:	43c9      	mvns	r1, r1
 8001d66:	400a      	ands	r2, r1
 8001d68:	615a      	str	r2, [r3, #20]
}
 8001d6a:	46c0      	nop			; (mov r8, r8)
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	b002      	add	sp, #8
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	46c0      	nop			; (mov r8, r8)
 8001d74:	40021000 	.word	0x40021000

08001d78 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	000a      	movs	r2, r1
 8001d82:	1cfb      	adds	r3, r7, #3
 8001d84:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001d86:	1cfb      	adds	r3, r7, #3
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d006      	beq.n	8001d9c <RCC_APB1PeriphClockCmd+0x24>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8001d8e:	4b09      	ldr	r3, [pc, #36]	; (8001db4 <RCC_APB1PeriphClockCmd+0x3c>)
 8001d90:	4a08      	ldr	r2, [pc, #32]	; (8001db4 <RCC_APB1PeriphClockCmd+0x3c>)
 8001d92:	69d1      	ldr	r1, [r2, #28]
 8001d94:	687a      	ldr	r2, [r7, #4]
 8001d96:	430a      	orrs	r2, r1
 8001d98:	61da      	str	r2, [r3, #28]
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8001d9a:	e006      	b.n	8001daa <RCC_APB1PeriphClockCmd+0x32>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8001d9c:	4b05      	ldr	r3, [pc, #20]	; (8001db4 <RCC_APB1PeriphClockCmd+0x3c>)
 8001d9e:	4a05      	ldr	r2, [pc, #20]	; (8001db4 <RCC_APB1PeriphClockCmd+0x3c>)
 8001da0:	69d2      	ldr	r2, [r2, #28]
 8001da2:	6879      	ldr	r1, [r7, #4]
 8001da4:	43c9      	mvns	r1, r1
 8001da6:	400a      	ands	r2, r1
 8001da8:	61da      	str	r2, [r3, #28]
}
 8001daa:	46c0      	nop			; (mov r8, r8)
 8001dac:	46bd      	mov	sp, r7
 8001dae:	b002      	add	sp, #8
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	46c0      	nop			; (mov r8, r8)
 8001db4:	40021000 	.word	0x40021000

08001db8 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	000a      	movs	r2, r1
 8001dc2:	1cfb      	adds	r3, r7, #3
 8001dc4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001dc6:	1cfb      	adds	r3, r7, #3
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d006      	beq.n	8001ddc <RCC_APB1PeriphResetCmd+0x24>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8001dce:	4b09      	ldr	r3, [pc, #36]	; (8001df4 <RCC_APB1PeriphResetCmd+0x3c>)
 8001dd0:	4a08      	ldr	r2, [pc, #32]	; (8001df4 <RCC_APB1PeriphResetCmd+0x3c>)
 8001dd2:	6911      	ldr	r1, [r2, #16]
 8001dd4:	687a      	ldr	r2, [r7, #4]
 8001dd6:	430a      	orrs	r2, r1
 8001dd8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
  }
}
 8001dda:	e006      	b.n	8001dea <RCC_APB1PeriphResetCmd+0x32>
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8001ddc:	4b05      	ldr	r3, [pc, #20]	; (8001df4 <RCC_APB1PeriphResetCmd+0x3c>)
 8001dde:	4a05      	ldr	r2, [pc, #20]	; (8001df4 <RCC_APB1PeriphResetCmd+0x3c>)
 8001de0:	6912      	ldr	r2, [r2, #16]
 8001de2:	6879      	ldr	r1, [r7, #4]
 8001de4:	43c9      	mvns	r1, r1
 8001de6:	400a      	ands	r2, r1
 8001de8:	611a      	str	r2, [r3, #16]
}
 8001dea:	46c0      	nop			; (mov r8, r8)
 8001dec:	46bd      	mov	sp, r7
 8001dee:	b002      	add	sp, #8
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	46c0      	nop			; (mov r8, r8)
 8001df4:	40021000 	.word	0x40021000

08001df8 <USART_SendData>:
  * @note   USART2 is not available for STM32F031 devices.  
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	000a      	movs	r2, r1
 8001e02:	1cbb      	adds	r3, r7, #2
 8001e04:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->TDR = (Data & (uint16_t)0x01FF);
 8001e06:	1cbb      	adds	r3, r7, #2
 8001e08:	881b      	ldrh	r3, [r3, #0]
 8001e0a:	05db      	lsls	r3, r3, #23
 8001e0c:	0ddb      	lsrs	r3, r3, #23
 8001e0e:	b29a      	uxth	r2, r3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	851a      	strh	r2, [r3, #40]	; 0x28
}
 8001e14:	46c0      	nop			; (mov r8, r8)
 8001e16:	46bd      	mov	sp, r7
 8001e18:	b002      	add	sp, #8
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <USART_ReceiveData>:
  * @note   USART3 and USART4 are available only for STM32F072 devices.
  * @note   USART2 is not available for STM32F031 devices.   
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->RDR & (uint16_t)0x01FF);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001e28:	b29b      	uxth	r3, r3
 8001e2a:	05db      	lsls	r3, r3, #23
 8001e2c:	0ddb      	lsrs	r3, r3, #23
 8001e2e:	b29b      	uxth	r3, r3
}
 8001e30:	0018      	movs	r0, r3
 8001e32:	46bd      	mov	sp, r7
 8001e34:	b002      	add	sp, #8
 8001e36:	bd80      	pop	{r7, pc}

08001e38 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint32_t USART_IT, FunctionalState NewState)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b088      	sub	sp, #32
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	60f8      	str	r0, [r7, #12]
 8001e40:	60b9      	str	r1, [r7, #8]
 8001e42:	1dfb      	adds	r3, r7, #7
 8001e44:	701a      	strb	r2, [r3, #0]
  uint32_t usartreg = 0, itpos = 0, itmask = 0;
 8001e46:	2300      	movs	r3, #0
 8001e48:	61bb      	str	r3, [r7, #24]
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	617b      	str	r3, [r7, #20]
 8001e4e:	2300      	movs	r3, #0
 8001e50:	613b      	str	r3, [r7, #16]
  uint32_t usartxbase = 0;
 8001e52:	2300      	movs	r3, #0
 8001e54:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CONFIG_IT(USART_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  usartxbase = (uint32_t)USARTx;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	61fb      	str	r3, [r7, #28]
  
  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	b29b      	uxth	r3, r3
 8001e5e:	0a1b      	lsrs	r3, r3, #8
 8001e60:	b29b      	uxth	r3, r3
 8001e62:	61bb      	str	r3, [r7, #24]
  
  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	22ff      	movs	r2, #255	; 0xff
 8001e68:	4013      	ands	r3, r2
 8001e6a:	617b      	str	r3, [r7, #20]
  itmask = (((uint32_t)0x01) << itpos);
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	409a      	lsls	r2, r3
 8001e72:	0013      	movs	r3, r2
 8001e74:	613b      	str	r3, [r7, #16]
  
  if (usartreg == 0x02) /* The IT is in CR2 register */
 8001e76:	69bb      	ldr	r3, [r7, #24]
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d103      	bne.n	8001e84 <USART_ITConfig+0x4c>
  {
    usartxbase += 0x04;
 8001e7c:	69fb      	ldr	r3, [r7, #28]
 8001e7e:	3304      	adds	r3, #4
 8001e80:	61fb      	str	r3, [r7, #28]
 8001e82:	e005      	b.n	8001e90 <USART_ITConfig+0x58>
  }
  else if (usartreg == 0x03) /* The IT is in CR3 register */
 8001e84:	69bb      	ldr	r3, [r7, #24]
 8001e86:	2b03      	cmp	r3, #3
 8001e88:	d102      	bne.n	8001e90 <USART_ITConfig+0x58>
  {
    usartxbase += 0x08;
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	3308      	adds	r3, #8
 8001e8e:	61fb      	str	r3, [r7, #28]
  }
  else /* The IT is in CR1 register */
  {
  }
  if (NewState != DISABLE)
 8001e90:	1dfb      	adds	r3, r7, #7
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d006      	beq.n	8001ea6 <USART_ITConfig+0x6e>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	69fa      	ldr	r2, [r7, #28]
 8001e9c:	6811      	ldr	r1, [r2, #0]
 8001e9e:	693a      	ldr	r2, [r7, #16]
 8001ea0:	430a      	orrs	r2, r1
 8001ea2:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8001ea4:	e006      	b.n	8001eb4 <USART_ITConfig+0x7c>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	69fa      	ldr	r2, [r7, #28]
 8001eaa:	6812      	ldr	r2, [r2, #0]
 8001eac:	6939      	ldr	r1, [r7, #16]
 8001eae:	43c9      	mvns	r1, r1
 8001eb0:	400a      	ands	r2, r1
 8001eb2:	601a      	str	r2, [r3, #0]
}
 8001eb4:	46c0      	nop			; (mov r8, r8)
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	b008      	add	sp, #32
 8001eba:	bd80      	pop	{r7, pc}

08001ebc <canInit>:
void CEC_CAN_IRQHandler(void);

int countCAN = 0;
char tmpStr[64] = "Send a message via UART\n\r";

void canInit(void) {
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b08a      	sub	sp, #40	; 0x28
 8001ec0:	af00      	add	r7, sp, #0
    CAN_InitTypeDef CAN_InitStructure;
    CAN_FilterInitTypeDef CAN_FilterInitStructure;
    NVIC_InitTypeDef NVIC_InitStructure;

    /* Enable GPIO clock */
    RCC_AHBPeriphClockCmd(CAN_GPIO_CLK, ENABLE);
 8001ec2:	2380      	movs	r3, #128	; 0x80
 8001ec4:	02db      	lsls	r3, r3, #11
 8001ec6:	2101      	movs	r1, #1
 8001ec8:	0018      	movs	r0, r3
 8001eca:	f7ff ff35 	bl	8001d38 <RCC_AHBPeriphClockCmd>

    // Connect CAN pins to AF
    GPIO_PinAFConfig(CAN_GPIO_PORT, CAN_RX_SOURCE, CAN_AF_PORT);
 8001ece:	4b50      	ldr	r3, [pc, #320]	; (8002010 <canInit+0x154>)
 8001ed0:	2204      	movs	r2, #4
 8001ed2:	2108      	movs	r1, #8
 8001ed4:	0018      	movs	r0, r3
 8001ed6:	f7ff fd8b 	bl	80019f0 <GPIO_PinAFConfig>
    GPIO_PinAFConfig(CAN_GPIO_PORT, CAN_TX_SOURCE, CAN_AF_PORT);
 8001eda:	4b4d      	ldr	r3, [pc, #308]	; (8002010 <canInit+0x154>)
 8001edc:	2204      	movs	r2, #4
 8001ede:	2109      	movs	r1, #9
 8001ee0:	0018      	movs	r0, r3
 8001ee2:	f7ff fd85 	bl	80019f0 <GPIO_PinAFConfig>

    // Configure CAN RX and TX pins
    GPIO_InitStructure.GPIO_Pin = CAN_RX_PIN | CAN_TX_PIN;
 8001ee6:	2320      	movs	r3, #32
 8001ee8:	18fb      	adds	r3, r7, r3
 8001eea:	22c0      	movs	r2, #192	; 0xc0
 8001eec:	0092      	lsls	r2, r2, #2
 8001eee:	601a      	str	r2, [r3, #0]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8001ef0:	2320      	movs	r3, #32
 8001ef2:	18fb      	adds	r3, r7, r3
 8001ef4:	2202      	movs	r2, #2
 8001ef6:	711a      	strb	r2, [r3, #4]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8001ef8:	2320      	movs	r3, #32
 8001efa:	18fb      	adds	r3, r7, r3
 8001efc:	2203      	movs	r2, #3
 8001efe:	715a      	strb	r2, [r3, #5]
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8001f00:	2320      	movs	r3, #32
 8001f02:	18fb      	adds	r3, r7, r3
 8001f04:	2200      	movs	r2, #0
 8001f06:	719a      	strb	r2, [r3, #6]
    GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
 8001f08:	2320      	movs	r3, #32
 8001f0a:	18fb      	adds	r3, r7, r3
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	71da      	strb	r2, [r3, #7]
    GPIO_Init(CAN_GPIO_PORT, &GPIO_InitStructure);
 8001f10:	2320      	movs	r3, #32
 8001f12:	18fb      	adds	r3, r7, r3
 8001f14:	4a3e      	ldr	r2, [pc, #248]	; (8002010 <canInit+0x154>)
 8001f16:	0019      	movs	r1, r3
 8001f18:	0010      	movs	r0, r2
 8001f1a:	f7ff fc9d 	bl	8001858 <GPIO_Init>

    /* CAN Periph clock enable */
    RCC_APB1PeriphClockCmd(CAN_CLK, ENABLE);
 8001f1e:	2380      	movs	r3, #128	; 0x80
 8001f20:	049b      	lsls	r3, r3, #18
 8001f22:	2101      	movs	r1, #1
 8001f24:	0018      	movs	r0, r3
 8001f26:	f7ff ff27 	bl	8001d78 <RCC_APB1PeriphClockCmd>

    // CAN register init
    CAN_DeInit(CAN_CAN);
 8001f2a:	4b3a      	ldr	r3, [pc, #232]	; (8002014 <canInit+0x158>)
 8001f2c:	0018      	movs	r0, r3
 8001f2e:	f7ff f9a7 	bl	8001280 <CAN_DeInit>
    CAN_StructInit(&CAN_InitStructure);
 8001f32:	2314      	movs	r3, #20
 8001f34:	18fb      	adds	r3, r7, r3
 8001f36:	0018      	movs	r0, r3
 8001f38:	f7ff fb68 	bl	800160c <CAN_StructInit>

    // CAN cell init
    CAN_InitStructure.CAN_TTCM = DISABLE;
 8001f3c:	2314      	movs	r3, #20
 8001f3e:	18fb      	adds	r3, r7, r3
 8001f40:	2200      	movs	r2, #0
 8001f42:	719a      	strb	r2, [r3, #6]
    CAN_InitStructure.CAN_ABOM = DISABLE;
 8001f44:	2314      	movs	r3, #20
 8001f46:	18fb      	adds	r3, r7, r3
 8001f48:	2200      	movs	r2, #0
 8001f4a:	71da      	strb	r2, [r3, #7]
    CAN_InitStructure.CAN_AWUM = DISABLE;
 8001f4c:	2314      	movs	r3, #20
 8001f4e:	18fb      	adds	r3, r7, r3
 8001f50:	2200      	movs	r2, #0
 8001f52:	721a      	strb	r2, [r3, #8]
    CAN_InitStructure.CAN_NART = DISABLE;
 8001f54:	2314      	movs	r3, #20
 8001f56:	18fb      	adds	r3, r7, r3
 8001f58:	2200      	movs	r2, #0
 8001f5a:	725a      	strb	r2, [r3, #9]
    CAN_InitStructure.CAN_RFLM = DISABLE;
 8001f5c:	2314      	movs	r3, #20
 8001f5e:	18fb      	adds	r3, r7, r3
 8001f60:	2200      	movs	r2, #0
 8001f62:	729a      	strb	r2, [r3, #10]
    CAN_InitStructure.CAN_TXFP = DISABLE;
 8001f64:	2314      	movs	r3, #20
 8001f66:	18fb      	adds	r3, r7, r3
 8001f68:	2200      	movs	r2, #0
 8001f6a:	72da      	strb	r2, [r3, #11]
    CAN_InitStructure.CAN_Mode = CAN_Mode_Normal;
 8001f6c:	2314      	movs	r3, #20
 8001f6e:	18fb      	adds	r3, r7, r3
 8001f70:	2200      	movs	r2, #0
 8001f72:	709a      	strb	r2, [r3, #2]
    CAN_InitStructure.CAN_SJW = CAN_SJW_1tq;
 8001f74:	2314      	movs	r3, #20
 8001f76:	18fb      	adds	r3, r7, r3
 8001f78:	2200      	movs	r2, #0
 8001f7a:	70da      	strb	r2, [r3, #3]

    /* CAN Baudrate = 1MBps (CAN clocked at 48 MHz)
     * 48MHz / 3 = 16tq; 16tq = 8tq + 7tq (r1) Sample Point at ca. 50%
     * refer to:  http://www.bittiming.can-wiki.info
     */
    CAN_InitStructure.CAN_BS1 = CAN_BS1_8tq;
 8001f7c:	2314      	movs	r3, #20
 8001f7e:	18fb      	adds	r3, r7, r3
 8001f80:	2207      	movs	r2, #7
 8001f82:	711a      	strb	r2, [r3, #4]
    CAN_InitStructure.CAN_BS2 = CAN_BS2_7tq;
 8001f84:	2314      	movs	r3, #20
 8001f86:	18fb      	adds	r3, r7, r3
 8001f88:	2206      	movs	r2, #6
 8001f8a:	715a      	strb	r2, [r3, #5]
    CAN_InitStructure.CAN_Prescaler = 3;
 8001f8c:	2314      	movs	r3, #20
 8001f8e:	18fb      	adds	r3, r7, r3
 8001f90:	2203      	movs	r2, #3
 8001f92:	801a      	strh	r2, [r3, #0]
    CAN_Init(CAN_CAN, &CAN_InitStructure);
 8001f94:	2314      	movs	r3, #20
 8001f96:	18fb      	adds	r3, r7, r3
 8001f98:	4a1e      	ldr	r2, [pc, #120]	; (8002014 <canInit+0x158>)
 8001f9a:	0019      	movs	r1, r3
 8001f9c:	0010      	movs	r0, r2
 8001f9e:	f7ff f983 	bl	80012a8 <CAN_Init>

    // all filters for CAN1
    // CAN_SlaveStartBank(27);

    // accept all to start with
    CAN_FilterInitStructure.CAN_FilterNumber = 0;
 8001fa2:	1d3b      	adds	r3, r7, #4
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	729a      	strb	r2, [r3, #10]
    CAN_FilterInitStructure.CAN_FilterMode = CAN_FilterMode_IdMask;
 8001fa8:	1d3b      	adds	r3, r7, #4
 8001faa:	2200      	movs	r2, #0
 8001fac:	72da      	strb	r2, [r3, #11]
    CAN_FilterInitStructure.CAN_FilterScale = CAN_FilterScale_32bit;
 8001fae:	1d3b      	adds	r3, r7, #4
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	731a      	strb	r2, [r3, #12]
    CAN_FilterInitStructure.CAN_FilterIdHigh = 0x0000;
 8001fb4:	1d3b      	adds	r3, r7, #4
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	801a      	strh	r2, [r3, #0]
    CAN_FilterInitStructure.CAN_FilterIdLow = 0x0000;
 8001fba:	1d3b      	adds	r3, r7, #4
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	805a      	strh	r2, [r3, #2]
    CAN_FilterInitStructure.CAN_FilterMaskIdHigh = 0x0000;
 8001fc0:	1d3b      	adds	r3, r7, #4
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	809a      	strh	r2, [r3, #4]
    CAN_FilterInitStructure.CAN_FilterMaskIdLow = 0x0000;
 8001fc6:	1d3b      	adds	r3, r7, #4
 8001fc8:	2200      	movs	r2, #0
 8001fca:	80da      	strh	r2, [r3, #6]
    CAN_FilterInitStructure.CAN_FilterFIFOAssignment = 0;
 8001fcc:	1d3b      	adds	r3, r7, #4
 8001fce:	2200      	movs	r2, #0
 8001fd0:	811a      	strh	r2, [r3, #8]
    CAN_FilterInitStructure.CAN_FilterActivation = ENABLE;
 8001fd2:	1d3b      	adds	r3, r7, #4
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	735a      	strb	r2, [r3, #13]
    CAN_FilterInit(&CAN_FilterInitStructure);
 8001fd8:	1d3b      	adds	r3, r7, #4
 8001fda:	0018      	movs	r0, r3
 8001fdc:	f7ff fa46 	bl	800146c <CAN_FilterInit>

    /* Enable CAN IRQ on message pending */
	NVIC_InitStructure.NVIC_IRQChannel = CEC_CAN_IRQn;
 8001fe0:	003b      	movs	r3, r7
 8001fe2:	221e      	movs	r2, #30
 8001fe4:	701a      	strb	r2, [r3, #0]
	NVIC_InitStructure.NVIC_IRQChannelPriority = 0;
 8001fe6:	003b      	movs	r3, r7
 8001fe8:	2200      	movs	r2, #0
 8001fea:	705a      	strb	r2, [r3, #1]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8001fec:	003b      	movs	r3, r7
 8001fee:	2201      	movs	r2, #1
 8001ff0:	709a      	strb	r2, [r3, #2]
	NVIC_Init(&NVIC_InitStructure);
 8001ff2:	003b      	movs	r3, r7
 8001ff4:	0018      	movs	r0, r3
 8001ff6:	f7ff fe49 	bl	8001c8c <NVIC_Init>

    CAN_ITConfig(CAN_CAN, CAN_IT_FMP0, ENABLE); // Enable CAN message pending Interrupt
 8001ffa:	4b06      	ldr	r3, [pc, #24]	; (8002014 <canInit+0x158>)
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	2102      	movs	r1, #2
 8002000:	0018      	movs	r0, r3
 8002002:	f7ff fc0c 	bl	800181e <CAN_ITConfig>
}
 8002006:	46c0      	nop			; (mov r8, r8)
 8002008:	46bd      	mov	sp, r7
 800200a:	b00a      	add	sp, #40	; 0x28
 800200c:	bd80      	pop	{r7, pc}
 800200e:	46c0      	nop			; (mov r8, r8)
 8002010:	48000400 	.word	0x48000400
 8002014:	40006400 	.word	0x40006400

08002018 <CEC_CAN_IRQHandler>:
//	}
//	USART_WriteString("\n\r");
}

void CEC_CAN_IRQHandler(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b088      	sub	sp, #32
 800201c:	af00      	add	r7, sp, #0
	CanRxMsg RxMessage;
	uint8_t i = 0;
 800201e:	231f      	movs	r3, #31
 8002020:	18fb      	adds	r3, r7, r3
 8002022:	2200      	movs	r2, #0
 8002024:	701a      	strb	r2, [r3, #0]

	RxMessage.StdId = 0x00;
 8002026:	2308      	movs	r3, #8
 8002028:	18fb      	adds	r3, r7, r3
 800202a:	2200      	movs	r2, #0
 800202c:	601a      	str	r2, [r3, #0]
	RxMessage.IDE = CAN_ID_STD;
 800202e:	2308      	movs	r3, #8
 8002030:	18fb      	adds	r3, r7, r3
 8002032:	2200      	movs	r2, #0
 8002034:	721a      	strb	r2, [r3, #8]
	RxMessage.DLC = 0;
 8002036:	2308      	movs	r3, #8
 8002038:	18fb      	adds	r3, r7, r3
 800203a:	2200      	movs	r2, #0
 800203c:	729a      	strb	r2, [r3, #10]
	RxMessage.Data[0] = 0x00;
 800203e:	2308      	movs	r3, #8
 8002040:	18fb      	adds	r3, r7, r3
 8002042:	2200      	movs	r2, #0
 8002044:	72da      	strb	r2, [r3, #11]
	RxMessage.Data[1] = 0x00;
 8002046:	2308      	movs	r3, #8
 8002048:	18fb      	adds	r3, r7, r3
 800204a:	2200      	movs	r2, #0
 800204c:	731a      	strb	r2, [r3, #12]
	RxMessage.Data[2] = 0x00;
 800204e:	2308      	movs	r3, #8
 8002050:	18fb      	adds	r3, r7, r3
 8002052:	2200      	movs	r2, #0
 8002054:	735a      	strb	r2, [r3, #13]
	RxMessage.Data[3] = 0x00;
 8002056:	2308      	movs	r3, #8
 8002058:	18fb      	adds	r3, r7, r3
 800205a:	2200      	movs	r2, #0
 800205c:	739a      	strb	r2, [r3, #14]
	RxMessage.Data[4] = 0x00;
 800205e:	2308      	movs	r3, #8
 8002060:	18fb      	adds	r3, r7, r3
 8002062:	2200      	movs	r2, #0
 8002064:	73da      	strb	r2, [r3, #15]
	RxMessage.Data[5] = 0x00;
 8002066:	2308      	movs	r3, #8
 8002068:	18fb      	adds	r3, r7, r3
 800206a:	2200      	movs	r2, #0
 800206c:	741a      	strb	r2, [r3, #16]
	RxMessage.Data[6] = 0x00;
 800206e:	2308      	movs	r3, #8
 8002070:	18fb      	adds	r3, r7, r3
 8002072:	2200      	movs	r2, #0
 8002074:	745a      	strb	r2, [r3, #17]
	RxMessage.Data[7] = 0x00;
 8002076:	2308      	movs	r3, #8
 8002078:	18fb      	adds	r3, r7, r3
 800207a:	2200      	movs	r2, #0
 800207c:	749a      	strb	r2, [r3, #18]
	CAN_Receive(CAN, CAN_FIFO0, &RxMessage);
 800207e:	2308      	movs	r3, #8
 8002080:	18fb      	adds	r3, r7, r3
 8002082:	4828      	ldr	r0, [pc, #160]	; (8002124 <CEC_CAN_IRQHandler+0x10c>)
 8002084:	001a      	movs	r2, r3
 8002086:	2100      	movs	r1, #0
 8002088:	f7ff fae9 	bl	800165e <CAN_Receive>

	// I2C send buffer
	uint8_t tx_values[8];

	switch (RxMessage.StdId)
 800208c:	2308      	movs	r3, #8
 800208e:	18fb      	adds	r3, r7, r3
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d002      	beq.n	800209c <CEC_CAN_IRQHandler+0x84>
 8002096:	2b01      	cmp	r3, #1
 8002098:	d03c      	beq.n	8002114 <CEC_CAN_IRQHandler+0xfc>
			}
			break;
		case 0x01:
			break;
		default:
			break;
 800209a:	e03e      	b.n	800211a <CEC_CAN_IRQHandler+0x102>
			switch (RxMessage.Data[1])
 800209c:	2308      	movs	r3, #8
 800209e:	18fb      	adds	r3, r7, r3
 80020a0:	7b1b      	ldrb	r3, [r3, #12]
 80020a2:	3b41      	subs	r3, #65	; 0x41
 80020a4:	2b33      	cmp	r3, #51	; 0x33
 80020a6:	d837      	bhi.n	8002118 <CEC_CAN_IRQHandler+0x100>
 80020a8:	009a      	lsls	r2, r3, #2
 80020aa:	4b1f      	ldr	r3, [pc, #124]	; (8002128 <CEC_CAN_IRQHandler+0x110>)
 80020ac:	18d3      	adds	r3, r2, r3
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	469f      	mov	pc, r3
					for (i=1; i<RxMessage.DLC; i++)
 80020b2:	231f      	movs	r3, #31
 80020b4:	18fb      	adds	r3, r7, r3
 80020b6:	2201      	movs	r2, #1
 80020b8:	701a      	strb	r2, [r3, #0]
 80020ba:	e013      	b.n	80020e4 <CEC_CAN_IRQHandler+0xcc>
						tx_values[i-1] = RxMessage.Data[i];
 80020bc:	231f      	movs	r3, #31
 80020be:	18fb      	adds	r3, r7, r3
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	3b01      	subs	r3, #1
 80020c4:	221f      	movs	r2, #31
 80020c6:	18ba      	adds	r2, r7, r2
 80020c8:	7812      	ldrb	r2, [r2, #0]
 80020ca:	2108      	movs	r1, #8
 80020cc:	1879      	adds	r1, r7, r1
 80020ce:	188a      	adds	r2, r1, r2
 80020d0:	7ad1      	ldrb	r1, [r2, #11]
 80020d2:	003a      	movs	r2, r7
 80020d4:	54d1      	strb	r1, [r2, r3]
					for (i=1; i<RxMessage.DLC; i++)
 80020d6:	231f      	movs	r3, #31
 80020d8:	18fb      	adds	r3, r7, r3
 80020da:	781a      	ldrb	r2, [r3, #0]
 80020dc:	231f      	movs	r3, #31
 80020de:	18fb      	adds	r3, r7, r3
 80020e0:	3201      	adds	r2, #1
 80020e2:	701a      	strb	r2, [r3, #0]
 80020e4:	2308      	movs	r3, #8
 80020e6:	18fb      	adds	r3, r7, r3
 80020e8:	7a9b      	ldrb	r3, [r3, #10]
 80020ea:	221f      	movs	r2, #31
 80020ec:	18ba      	adds	r2, r7, r2
 80020ee:	7812      	ldrb	r2, [r2, #0]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d3e3      	bcc.n	80020bc <CEC_CAN_IRQHandler+0xa4>
					I2C_WrReg(RxMessage.Data[0], 0x00, tx_values, RxMessage.DLC - 1);
 80020f4:	2308      	movs	r3, #8
 80020f6:	18fb      	adds	r3, r7, r3
 80020f8:	7ad8      	ldrb	r0, [r3, #11]
 80020fa:	2308      	movs	r3, #8
 80020fc:	18fb      	adds	r3, r7, r3
 80020fe:	7a9b      	ldrb	r3, [r3, #10]
 8002100:	b29b      	uxth	r3, r3
 8002102:	3b01      	subs	r3, #1
 8002104:	b29b      	uxth	r3, r3
 8002106:	003a      	movs	r2, r7
 8002108:	2100      	movs	r1, #0
 800210a:	f000 f82d 	bl	8002168 <I2C_WrReg>
					break;
 800210e:	e000      	b.n	8002112 <CEC_CAN_IRQHandler+0xfa>
					break;
 8002110:	46c0      	nop			; (mov r8, r8)
			break;
 8002112:	e001      	b.n	8002118 <CEC_CAN_IRQHandler+0x100>
			break;
 8002114:	46c0      	nop			; (mov r8, r8)
 8002116:	e000      	b.n	800211a <CEC_CAN_IRQHandler+0x102>
			break;
 8002118:	46c0      	nop			; (mov r8, r8)
	}
}
 800211a:	46c0      	nop			; (mov r8, r8)
 800211c:	46bd      	mov	sp, r7
 800211e:	b008      	add	sp, #32
 8002120:	bd80      	pop	{r7, pc}
 8002122:	46c0      	nop			; (mov r8, r8)
 8002124:	40006400 	.word	0x40006400
 8002128:	08002c90 	.word	0x08002c90

0800212c <chipReset>:
#include "rcc.h"
#include <stdio.h>

enum errorState errorState;

void chipReset() {
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0
	GPIO_SetBits(GPIOA, GPIO_Pin_1);
 8002130:	2390      	movs	r3, #144	; 0x90
 8002132:	05db      	lsls	r3, r3, #23
 8002134:	2102      	movs	r1, #2
 8002136:	0018      	movs	r0, r3
 8002138:	f7ff fc3c 	bl	80019b4 <GPIO_SetBits>
	DelayMil(1);
 800213c:	2001      	movs	r0, #1
 800213e:	f000 fb41 	bl	80027c4 <DelayMil>
	GPIO_ResetBits(GPIOA, GPIO_Pin_1);
 8002142:	2390      	movs	r3, #144	; 0x90
 8002144:	05db      	lsls	r3, r3, #23
 8002146:	2102      	movs	r1, #2
 8002148:	0018      	movs	r0, r3
 800214a:	f7ff fc42 	bl	80019d2 <GPIO_ResetBits>
	DelayMil(1);
 800214e:	2001      	movs	r0, #1
 8002150:	f000 fb38 	bl	80027c4 <DelayMil>
	GPIO_SetBits(GPIOA, GPIO_Pin_1);
 8002154:	2390      	movs	r3, #144	; 0x90
 8002156:	05db      	lsls	r3, r3, #23
 8002158:	2102      	movs	r1, #2
 800215a:	0018      	movs	r0, r3
 800215c:	f7ff fc2a 	bl	80019b4 <GPIO_SetBits>
}
 8002160:	46c0      	nop			; (mov r8, r8)
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
	...

08002168 <I2C_WrReg>:
uint8_t i2c_rd_byte(uint8_t Addr, uint8_t Reg) {
	I2C_RdReg(Addr, Reg, i2cData.rx_values, 1, 0);
	return i2cData.rx_values[0];
}

uint16_t I2C_WrReg(uint8_t Addr, uint8_t Reg, const uint8_t *Data, uint16_t DCnt) {
 8002168:	b590      	push	{r4, r7, lr}
 800216a:	b087      	sub	sp, #28
 800216c:	af02      	add	r7, sp, #8
 800216e:	0004      	movs	r4, r0
 8002170:	0008      	movs	r0, r1
 8002172:	603a      	str	r2, [r7, #0]
 8002174:	0019      	movs	r1, r3
 8002176:	1dfb      	adds	r3, r7, #7
 8002178:	1c22      	adds	r2, r4, #0
 800217a:	701a      	strb	r2, [r3, #0]
 800217c:	1dbb      	adds	r3, r7, #6
 800217e:	1c02      	adds	r2, r0, #0
 8002180:	701a      	strb	r2, [r3, #0]
 8002182:	1d3b      	adds	r3, r7, #4
 8002184:	1c0a      	adds	r2, r1, #0
 8002186:	801a      	strh	r2, [r3, #0]
	Addr = (Addr<<1);
 8002188:	1dfa      	adds	r2, r7, #7
 800218a:	1dfb      	adds	r3, r7, #7
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	18db      	adds	r3, r3, r3
 8002190:	7013      	strb	r3, [r2, #0]
	uint16_t Cnt = 0;
 8002192:	230e      	movs	r3, #14
 8002194:	18fb      	adds	r3, r7, r3
 8002196:	2200      	movs	r2, #0
 8002198:	801a      	strh	r2, [r3, #0]
	uint16_t i = 0;
 800219a:	230c      	movs	r3, #12
 800219c:	18fb      	adds	r3, r7, r3
 800219e:	2200      	movs	r2, #0
 80021a0:	801a      	strh	r2, [r3, #0]

	while(I2C_GetFlagStatus(EP9351_I2C, I2C_FLAG_BUSY) == SET);
 80021a2:	46c0      	nop			; (mov r8, r8)
 80021a4:	2380      	movs	r3, #128	; 0x80
 80021a6:	021b      	lsls	r3, r3, #8
 80021a8:	4a50      	ldr	r2, [pc, #320]	; (80022ec <I2C_WrReg+0x184>)
 80021aa:	0019      	movs	r1, r3
 80021ac:	0010      	movs	r0, r2
 80021ae:	f7ff fd3c 	bl	8001c2a <I2C_GetFlagStatus>
 80021b2:	0003      	movs	r3, r0
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d0f5      	beq.n	80021a4 <I2C_WrReg+0x3c>
	I2C_TransferHandling(EP9351_I2C, Addr, 1, I2C_Reload_Mode, I2C_Generate_Start_Write);
 80021b8:	1dfb      	adds	r3, r7, #7
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	b299      	uxth	r1, r3
 80021be:	2380      	movs	r3, #128	; 0x80
 80021c0:	045a      	lsls	r2, r3, #17
 80021c2:	484a      	ldr	r0, [pc, #296]	; (80022ec <I2C_WrReg+0x184>)
 80021c4:	2380      	movs	r3, #128	; 0x80
 80021c6:	019b      	lsls	r3, r3, #6
 80021c8:	9300      	str	r3, [sp, #0]
 80021ca:	0013      	movs	r3, r2
 80021cc:	2201      	movs	r2, #1
 80021ce:	f7ff fce7 	bl	8001ba0 <I2C_TransferHandling>
	while(I2C_GetFlagStatus(EP9351_I2C, I2C_FLAG_TXIS) == RESET) {
 80021d2:	e012      	b.n	80021fa <I2C_WrReg+0x92>
		i++;
 80021d4:	230c      	movs	r3, #12
 80021d6:	18fb      	adds	r3, r7, r3
 80021d8:	881a      	ldrh	r2, [r3, #0]
 80021da:	230c      	movs	r3, #12
 80021dc:	18fb      	adds	r3, r7, r3
 80021de:	3201      	adds	r2, #1
 80021e0:	801a      	strh	r2, [r3, #0]
		if(i == I2C_TIMEOUT) {
 80021e2:	230c      	movs	r3, #12
 80021e4:	18fb      	adds	r3, r7, r3
 80021e6:	881a      	ldrh	r2, [r3, #0]
 80021e8:	23fa      	movs	r3, #250	; 0xfa
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d104      	bne.n	80021fa <I2C_WrReg+0x92>
			return errorState = BAD_DEV_ADDR;
 80021f0:	4b3f      	ldr	r3, [pc, #252]	; (80022f0 <I2C_WrReg+0x188>)
 80021f2:	2204      	movs	r2, #4
 80021f4:	701a      	strb	r2, [r3, #0]
 80021f6:	2304      	movs	r3, #4
 80021f8:	e073      	b.n	80022e2 <I2C_WrReg+0x17a>
	while(I2C_GetFlagStatus(EP9351_I2C, I2C_FLAG_TXIS) == RESET) {
 80021fa:	4b3c      	ldr	r3, [pc, #240]	; (80022ec <I2C_WrReg+0x184>)
 80021fc:	2102      	movs	r1, #2
 80021fe:	0018      	movs	r0, r3
 8002200:	f7ff fd13 	bl	8001c2a <I2C_GetFlagStatus>
 8002204:	1e03      	subs	r3, r0, #0
 8002206:	d0e5      	beq.n	80021d4 <I2C_WrReg+0x6c>
		}
	}
	I2C_SendData(EP9351_I2C, Reg);
 8002208:	1dbb      	adds	r3, r7, #6
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	4a37      	ldr	r2, [pc, #220]	; (80022ec <I2C_WrReg+0x184>)
 800220e:	0019      	movs	r1, r3
 8002210:	0010      	movs	r0, r2
 8002212:	f7ff fcfb 	bl	8001c0c <I2C_SendData>
	while(I2C_GetFlagStatus(EP9351_I2C, I2C_FLAG_TCR) == RESET);
 8002216:	46c0      	nop			; (mov r8, r8)
 8002218:	4b34      	ldr	r3, [pc, #208]	; (80022ec <I2C_WrReg+0x184>)
 800221a:	2180      	movs	r1, #128	; 0x80
 800221c:	0018      	movs	r0, r3
 800221e:	f7ff fd04 	bl	8001c2a <I2C_GetFlagStatus>
 8002222:	1e03      	subs	r3, r0, #0
 8002224:	d0f8      	beq.n	8002218 <I2C_WrReg+0xb0>
	I2C_TransferHandling(EP9351_I2C, Addr, DCnt, I2C_AutoEnd_Mode, I2C_No_StartStop);
 8002226:	1dfb      	adds	r3, r7, #7
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	b299      	uxth	r1, r3
 800222c:	1d3b      	adds	r3, r7, #4
 800222e:	881b      	ldrh	r3, [r3, #0]
 8002230:	b2da      	uxtb	r2, r3
 8002232:	2380      	movs	r3, #128	; 0x80
 8002234:	0498      	lsls	r0, r3, #18
 8002236:	4c2d      	ldr	r4, [pc, #180]	; (80022ec <I2C_WrReg+0x184>)
 8002238:	2300      	movs	r3, #0
 800223a:	9300      	str	r3, [sp, #0]
 800223c:	0003      	movs	r3, r0
 800223e:	0020      	movs	r0, r4
 8002240:	f7ff fcae 	bl	8001ba0 <I2C_TransferHandling>
	while(I2C_GetFlagStatus(EP9351_I2C, I2C_FLAG_TXIS) == RESET) {
 8002244:	e012      	b.n	800226c <I2C_WrReg+0x104>
		i++;
 8002246:	230c      	movs	r3, #12
 8002248:	18fb      	adds	r3, r7, r3
 800224a:	881a      	ldrh	r2, [r3, #0]
 800224c:	230c      	movs	r3, #12
 800224e:	18fb      	adds	r3, r7, r3
 8002250:	3201      	adds	r2, #1
 8002252:	801a      	strh	r2, [r3, #0]
		if(i == I2C_TIMEOUT) {
 8002254:	230c      	movs	r3, #12
 8002256:	18fb      	adds	r3, r7, r3
 8002258:	881a      	ldrh	r2, [r3, #0]
 800225a:	23fa      	movs	r3, #250	; 0xfa
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	429a      	cmp	r2, r3
 8002260:	d104      	bne.n	800226c <I2C_WrReg+0x104>
			return errorState = BAD_VALUE;
 8002262:	4b23      	ldr	r3, [pc, #140]	; (80022f0 <I2C_WrReg+0x188>)
 8002264:	2202      	movs	r2, #2
 8002266:	701a      	strb	r2, [r3, #0]
 8002268:	2302      	movs	r3, #2
 800226a:	e03a      	b.n	80022e2 <I2C_WrReg+0x17a>
	while(I2C_GetFlagStatus(EP9351_I2C, I2C_FLAG_TXIS) == RESET) {
 800226c:	4b1f      	ldr	r3, [pc, #124]	; (80022ec <I2C_WrReg+0x184>)
 800226e:	2102      	movs	r1, #2
 8002270:	0018      	movs	r0, r3
 8002272:	f7ff fcda 	bl	8001c2a <I2C_GetFlagStatus>
 8002276:	1e03      	subs	r3, r0, #0
 8002278:	d0e5      	beq.n	8002246 <I2C_WrReg+0xde>
		}
	} // missing Data
	for(Cnt = 0; Cnt<DCnt; Cnt++){
 800227a:	230e      	movs	r3, #14
 800227c:	18fb      	adds	r3, r7, r3
 800227e:	2200      	movs	r2, #0
 8002280:	801a      	strh	r2, [r3, #0]
 8002282:	e019      	b.n	80022b8 <I2C_WrReg+0x150>
//		snprintf(usartStr, 30, "Data[%d] = %X\n\r", Cnt ,Data[Cnt]);
//		USART_WriteString(usartStr);
		while(I2C_GetFlagStatus(EP9351_I2C, I2C_FLAG_TXE) == RESET);
 8002284:	46c0      	nop			; (mov r8, r8)
 8002286:	4b19      	ldr	r3, [pc, #100]	; (80022ec <I2C_WrReg+0x184>)
 8002288:	2101      	movs	r1, #1
 800228a:	0018      	movs	r0, r3
 800228c:	f7ff fccd 	bl	8001c2a <I2C_GetFlagStatus>
 8002290:	1e03      	subs	r3, r0, #0
 8002292:	d0f8      	beq.n	8002286 <I2C_WrReg+0x11e>
		I2C_SendData(EP9351_I2C, Data[Cnt]);
 8002294:	230e      	movs	r3, #14
 8002296:	18fb      	adds	r3, r7, r3
 8002298:	881b      	ldrh	r3, [r3, #0]
 800229a:	683a      	ldr	r2, [r7, #0]
 800229c:	18d3      	adds	r3, r2, r3
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	4a12      	ldr	r2, [pc, #72]	; (80022ec <I2C_WrReg+0x184>)
 80022a2:	0019      	movs	r1, r3
 80022a4:	0010      	movs	r0, r2
 80022a6:	f7ff fcb1 	bl	8001c0c <I2C_SendData>
	for(Cnt = 0; Cnt<DCnt; Cnt++){
 80022aa:	230e      	movs	r3, #14
 80022ac:	18fb      	adds	r3, r7, r3
 80022ae:	881a      	ldrh	r2, [r3, #0]
 80022b0:	230e      	movs	r3, #14
 80022b2:	18fb      	adds	r3, r7, r3
 80022b4:	3201      	adds	r2, #1
 80022b6:	801a      	strh	r2, [r3, #0]
 80022b8:	230e      	movs	r3, #14
 80022ba:	18fa      	adds	r2, r7, r3
 80022bc:	1d3b      	adds	r3, r7, #4
 80022be:	8812      	ldrh	r2, [r2, #0]
 80022c0:	881b      	ldrh	r3, [r3, #0]
 80022c2:	429a      	cmp	r2, r3
 80022c4:	d3de      	bcc.n	8002284 <I2C_WrReg+0x11c>
	}
	while(I2C_GetFlagStatus(EP9351_I2C, I2C_FLAG_STOPF) == RESET);
 80022c6:	46c0      	nop			; (mov r8, r8)
 80022c8:	4b08      	ldr	r3, [pc, #32]	; (80022ec <I2C_WrReg+0x184>)
 80022ca:	2120      	movs	r1, #32
 80022cc:	0018      	movs	r0, r3
 80022ce:	f7ff fcac 	bl	8001c2a <I2C_GetFlagStatus>
 80022d2:	1e03      	subs	r3, r0, #0
 80022d4:	d0f8      	beq.n	80022c8 <I2C_WrReg+0x160>
	I2C_ClearFlag(EP9351_I2C, I2C_FLAG_STOPF);
 80022d6:	4b05      	ldr	r3, [pc, #20]	; (80022ec <I2C_WrReg+0x184>)
 80022d8:	2120      	movs	r1, #32
 80022da:	0018      	movs	r0, r3
 80022dc:	f7ff fcca 	bl	8001c74 <I2C_ClearFlag>

	return 0;
 80022e0:	2300      	movs	r3, #0
}
 80022e2:	0018      	movs	r0, r3
 80022e4:	46bd      	mov	sp, r7
 80022e6:	b005      	add	sp, #20
 80022e8:	bd90      	pop	{r4, r7, pc}
 80022ea:	46c0      	nop			; (mov r8, r8)
 80022ec:	40005400 	.word	0x40005400
 80022f0:	20000040 	.word	0x20000040

080022f4 <i2cInit>:
	I2C_ClearFlag(EP9351_I2C, I2C_FLAG_STOPF);
	return 0;
}

//void i2cInit(uint8_t periph) {
void i2cInit(void) {
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b08a      	sub	sp, #40	; 0x28
 80022f8:	af00      	add	r7, sp, #0
		//SysTick_Config(SystemCoreClock/1000);
		//Enable GPIOB clock, required for the I2C output
		//RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE); //todo already enabled in rcc.c
		//Enable the I2C peripheral clock

		RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE); // STM32F042
 80022fa:	2380      	movs	r3, #128	; 0x80
 80022fc:	039b      	lsls	r3, r3, #14
 80022fe:	2101      	movs	r1, #1
 8002300:	0018      	movs	r0, r3
 8002302:	f7ff fd39 	bl	8001d78 <RCC_APB1PeriphClockCmd>
//		RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C2, ENABLE); // STM32F072

//	    RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
	    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_8 | GPIO_Pin_1 | GPIO_Pin_0;
 8002306:	2320      	movs	r3, #32
 8002308:	18fb      	adds	r3, r7, r3
 800230a:	2204      	movs	r2, #4
 800230c:	32ff      	adds	r2, #255	; 0xff
 800230e:	601a      	str	r2, [r3, #0]
	    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002310:	2320      	movs	r3, #32
 8002312:	18fb      	adds	r3, r7, r3
 8002314:	2203      	movs	r2, #3
 8002316:	715a      	strb	r2, [r3, #5]
	    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8002318:	2320      	movs	r3, #32
 800231a:	18fb      	adds	r3, r7, r3
 800231c:	2201      	movs	r2, #1
 800231e:	711a      	strb	r2, [r3, #4]
	    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8002320:	2320      	movs	r3, #32
 8002322:	18fb      	adds	r3, r7, r3
 8002324:	2200      	movs	r2, #0
 8002326:	719a      	strb	r2, [r3, #6]
	    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8002328:	2320      	movs	r3, #32
 800232a:	18fb      	adds	r3, r7, r3
 800232c:	2201      	movs	r2, #1
 800232e:	71da      	strb	r2, [r3, #7]
	    GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002330:	2320      	movs	r3, #32
 8002332:	18fa      	adds	r2, r7, r3
 8002334:	2390      	movs	r3, #144	; 0x90
 8002336:	05db      	lsls	r3, r3, #23
 8002338:	0011      	movs	r1, r2
 800233a:	0018      	movs	r0, r3
 800233c:	f7ff fa8c 	bl	8001858 <GPIO_Init>

	    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_4;
 8002340:	2320      	movs	r3, #32
 8002342:	18fb      	adds	r3, r7, r3
 8002344:	2210      	movs	r2, #16
 8002346:	601a      	str	r2, [r3, #0]
	    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002348:	2320      	movs	r3, #32
 800234a:	18fb      	adds	r3, r7, r3
 800234c:	2203      	movs	r2, #3
 800234e:	715a      	strb	r2, [r3, #5]
	    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8002350:	2320      	movs	r3, #32
 8002352:	18fb      	adds	r3, r7, r3
 8002354:	2200      	movs	r2, #0
 8002356:	711a      	strb	r2, [r3, #4]
//	    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
//	    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
	    GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002358:	2320      	movs	r3, #32
 800235a:	18fa      	adds	r2, r7, r3
 800235c:	2390      	movs	r3, #144	; 0x90
 800235e:	05db      	lsls	r3, r3, #23
 8002360:	0011      	movs	r1, r2
 8002362:	0018      	movs	r0, r3
 8002364:	f7ff fa78 	bl	8001858 <GPIO_Init>

	    //Set the pin pb5 as output
		GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5;
 8002368:	2320      	movs	r3, #32
 800236a:	18fb      	adds	r3, r7, r3
 800236c:	2220      	movs	r2, #32
 800236e:	601a      	str	r2, [r3, #0]
		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002370:	2320      	movs	r3, #32
 8002372:	18fb      	adds	r3, r7, r3
 8002374:	2203      	movs	r2, #3
 8002376:	715a      	strb	r2, [r3, #5]
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8002378:	2320      	movs	r3, #32
 800237a:	18fb      	adds	r3, r7, r3
 800237c:	2201      	movs	r2, #1
 800237e:	711a      	strb	r2, [r3, #4]
		GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8002380:	2320      	movs	r3, #32
 8002382:	18fb      	adds	r3, r7, r3
 8002384:	2200      	movs	r2, #0
 8002386:	719a      	strb	r2, [r3, #6]
		GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8002388:	2320      	movs	r3, #32
 800238a:	18fb      	adds	r3, r7, r3
 800238c:	2201      	movs	r2, #1
 800238e:	71da      	strb	r2, [r3, #7]
		GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002390:	2320      	movs	r3, #32
 8002392:	18fb      	adds	r3, r7, r3
 8002394:	4a26      	ldr	r2, [pc, #152]	; (8002430 <i2cInit+0x13c>)
 8002396:	0019      	movs	r1, r3
 8002398:	0010      	movs	r0, r2
 800239a:	f7ff fa5d 	bl	8001858 <GPIO_Init>

		//Set the pins EP9351_SDA and EP9351_SCL as alternate function GPIO pins
		GPIO_InitStructure.GPIO_Pin = EP9351_SDA | EP9351_SCL;
 800239e:	2320      	movs	r3, #32
 80023a0:	18fb      	adds	r3, r7, r3
 80023a2:	22c0      	movs	r2, #192	; 0xc0
 80023a4:	0112      	lsls	r2, r2, #4
 80023a6:	601a      	str	r2, [r3, #0]
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 80023a8:	2320      	movs	r3, #32
 80023aa:	18fb      	adds	r3, r7, r3
 80023ac:	2202      	movs	r2, #2
 80023ae:	711a      	strb	r2, [r3, #4]
		GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 80023b0:	2320      	movs	r3, #32
 80023b2:	18fb      	adds	r3, r7, r3
 80023b4:	2201      	movs	r2, #1
 80023b6:	719a      	strb	r2, [r3, #6]
		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_Level_3;
 80023b8:	2320      	movs	r3, #32
 80023ba:	18fb      	adds	r3, r7, r3
 80023bc:	2203      	movs	r2, #3
 80023be:	715a      	strb	r2, [r3, #5]
		GPIO_Init(EP9351_GPIO, &GPIO_InitStructure);
 80023c0:	2320      	movs	r3, #32
 80023c2:	18fb      	adds	r3, r7, r3
 80023c4:	4a1a      	ldr	r2, [pc, #104]	; (8002430 <i2cInit+0x13c>)
 80023c6:	0019      	movs	r1, r3
 80023c8:	0010      	movs	r0, r2
 80023ca:	f7ff fa45 	bl	8001858 <GPIO_Init>

		//Configure the pins to the I2C AF
		GPIO_PinAFConfig(EP9351_GPIO, EP9351_SDA_PS, EP9351_PIN_AF);
 80023ce:	4b18      	ldr	r3, [pc, #96]	; (8002430 <i2cInit+0x13c>)
 80023d0:	2201      	movs	r2, #1
 80023d2:	210b      	movs	r1, #11
 80023d4:	0018      	movs	r0, r3
 80023d6:	f7ff fb0b 	bl	80019f0 <GPIO_PinAFConfig>
		GPIO_PinAFConfig(EP9351_GPIO, EP9351_SCL_PS, EP9351_PIN_AF);
 80023da:	4b15      	ldr	r3, [pc, #84]	; (8002430 <i2cInit+0x13c>)
 80023dc:	2201      	movs	r2, #1
 80023de:	210a      	movs	r1, #10
 80023e0:	0018      	movs	r0, r3
 80023e2:	f7ff fb05 	bl	80019f0 <GPIO_PinAFConfig>

		I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
 80023e6:	1d3b      	adds	r3, r7, #4
 80023e8:	2200      	movs	r2, #0
 80023ea:	615a      	str	r2, [r3, #20]
		I2C_InitStructure.I2C_AnalogFilter = I2C_AnalogFilter_Enable;
 80023ec:	1d3b      	adds	r3, r7, #4
 80023ee:	2200      	movs	r2, #0
 80023f0:	605a      	str	r2, [r3, #4]
		I2C_InitStructure.I2C_DigitalFilter = 0;
 80023f2:	1d3b      	adds	r3, r7, #4
 80023f4:	2200      	movs	r2, #0
 80023f6:	609a      	str	r2, [r3, #8]
		I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
 80023f8:	1d3b      	adds	r3, r7, #4
 80023fa:	2200      	movs	r2, #0
 80023fc:	60da      	str	r2, [r3, #12]
		I2C_InitStructure.I2C_OwnAddress1 = 0xAB;
 80023fe:	1d3b      	adds	r3, r7, #4
 8002400:	22ab      	movs	r2, #171	; 0xab
 8002402:	611a      	str	r2, [r3, #16]
		I2C_InitStructure.I2C_Timing = 0x10805E89;
 8002404:	1d3b      	adds	r3, r7, #4
 8002406:	4a0b      	ldr	r2, [pc, #44]	; (8002434 <i2cInit+0x140>)
 8002408:	601a      	str	r2, [r3, #0]
		I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 800240a:	1d3b      	adds	r3, r7, #4
 800240c:	2200      	movs	r2, #0
 800240e:	619a      	str	r2, [r3, #24]
		I2C_Init(EP9351_I2C, &I2C_InitStructure);
 8002410:	1d3b      	adds	r3, r7, #4
 8002412:	4a09      	ldr	r2, [pc, #36]	; (8002438 <i2cInit+0x144>)
 8002414:	0019      	movs	r1, r3
 8002416:	0010      	movs	r0, r2
 8002418:	f7ff fb3c 	bl	8001a94 <I2C_Init>
		I2C_Cmd(EP9351_I2C, ENABLE);
 800241c:	4b06      	ldr	r3, [pc, #24]	; (8002438 <i2cInit+0x144>)
 800241e:	2101      	movs	r1, #1
 8002420:	0018      	movs	r0, r3
 8002422:	f7ff fb9f 	bl	8001b64 <I2C_Cmd>
}
 8002426:	46c0      	nop			; (mov r8, r8)
 8002428:	46bd      	mov	sp, r7
 800242a:	b00a      	add	sp, #40	; 0x28
 800242c:	bd80      	pop	{r7, pc}
 800242e:	46c0      	nop			; (mov r8, r8)
 8002430:	48000400 	.word	0x48000400
 8002434:	10805e89 	.word	0x10805e89
 8002438:	40005400 	.word	0x40005400

0800243c <bbInit>:

void bbInit(void) {
 800243c:	b580      	push	{r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af00      	add	r7, sp, #0
		GPIO_InitTypeDef GPIO_InitStructure;

		//Set the pins EP9351_SDA and EP9351_SCL as output for bit-banging mode
		GPIO_InitStructure.GPIO_Pin = EP9351_SDA | EP9351_SCL;
 8002442:	003b      	movs	r3, r7
 8002444:	22c0      	movs	r2, #192	; 0xc0
 8002446:	0112      	lsls	r2, r2, #4
 8002448:	601a      	str	r2, [r3, #0]
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 800244a:	003b      	movs	r3, r7
 800244c:	2201      	movs	r2, #1
 800244e:	711a      	strb	r2, [r3, #4]
		GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 8002450:	003b      	movs	r3, r7
 8002452:	2201      	movs	r2, #1
 8002454:	719a      	strb	r2, [r3, #6]
		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_Level_1;
 8002456:	003b      	movs	r3, r7
 8002458:	2200      	movs	r2, #0
 800245a:	715a      	strb	r2, [r3, #5]
		GPIO_Init(EP9351_GPIO, &GPIO_InitStructure);
 800245c:	003b      	movs	r3, r7
 800245e:	4a04      	ldr	r2, [pc, #16]	; (8002470 <bbInit+0x34>)
 8002460:	0019      	movs	r1, r3
 8002462:	0010      	movs	r0, r2
 8002464:	f7ff f9f8 	bl	8001858 <GPIO_Init>
}
 8002468:	46c0      	nop			; (mov r8, r8)
 800246a:	46bd      	mov	sp, r7
 800246c:	b002      	add	sp, #8
 800246e:	bd80      	pop	{r7, pc}
 8002470:	48000400 	.word	0x48000400

08002474 <main>:

int ncount = 0;
int dcount = 0;

int main(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b0c0      	sub	sp, #256	; 0x100
 8002478:	af00      	add	r7, sp, #0
	rccConfiguration();
 800247a:	f000 f92d 	bl	80026d8 <rccConfiguration>
	DelayMil(10);
 800247e:	200a      	movs	r0, #10
 8002480:	f000 f9a0 	bl	80027c4 <DelayMil>
	//DelaySec(30);	// Adjust this delay to the start of J130, it cannot initialize the CAN bus
					// before J130 starts.

	i2cInit();
 8002484:	f7ff ff36 	bl	80022f4 <i2cInit>
	canInit();
 8002488:	f7ff fd18 	bl	8001ebc <canInit>
    chipReset();
 800248c:	f7ff fe4e 	bl	800212c <chipReset>
	flsdelay = 2000;
 8002490:	4b40      	ldr	r3, [pc, #256]	; (8002594 <main+0x120>)
 8002492:	22fa      	movs	r2, #250	; 0xfa
 8002494:	00d2      	lsls	r2, r2, #3
 8002496:	801a      	strh	r2, [r3, #0]
	flashspeed = 1500;
 8002498:	4b3f      	ldr	r3, [pc, #252]	; (8002598 <main+0x124>)
 800249a:	4a40      	ldr	r2, [pc, #256]	; (800259c <main+0x128>)
 800249c:	801a      	strh	r2, [r3, #0]
	ledflash = 1;
 800249e:	4b40      	ldr	r3, [pc, #256]	; (80025a0 <main+0x12c>)
 80024a0:	2201      	movs	r2, #1
 80024a2:	801a      	strh	r2, [r3, #0]

	bbInit();
 80024a4:	f7ff ffca 	bl	800243c <bbInit>
	i2cInit();
 80024a8:	f7ff ff24 	bl	80022f4 <i2cInit>

	uint8_t tx_values[256];

	// stop blinkm default script
	tx_values[0] = 'o';
 80024ac:	4b3d      	ldr	r3, [pc, #244]	; (80025a4 <main+0x130>)
 80024ae:	1c7a      	adds	r2, r7, #1
 80024b0:	32ff      	adds	r2, #255	; 0xff
 80024b2:	4694      	mov	ip, r2
 80024b4:	4463      	add	r3, ip
 80024b6:	226f      	movs	r2, #111	; 0x6f
 80024b8:	701a      	strb	r2, [r3, #0]
	I2C_WrReg(0x09, 0x00, tx_values, 1);
 80024ba:	003a      	movs	r2, r7
 80024bc:	2301      	movs	r3, #1
 80024be:	2100      	movs	r1, #0
 80024c0:	2009      	movs	r0, #9
 80024c2:	f7ff fe51 	bl	8002168 <I2C_WrReg>
	DelaySec(5);
 80024c6:	2005      	movs	r0, #5
 80024c8:	f000 f992 	bl	80027f0 <DelaySec>

	// bring blinkm off
	tx_values[0] = 'n';
 80024cc:	4b35      	ldr	r3, [pc, #212]	; (80025a4 <main+0x130>)
 80024ce:	1c7a      	adds	r2, r7, #1
 80024d0:	32ff      	adds	r2, #255	; 0xff
 80024d2:	4694      	mov	ip, r2
 80024d4:	4463      	add	r3, ip
 80024d6:	226e      	movs	r2, #110	; 0x6e
 80024d8:	701a      	strb	r2, [r3, #0]
	tx_values[1] = 0x00;
 80024da:	4b32      	ldr	r3, [pc, #200]	; (80025a4 <main+0x130>)
 80024dc:	1c7a      	adds	r2, r7, #1
 80024de:	32ff      	adds	r2, #255	; 0xff
 80024e0:	4694      	mov	ip, r2
 80024e2:	4463      	add	r3, ip
 80024e4:	2200      	movs	r2, #0
 80024e6:	705a      	strb	r2, [r3, #1]
	tx_values[2] = 0x00;
 80024e8:	4b2e      	ldr	r3, [pc, #184]	; (80025a4 <main+0x130>)
 80024ea:	1c7a      	adds	r2, r7, #1
 80024ec:	32ff      	adds	r2, #255	; 0xff
 80024ee:	4694      	mov	ip, r2
 80024f0:	4463      	add	r3, ip
 80024f2:	2200      	movs	r2, #0
 80024f4:	709a      	strb	r2, [r3, #2]
	tx_values[3] = 0x00;
 80024f6:	4b2b      	ldr	r3, [pc, #172]	; (80025a4 <main+0x130>)
 80024f8:	1c7a      	adds	r2, r7, #1
 80024fa:	32ff      	adds	r2, #255	; 0xff
 80024fc:	4694      	mov	ip, r2
 80024fe:	4463      	add	r3, ip
 8002500:	2200      	movs	r2, #0
 8002502:	70da      	strb	r2, [r3, #3]
	I2C_WrReg(0x09, 0x00, tx_values, 4);
 8002504:	003a      	movs	r2, r7
 8002506:	2304      	movs	r3, #4
 8002508:	2100      	movs	r1, #0
 800250a:	2009      	movs	r0, #9
 800250c:	f7ff fe2c 	bl	8002168 <I2C_WrReg>
	DelaySec(5);
 8002510:	2005      	movs	r0, #5
 8002512:	f000 f96d 	bl	80027f0 <DelaySec>

	while (1)
	{
		if(ledflash == 1)
 8002516:	4b22      	ldr	r3, [pc, #136]	; (80025a0 <main+0x12c>)
 8002518:	881b      	ldrh	r3, [r3, #0]
 800251a:	2b01      	cmp	r3, #1
 800251c:	d12f      	bne.n	800257e <main+0x10a>
		{
			if(ncount != flashspeed)
 800251e:	4b1e      	ldr	r3, [pc, #120]	; (8002598 <main+0x124>)
 8002520:	881b      	ldrh	r3, [r3, #0]
 8002522:	001a      	movs	r2, r3
 8002524:	4b20      	ldr	r3, [pc, #128]	; (80025a8 <main+0x134>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	429a      	cmp	r2, r3
 800252a:	d009      	beq.n	8002540 <main+0xcc>
			{
				GPIO_SetBits(GPIOB, GPIO_Pin_5);
 800252c:	4b1f      	ldr	r3, [pc, #124]	; (80025ac <main+0x138>)
 800252e:	2120      	movs	r1, #32
 8002530:	0018      	movs	r0, r3
 8002532:	f7ff fa3f 	bl	80019b4 <GPIO_SetBits>
				ncount++;
 8002536:	4b1c      	ldr	r3, [pc, #112]	; (80025a8 <main+0x134>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	1c5a      	adds	r2, r3, #1
 800253c:	4b1a      	ldr	r3, [pc, #104]	; (80025a8 <main+0x134>)
 800253e:	601a      	str	r2, [r3, #0]
			}
			if(ncount == flashspeed)
 8002540:	4b15      	ldr	r3, [pc, #84]	; (8002598 <main+0x124>)
 8002542:	881b      	ldrh	r3, [r3, #0]
 8002544:	001a      	movs	r2, r3
 8002546:	4b18      	ldr	r3, [pc, #96]	; (80025a8 <main+0x134>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	429a      	cmp	r2, r3
 800254c:	d109      	bne.n	8002562 <main+0xee>
			{
					dcount++;
 800254e:	4b18      	ldr	r3, [pc, #96]	; (80025b0 <main+0x13c>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	1c5a      	adds	r2, r3, #1
 8002554:	4b16      	ldr	r3, [pc, #88]	; (80025b0 <main+0x13c>)
 8002556:	601a      	str	r2, [r3, #0]
					GPIO_ResetBits(GPIOB, GPIO_Pin_5);
 8002558:	4b14      	ldr	r3, [pc, #80]	; (80025ac <main+0x138>)
 800255a:	2120      	movs	r1, #32
 800255c:	0018      	movs	r0, r3
 800255e:	f7ff fa38 	bl	80019d2 <GPIO_ResetBits>
			}
			if(dcount == flsdelay)
 8002562:	4b0c      	ldr	r3, [pc, #48]	; (8002594 <main+0x120>)
 8002564:	881b      	ldrh	r3, [r3, #0]
 8002566:	001a      	movs	r2, r3
 8002568:	4b11      	ldr	r3, [pc, #68]	; (80025b0 <main+0x13c>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	429a      	cmp	r2, r3
 800256e:	d1d2      	bne.n	8002516 <main+0xa2>
			{
				ncount = 0;
 8002570:	4b0d      	ldr	r3, [pc, #52]	; (80025a8 <main+0x134>)
 8002572:	2200      	movs	r2, #0
 8002574:	601a      	str	r2, [r3, #0]
				dcount = 0;
 8002576:	4b0e      	ldr	r3, [pc, #56]	; (80025b0 <main+0x13c>)
 8002578:	2200      	movs	r2, #0
 800257a:	601a      	str	r2, [r3, #0]
 800257c:	e7cb      	b.n	8002516 <main+0xa2>
			}
		}
		else if(ledflash == 0)
 800257e:	4b08      	ldr	r3, [pc, #32]	; (80025a0 <main+0x12c>)
 8002580:	881b      	ldrh	r3, [r3, #0]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d1c7      	bne.n	8002516 <main+0xa2>
		{
			ncount = 0;
 8002586:	4b08      	ldr	r3, [pc, #32]	; (80025a8 <main+0x134>)
 8002588:	2200      	movs	r2, #0
 800258a:	601a      	str	r2, [r3, #0]
			dcount = 0;
 800258c:	4b08      	ldr	r3, [pc, #32]	; (80025b0 <main+0x13c>)
 800258e:	2200      	movs	r2, #0
 8002590:	601a      	str	r2, [r3, #0]
		if(ledflash == 1)
 8002592:	e7c0      	b.n	8002516 <main+0xa2>
 8002594:	20000042 	.word	0x20000042
 8002598:	20000046 	.word	0x20000046
 800259c:	000005dc 	.word	0x000005dc
 80025a0:	20000044 	.word	0x20000044
 80025a4:	ffffff00 	.word	0xffffff00
 80025a8:	20000030 	.word	0x20000030
 80025ac:	48000400 	.word	0x48000400
 80025b0:	20000034 	.word	0x20000034

080025b4 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025b4:	b5b0      	push	{r4, r5, r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	0002      	movs	r2, r0
 80025bc:	6039      	str	r1, [r7, #0]
 80025be:	1dfb      	adds	r3, r7, #7
 80025c0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 80025c2:	1dfb      	adds	r3, r7, #7
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	2b7f      	cmp	r3, #127	; 0x7f
 80025c8:	d932      	bls.n	8002630 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80025ca:	4c2f      	ldr	r4, [pc, #188]	; (8002688 <NVIC_SetPriority+0xd4>)
 80025cc:	1dfb      	adds	r3, r7, #7
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	001a      	movs	r2, r3
 80025d2:	230f      	movs	r3, #15
 80025d4:	4013      	ands	r3, r2
 80025d6:	3b08      	subs	r3, #8
 80025d8:	0899      	lsrs	r1, r3, #2
 80025da:	4a2b      	ldr	r2, [pc, #172]	; (8002688 <NVIC_SetPriority+0xd4>)
 80025dc:	1dfb      	adds	r3, r7, #7
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	0018      	movs	r0, r3
 80025e2:	230f      	movs	r3, #15
 80025e4:	4003      	ands	r3, r0
 80025e6:	3b08      	subs	r3, #8
 80025e8:	089b      	lsrs	r3, r3, #2
 80025ea:	3306      	adds	r3, #6
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	18d3      	adds	r3, r2, r3
 80025f0:	3304      	adds	r3, #4
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	1dfa      	adds	r2, r7, #7
 80025f6:	7812      	ldrb	r2, [r2, #0]
 80025f8:	0010      	movs	r0, r2
 80025fa:	2203      	movs	r2, #3
 80025fc:	4002      	ands	r2, r0
 80025fe:	00d2      	lsls	r2, r2, #3
 8002600:	20ff      	movs	r0, #255	; 0xff
 8002602:	4090      	lsls	r0, r2
 8002604:	0002      	movs	r2, r0
 8002606:	43d2      	mvns	r2, r2
 8002608:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	019b      	lsls	r3, r3, #6
 800260e:	20ff      	movs	r0, #255	; 0xff
 8002610:	4018      	ands	r0, r3
 8002612:	1dfb      	adds	r3, r7, #7
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	001d      	movs	r5, r3
 8002618:	2303      	movs	r3, #3
 800261a:	402b      	ands	r3, r5
 800261c:	00db      	lsls	r3, r3, #3
 800261e:	4098      	lsls	r0, r3
 8002620:	0003      	movs	r3, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002622:	431a      	orrs	r2, r3
 8002624:	1d8b      	adds	r3, r1, #6
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	18e3      	adds	r3, r4, r3
 800262a:	3304      	adds	r3, #4
 800262c:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800262e:	e027      	b.n	8002680 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002630:	4c16      	ldr	r4, [pc, #88]	; (800268c <NVIC_SetPriority+0xd8>)
 8002632:	1dfb      	adds	r3, r7, #7
 8002634:	781b      	ldrb	r3, [r3, #0]
 8002636:	b25b      	sxtb	r3, r3
 8002638:	089b      	lsrs	r3, r3, #2
 800263a:	4914      	ldr	r1, [pc, #80]	; (800268c <NVIC_SetPriority+0xd8>)
 800263c:	1dfa      	adds	r2, r7, #7
 800263e:	7812      	ldrb	r2, [r2, #0]
 8002640:	b252      	sxtb	r2, r2
 8002642:	0892      	lsrs	r2, r2, #2
 8002644:	32c0      	adds	r2, #192	; 0xc0
 8002646:	0092      	lsls	r2, r2, #2
 8002648:	5852      	ldr	r2, [r2, r1]
 800264a:	1df9      	adds	r1, r7, #7
 800264c:	7809      	ldrb	r1, [r1, #0]
 800264e:	0008      	movs	r0, r1
 8002650:	2103      	movs	r1, #3
 8002652:	4001      	ands	r1, r0
 8002654:	00c9      	lsls	r1, r1, #3
 8002656:	20ff      	movs	r0, #255	; 0xff
 8002658:	4088      	lsls	r0, r1
 800265a:	0001      	movs	r1, r0
 800265c:	43c9      	mvns	r1, r1
 800265e:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002660:	683a      	ldr	r2, [r7, #0]
 8002662:	0192      	lsls	r2, r2, #6
 8002664:	20ff      	movs	r0, #255	; 0xff
 8002666:	4010      	ands	r0, r2
 8002668:	1dfa      	adds	r2, r7, #7
 800266a:	7812      	ldrb	r2, [r2, #0]
 800266c:	0015      	movs	r5, r2
 800266e:	2203      	movs	r2, #3
 8002670:	402a      	ands	r2, r5
 8002672:	00d2      	lsls	r2, r2, #3
 8002674:	4090      	lsls	r0, r2
 8002676:	0002      	movs	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002678:	430a      	orrs	r2, r1
 800267a:	33c0      	adds	r3, #192	; 0xc0
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	511a      	str	r2, [r3, r4]
}
 8002680:	46c0      	nop			; (mov r8, r8)
 8002682:	46bd      	mov	sp, r7
 8002684:	b002      	add	sp, #8
 8002686:	bdb0      	pop	{r4, r5, r7, pc}
 8002688:	e000ed00 	.word	0xe000ed00
 800268c:	e000e100 	.word	0xe000e100

08002690 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	3b01      	subs	r3, #1
 800269c:	4a0c      	ldr	r2, [pc, #48]	; (80026d0 <SysTick_Config+0x40>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d901      	bls.n	80026a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026a2:	2301      	movs	r3, #1
 80026a4:	e010      	b.n	80026c8 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026a6:	4b0b      	ldr	r3, [pc, #44]	; (80026d4 <SysTick_Config+0x44>)
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	3a01      	subs	r2, #1
 80026ac:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026ae:	2301      	movs	r3, #1
 80026b0:	425b      	negs	r3, r3
 80026b2:	2103      	movs	r1, #3
 80026b4:	0018      	movs	r0, r3
 80026b6:	f7ff ff7d 	bl	80025b4 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026ba:	4b06      	ldr	r3, [pc, #24]	; (80026d4 <SysTick_Config+0x44>)
 80026bc:	2200      	movs	r2, #0
 80026be:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026c0:	4b04      	ldr	r3, [pc, #16]	; (80026d4 <SysTick_Config+0x44>)
 80026c2:	2207      	movs	r2, #7
 80026c4:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026c6:	2300      	movs	r3, #0
}
 80026c8:	0018      	movs	r0, r3
 80026ca:	46bd      	mov	sp, r7
 80026cc:	b002      	add	sp, #8
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	00ffffff 	.word	0x00ffffff
 80026d4:	e000e010 	.word	0xe000e010

080026d8 <rccConfiguration>:
RCC_ClocksTypeDef rccClocks;
volatile uint32_t Milliseconds = 0;
volatile uint32_t Seconds = 0;
uint16_t PrescalerValue = 0;

void rccConfiguration(void) {
 80026d8:	b590      	push	{r4, r7, lr}
 80026da:	b083      	sub	sp, #12
 80026dc:	af00      	add	r7, sp, #0

	SystemInit(); //Ensure CPU is running at correctly set clock speed
 80026de:	f000 f8e9 	bl	80028b4 <SystemInit>
	SystemCoreClockUpdate(); //Update SystemCoreClock variable to current clock speed
 80026e2:	f000 f92d 	bl	8002940 <SystemCoreClockUpdate>
	SysTick_Config(SystemCoreClock/MillisecondsIT); //Set up a systick interrupt every millisecond
 80026e6:	4b20      	ldr	r3, [pc, #128]	; (8002768 <rccConfiguration+0x90>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	0018      	movs	r0, r3
 80026ec:	f7fe fc34 	bl	8000f58 <__aeabi_ui2d>
 80026f0:	2200      	movs	r2, #0
 80026f2:	4b1e      	ldr	r3, [pc, #120]	; (800276c <rccConfiguration+0x94>)
 80026f4:	f7fd fdb2 	bl	800025c <__aeabi_ddiv>
 80026f8:	0003      	movs	r3, r0
 80026fa:	000c      	movs	r4, r1
 80026fc:	0018      	movs	r0, r3
 80026fe:	0021      	movs	r1, r4
 8002700:	f7fd fd8e 	bl	8000220 <__aeabi_d2uiz>
 8002704:	0003      	movs	r3, r0
 8002706:	0018      	movs	r0, r3
 8002708:	f7ff ffc2 	bl	8002690 <SysTick_Config>

	GPIO_InitTypeDef GPIO_InitStructure;

    RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA | RCC_AHBPeriph_GPIOB, ENABLE); //| RCC_AHBPeriph_GPIOC | RCC_AHBPeriph_GPIOD | RCC_AHBPeriph_GPIOE, ENABLE);
 800270c:	23c0      	movs	r3, #192	; 0xc0
 800270e:	02db      	lsls	r3, r3, #11
 8002710:	2101      	movs	r1, #1
 8002712:	0018      	movs	r0, r3
 8002714:	f7ff fb10 	bl	8001d38 <RCC_AHBPeriphClockCmd>
    GPIO_StructInit(&GPIO_InitStructure);
 8002718:	003b      	movs	r3, r7
 800271a:	0018      	movs	r0, r3
 800271c:	f7ff f930 	bl	8001980 <GPIO_StructInit>

    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_All;
 8002720:	003b      	movs	r3, r7
 8002722:	4a13      	ldr	r2, [pc, #76]	; (8002770 <rccConfiguration+0x98>)
 8002724:	601a      	str	r2, [r3, #0]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8002726:	003b      	movs	r3, r7
 8002728:	2200      	movs	r2, #0
 800272a:	711a      	strb	r2, [r3, #4]
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 800272c:	003b      	movs	r3, r7
 800272e:	2200      	movs	r2, #0
 8002730:	71da      	strb	r2, [r3, #7]

    GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002732:	003b      	movs	r3, r7
 8002734:	4a0f      	ldr	r2, [pc, #60]	; (8002774 <rccConfiguration+0x9c>)
 8002736:	0019      	movs	r1, r3
 8002738:	0010      	movs	r0, r2
 800273a:	f7ff f88d 	bl	8001858 <GPIO_Init>
    GPIO_Init(GPIOC, &GPIO_InitStructure);
 800273e:	003b      	movs	r3, r7
 8002740:	4a0d      	ldr	r2, [pc, #52]	; (8002778 <rccConfiguration+0xa0>)
 8002742:	0019      	movs	r1, r3
 8002744:	0010      	movs	r0, r2
 8002746:	f7ff f887 	bl	8001858 <GPIO_Init>

    // exclude PA13 & PA14 for SWD
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_All & ~(GPIO_Pin_13 | GPIO_Pin_14);
 800274a:	003b      	movs	r3, r7
 800274c:	4a0b      	ldr	r2, [pc, #44]	; (800277c <rccConfiguration+0xa4>)
 800274e:	601a      	str	r2, [r3, #0]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002750:	003a      	movs	r2, r7
 8002752:	2390      	movs	r3, #144	; 0x90
 8002754:	05db      	lsls	r3, r3, #23
 8002756:	0011      	movs	r1, r2
 8002758:	0018      	movs	r0, r3
 800275a:	f7ff f87d 	bl	8001858 <GPIO_Init>

}
 800275e:	46c0      	nop			; (mov r8, r8)
 8002760:	46bd      	mov	sp, r7
 8002762:	b003      	add	sp, #12
 8002764:	bd90      	pop	{r4, r7, pc}
 8002766:	46c0      	nop			; (mov r8, r8)
 8002768:	20000000 	.word	0x20000000
 800276c:	408f4000 	.word	0x408f4000
 8002770:	0000ffff 	.word	0x0000ffff
 8002774:	48000400 	.word	0x48000400
 8002778:	48000800 	.word	0x48000800
 800277c:	00009fff 	.word	0x00009fff

08002780 <SysTick_Handler>:

void SysTick_Handler(void) {
 8002780:	b580      	push	{r7, lr}
 8002782:	af00      	add	r7, sp, #0
    Milliseconds++; 				//Increment millisecond variable
 8002784:	4b0c      	ldr	r3, [pc, #48]	; (80027b8 <SysTick_Handler+0x38>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	1c5a      	adds	r2, r3, #1
 800278a:	4b0b      	ldr	r3, [pc, #44]	; (80027b8 <SysTick_Handler+0x38>)
 800278c:	601a      	str	r2, [r3, #0]
    if(Milliseconds%1000 == 999){ 	//If 1000 milliseconds have passed, increment seconds
 800278e:	4b0a      	ldr	r3, [pc, #40]	; (80027b8 <SysTick_Handler+0x38>)
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	23fa      	movs	r3, #250	; 0xfa
 8002794:	0099      	lsls	r1, r3, #2
 8002796:	0010      	movs	r0, r2
 8002798:	f7fd fd3c 	bl	8000214 <__aeabi_uidivmod>
 800279c:	000b      	movs	r3, r1
 800279e:	001a      	movs	r2, r3
 80027a0:	4b06      	ldr	r3, [pc, #24]	; (80027bc <SysTick_Handler+0x3c>)
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d104      	bne.n	80027b0 <SysTick_Handler+0x30>
        Seconds++;
 80027a6:	4b06      	ldr	r3, [pc, #24]	; (80027c0 <SysTick_Handler+0x40>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	1c5a      	adds	r2, r3, #1
 80027ac:	4b04      	ldr	r3, [pc, #16]	; (80027c0 <SysTick_Handler+0x40>)
 80027ae:	601a      	str	r2, [r3, #0]
    }
}
 80027b0:	46c0      	nop			; (mov r8, r8)
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	46c0      	nop			; (mov r8, r8)
 80027b8:	20000038 	.word	0x20000038
 80027bc:	000003e7 	.word	0x000003e7
 80027c0:	2000003c 	.word	0x2000003c

080027c4 <DelayMil>:

//Delay function for millisecond delay
void DelayMil(uint32_t MilS) {
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b084      	sub	sp, #16
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
      volatile uint32_t MSStart = Milliseconds;
 80027cc:	4b07      	ldr	r3, [pc, #28]	; (80027ec <DelayMil+0x28>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	60fb      	str	r3, [r7, #12]
      while ((Milliseconds - MSStart) < MilS)
 80027d2:	e000      	b.n	80027d6 <DelayMil+0x12>
    	  asm volatile("nop");
 80027d4:	46c0      	nop			; (mov r8, r8)
      while ((Milliseconds - MSStart) < MilS)
 80027d6:	4b05      	ldr	r3, [pc, #20]	; (80027ec <DelayMil+0x28>)
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	1ad2      	subs	r2, r2, r3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d3f7      	bcc.n	80027d4 <DelayMil+0x10>
}
 80027e4:	46c0      	nop			; (mov r8, r8)
 80027e6:	46bd      	mov	sp, r7
 80027e8:	b004      	add	sp, #16
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	20000038 	.word	0x20000038

080027f0 <DelaySec>:

//Delay function for second delay
void DelaySec(uint32_t S) {
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b084      	sub	sp, #16
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
      volatile uint32_t Ss = Seconds;
 80027f8:	4b07      	ldr	r3, [pc, #28]	; (8002818 <DelaySec+0x28>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	60fb      	str	r3, [r7, #12]
      while	((Seconds - Ss) < S)
 80027fe:	e000      	b.n	8002802 <DelaySec+0x12>
    	  asm volatile("nop");
 8002800:	46c0      	nop			; (mov r8, r8)
      while	((Seconds - Ss) < S)
 8002802:	4b05      	ldr	r3, [pc, #20]	; (8002818 <DelaySec+0x28>)
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	1ad2      	subs	r2, r2, r3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	429a      	cmp	r2, r3
 800280e:	d3f7      	bcc.n	8002800 <DelaySec+0x10>
}
 8002810:	46c0      	nop			; (mov r8, r8)
 8002812:	46bd      	mov	sp, r7
 8002814:	b004      	add	sp, #16
 8002816:	bd80      	pop	{r7, pc}
 8002818:	2000003c 	.word	0x2000003c

0800281c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800281c:	4813      	ldr	r0, [pc, #76]	; (800286c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800281e:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8002820:	2004      	movs	r0, #4
    LDR R1, [R0]
 8002822:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8002824:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8002826:	221f      	movs	r2, #31
    CMP R1, R2
 8002828:	4291      	cmp	r1, r2
    BNE ApplicationStart
 800282a:	d105      	bne.n	8002838 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 800282c:	4810      	ldr	r0, [pc, #64]	; (8002870 <LoopForever+0x6>)
    LDR R1,=0x00000001
 800282e:	2101      	movs	r1, #1
    STR R1, [R0]
 8002830:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8002832:	4810      	ldr	r0, [pc, #64]	; (8002874 <LoopForever+0xa>)
    LDR R1,=0x00000000
 8002834:	2100      	movs	r1, #0
    STR R1, [R0]
 8002836:	6001      	str	r1, [r0, #0]

08002838 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002838:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800283a:	e003      	b.n	8002844 <LoopCopyDataInit>

0800283c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800283c:	4b0e      	ldr	r3, [pc, #56]	; (8002878 <LoopForever+0xe>)
  ldr r3, [r3, r1]
 800283e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002840:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002842:	3104      	adds	r1, #4

08002844 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002844:	480d      	ldr	r0, [pc, #52]	; (800287c <LoopForever+0x12>)
  ldr r3, =_edata
 8002846:	4b0e      	ldr	r3, [pc, #56]	; (8002880 <LoopForever+0x16>)
  adds r2, r0, r1
 8002848:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800284a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800284c:	d3f6      	bcc.n	800283c <CopyDataInit>
  ldr r2, =_sbss
 800284e:	4a0d      	ldr	r2, [pc, #52]	; (8002884 <LoopForever+0x1a>)
  b LoopFillZerobss
 8002850:	e002      	b.n	8002858 <LoopFillZerobss>

08002852 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002852:	2300      	movs	r3, #0
  str  r3, [r2]
 8002854:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002856:	3204      	adds	r2, #4

08002858 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8002858:	4b0b      	ldr	r3, [pc, #44]	; (8002888 <LoopForever+0x1e>)
  cmp r2, r3
 800285a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800285c:	d3f9      	bcc.n	8002852 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800285e:	f000 f829 	bl	80028b4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002862:	f000 f9c5 	bl	8002bf0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002866:	f7ff fe05 	bl	8002474 <main>

0800286a <LoopForever>:

LoopForever:
    b LoopForever
 800286a:	e7fe      	b.n	800286a <LoopForever>
  ldr   r0, =_estack
 800286c:	20001800 	.word	0x20001800
    LDR R0,=0x40021018
 8002870:	40021018 	.word	0x40021018
    LDR R0,=0x40010000
 8002874:	40010000 	.word	0x40010000
  ldr r3, =_sidata
 8002878:	08002d68 	.word	0x08002d68
  ldr r0, =_sdata
 800287c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002880:	20000014 	.word	0x20000014
  ldr r2, =_sbss
 8002884:	20000014 	.word	0x20000014
  ldr r3, = _ebss
 8002888:	20000d48 	.word	0x20000d48

0800288c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800288c:	e7fe      	b.n	800288c <ADC1_IRQHandler>

0800288e <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800288e:	b580      	push	{r7, lr}
 8002890:	af00      	add	r7, sp, #0
}
 8002892:	46c0      	nop			; (mov r8, r8)
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}

08002898 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800289c:	e7fe      	b.n	800289c <HardFault_Handler+0x4>

0800289e <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 800289e:	b580      	push	{r7, lr}
 80028a0:	af00      	add	r7, sp, #0
}
 80028a2:	46c0      	nop			; (mov r8, r8)
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}

080028a8 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	af00      	add	r7, sp, #0
}
 80028ac:	46c0      	nop			; (mov r8, r8)
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
	...

080028b4 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{    
 80028b4:	b580      	push	{r7, lr}
 80028b6:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80028b8:	4b1b      	ldr	r3, [pc, #108]	; (8002928 <SystemInit+0x74>)
 80028ba:	4a1b      	ldr	r2, [pc, #108]	; (8002928 <SystemInit+0x74>)
 80028bc:	6812      	ldr	r2, [r2, #0]
 80028be:	2101      	movs	r1, #1
 80028c0:	430a      	orrs	r2, r1
 80028c2:	601a      	str	r2, [r3, #0]
#if defined(STM32F051)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80C;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80C;
 80028c4:	4b18      	ldr	r3, [pc, #96]	; (8002928 <SystemInit+0x74>)
 80028c6:	4a18      	ldr	r2, [pc, #96]	; (8002928 <SystemInit+0x74>)
 80028c8:	6852      	ldr	r2, [r2, #4]
 80028ca:	4918      	ldr	r1, [pc, #96]	; (800292c <SystemInit+0x78>)
 80028cc:	400a      	ands	r2, r1
 80028ce:	605a      	str	r2, [r3, #4]
#endif /* STM32F051 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80028d0:	4b15      	ldr	r3, [pc, #84]	; (8002928 <SystemInit+0x74>)
 80028d2:	4a15      	ldr	r2, [pc, #84]	; (8002928 <SystemInit+0x74>)
 80028d4:	6812      	ldr	r2, [r2, #0]
 80028d6:	4916      	ldr	r1, [pc, #88]	; (8002930 <SystemInit+0x7c>)
 80028d8:	400a      	ands	r2, r1
 80028da:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80028dc:	4b12      	ldr	r3, [pc, #72]	; (8002928 <SystemInit+0x74>)
 80028de:	4a12      	ldr	r2, [pc, #72]	; (8002928 <SystemInit+0x74>)
 80028e0:	6812      	ldr	r2, [r2, #0]
 80028e2:	4914      	ldr	r1, [pc, #80]	; (8002934 <SystemInit+0x80>)
 80028e4:	400a      	ands	r2, r1
 80028e6:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 80028e8:	4b0f      	ldr	r3, [pc, #60]	; (8002928 <SystemInit+0x74>)
 80028ea:	4a0f      	ldr	r2, [pc, #60]	; (8002928 <SystemInit+0x74>)
 80028ec:	6852      	ldr	r2, [r2, #4]
 80028ee:	4912      	ldr	r1, [pc, #72]	; (8002938 <SystemInit+0x84>)
 80028f0:	400a      	ands	r2, r1
 80028f2:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 80028f4:	4b0c      	ldr	r3, [pc, #48]	; (8002928 <SystemInit+0x74>)
 80028f6:	4a0c      	ldr	r2, [pc, #48]	; (8002928 <SystemInit+0x74>)
 80028f8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80028fa:	210f      	movs	r1, #15
 80028fc:	438a      	bics	r2, r1
 80028fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEAC;
 8002900:	4b09      	ldr	r3, [pc, #36]	; (8002928 <SystemInit+0x74>)
 8002902:	4a09      	ldr	r2, [pc, #36]	; (8002928 <SystemInit+0x74>)
 8002904:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002906:	490d      	ldr	r1, [pc, #52]	; (800293c <SystemInit+0x88>)
 8002908:	400a      	ands	r2, r1
 800290a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 800290c:	4b06      	ldr	r3, [pc, #24]	; (8002928 <SystemInit+0x74>)
 800290e:	4a06      	ldr	r2, [pc, #24]	; (8002928 <SystemInit+0x74>)
 8002910:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002912:	2101      	movs	r1, #1
 8002914:	438a      	bics	r2, r1
 8002916:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002918:	4b03      	ldr	r3, [pc, #12]	; (8002928 <SystemInit+0x74>)
 800291a:	2200      	movs	r2, #0
 800291c:	609a      	str	r2, [r3, #8]

  /* Configure the System clock frequency, AHB/APBx prescalers and Flash settings */
  SetSysClock();
 800291e:	f000 f87b 	bl	8002a18 <SetSysClock>
}
 8002922:	46c0      	nop			; (mov r8, r8)
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}
 8002928:	40021000 	.word	0x40021000
 800292c:	08ffb80c 	.word	0x08ffb80c
 8002930:	fef6ffff 	.word	0xfef6ffff
 8002934:	fffbffff 	.word	0xfffbffff
 8002938:	ffc0ffff 	.word	0xffc0ffff
 800293c:	fffffeac 	.word	0xfffffeac

08002940 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b084      	sub	sp, #16
 8002944:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0;
 8002946:	2300      	movs	r3, #0
 8002948:	60fb      	str	r3, [r7, #12]
 800294a:	2300      	movs	r3, #0
 800294c:	60bb      	str	r3, [r7, #8]
 800294e:	2300      	movs	r3, #0
 8002950:	607b      	str	r3, [r7, #4]
 8002952:	2300      	movs	r3, #0
 8002954:	603b      	str	r3, [r7, #0]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8002956:	4b2a      	ldr	r3, [pc, #168]	; (8002a00 <SystemCoreClockUpdate+0xc0>)
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	220c      	movs	r2, #12
 800295c:	4013      	ands	r3, r2
 800295e:	60fb      	str	r3, [r7, #12]
  
  switch (tmp)
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2b04      	cmp	r3, #4
 8002964:	d007      	beq.n	8002976 <SystemCoreClockUpdate+0x36>
 8002966:	2b08      	cmp	r3, #8
 8002968:	d009      	beq.n	800297e <SystemCoreClockUpdate+0x3e>
 800296a:	2b00      	cmp	r3, #0
 800296c:	d131      	bne.n	80029d2 <SystemCoreClockUpdate+0x92>
  {
    case 0x00:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 800296e:	4b25      	ldr	r3, [pc, #148]	; (8002a04 <SystemCoreClockUpdate+0xc4>)
 8002970:	4a25      	ldr	r2, [pc, #148]	; (8002a08 <SystemCoreClockUpdate+0xc8>)
 8002972:	601a      	str	r2, [r3, #0]
      break;
 8002974:	e031      	b.n	80029da <SystemCoreClockUpdate+0x9a>
    case 0x04:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 8002976:	4b23      	ldr	r3, [pc, #140]	; (8002a04 <SystemCoreClockUpdate+0xc4>)
 8002978:	4a24      	ldr	r2, [pc, #144]	; (8002a0c <SystemCoreClockUpdate+0xcc>)
 800297a:	601a      	str	r2, [r3, #0]
      break;
 800297c:	e02d      	b.n	80029da <SystemCoreClockUpdate+0x9a>
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 800297e:	4b20      	ldr	r3, [pc, #128]	; (8002a00 <SystemCoreClockUpdate+0xc0>)
 8002980:	685a      	ldr	r2, [r3, #4]
 8002982:	23f0      	movs	r3, #240	; 0xf0
 8002984:	039b      	lsls	r3, r3, #14
 8002986:	4013      	ands	r3, r2
 8002988:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 800298a:	4b1d      	ldr	r3, [pc, #116]	; (8002a00 <SystemCoreClockUpdate+0xc0>)
 800298c:	685a      	ldr	r2, [r3, #4]
 800298e:	23c0      	movs	r3, #192	; 0xc0
 8002990:	025b      	lsls	r3, r3, #9
 8002992:	4013      	ands	r3, r2
 8002994:	607b      	str	r3, [r7, #4]
      pllmull = ( pllmull >> 18) + 2;
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	0c9b      	lsrs	r3, r3, #18
 800299a:	3302      	adds	r3, #2
 800299c:	60bb      	str	r3, [r7, #8]
      
      if (pllsource == 0x00)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d105      	bne.n	80029b0 <SystemCoreClockUpdate+0x70>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	4a1a      	ldr	r2, [pc, #104]	; (8002a10 <SystemCoreClockUpdate+0xd0>)
 80029a8:	435a      	muls	r2, r3
 80029aa:	4b16      	ldr	r3, [pc, #88]	; (8002a04 <SystemCoreClockUpdate+0xc4>)
 80029ac:	601a      	str	r2, [r3, #0]
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull; 
      }      
      break;
 80029ae:	e014      	b.n	80029da <SystemCoreClockUpdate+0x9a>
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 80029b0:	4b13      	ldr	r3, [pc, #76]	; (8002a00 <SystemCoreClockUpdate+0xc0>)
 80029b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029b4:	220f      	movs	r2, #15
 80029b6:	4013      	ands	r3, r2
 80029b8:	3301      	adds	r3, #1
 80029ba:	603b      	str	r3, [r7, #0]
        SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull; 
 80029bc:	6839      	ldr	r1, [r7, #0]
 80029be:	4813      	ldr	r0, [pc, #76]	; (8002a0c <SystemCoreClockUpdate+0xcc>)
 80029c0:	f7fd fba2 	bl	8000108 <__udivsi3>
 80029c4:	0003      	movs	r3, r0
 80029c6:	001a      	movs	r2, r3
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	435a      	muls	r2, r3
 80029cc:	4b0d      	ldr	r3, [pc, #52]	; (8002a04 <SystemCoreClockUpdate+0xc4>)
 80029ce:	601a      	str	r2, [r3, #0]
      break;
 80029d0:	e003      	b.n	80029da <SystemCoreClockUpdate+0x9a>
    default: /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 80029d2:	4b0c      	ldr	r3, [pc, #48]	; (8002a04 <SystemCoreClockUpdate+0xc4>)
 80029d4:	4a0c      	ldr	r2, [pc, #48]	; (8002a08 <SystemCoreClockUpdate+0xc8>)
 80029d6:	601a      	str	r2, [r3, #0]
      break;
 80029d8:	46c0      	nop			; (mov r8, r8)
  }
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80029da:	4b09      	ldr	r3, [pc, #36]	; (8002a00 <SystemCoreClockUpdate+0xc0>)
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	091b      	lsrs	r3, r3, #4
 80029e0:	220f      	movs	r2, #15
 80029e2:	4013      	ands	r3, r2
 80029e4:	4a0b      	ldr	r2, [pc, #44]	; (8002a14 <SystemCoreClockUpdate+0xd4>)
 80029e6:	5cd3      	ldrb	r3, [r2, r3]
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
 80029ec:	4b05      	ldr	r3, [pc, #20]	; (8002a04 <SystemCoreClockUpdate+0xc4>)
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	40da      	lsrs	r2, r3
 80029f4:	4b03      	ldr	r3, [pc, #12]	; (8002a04 <SystemCoreClockUpdate+0xc4>)
 80029f6:	601a      	str	r2, [r3, #0]
}
 80029f8:	46c0      	nop			; (mov r8, r8)
 80029fa:	46bd      	mov	sp, r7
 80029fc:	b004      	add	sp, #16
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	40021000 	.word	0x40021000
 8002a04:	20000000 	.word	0x20000000
 8002a08:	007a1200 	.word	0x007a1200
 8002a0c:	016e3600 	.word	0x016e3600
 8002a10:	003d0900 	.word	0x003d0900
 8002a14:	20000004 	.word	0x20000004

08002a18 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	607b      	str	r3, [r7, #4]
 8002a22:	2300      	movs	r3, #0
 8002a24:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK configuration ----------------------------------------*/
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8002a26:	4b31      	ldr	r3, [pc, #196]	; (8002aec <SetSysClock+0xd4>)
 8002a28:	4a30      	ldr	r2, [pc, #192]	; (8002aec <SetSysClock+0xd4>)
 8002a2a:	6812      	ldr	r2, [r2, #0]
 8002a2c:	2180      	movs	r1, #128	; 0x80
 8002a2e:	0249      	lsls	r1, r1, #9
 8002a30:	430a      	orrs	r2, r1
 8002a32:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8002a34:	4b2d      	ldr	r3, [pc, #180]	; (8002aec <SetSysClock+0xd4>)
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	2380      	movs	r3, #128	; 0x80
 8002a3a:	029b      	lsls	r3, r3, #10
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	3301      	adds	r3, #1
 8002a44:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d104      	bne.n	8002a56 <SetSysClock+0x3e>
 8002a4c:	687a      	ldr	r2, [r7, #4]
 8002a4e:	23a0      	movs	r3, #160	; 0xa0
 8002a50:	01db      	lsls	r3, r3, #7
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d1ee      	bne.n	8002a34 <SetSysClock+0x1c>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8002a56:	4b25      	ldr	r3, [pc, #148]	; (8002aec <SetSysClock+0xd4>)
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	2380      	movs	r3, #128	; 0x80
 8002a5c:	029b      	lsls	r3, r3, #10
 8002a5e:	4013      	ands	r3, r2
 8002a60:	d002      	beq.n	8002a68 <SetSysClock+0x50>
  {
    HSEStatus = (uint32_t)0x01;
 8002a62:	2301      	movs	r3, #1
 8002a64:	603b      	str	r3, [r7, #0]
 8002a66:	e001      	b.n	8002a6c <SetSysClock+0x54>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	d138      	bne.n	8002ae4 <SetSysClock+0xcc>
  {
    /* Enable Prefetch Buffer and set Flash Latency */
    FLASH->ACR = FLASH_ACR_PRFTBE | FLASH_ACR_LATENCY;
 8002a72:	4b1f      	ldr	r3, [pc, #124]	; (8002af0 <SetSysClock+0xd8>)
 8002a74:	2211      	movs	r2, #17
 8002a76:	601a      	str	r2, [r3, #0]
 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8002a78:	4b1c      	ldr	r3, [pc, #112]	; (8002aec <SetSysClock+0xd4>)
 8002a7a:	4a1c      	ldr	r2, [pc, #112]	; (8002aec <SetSysClock+0xd4>)
 8002a7c:	6852      	ldr	r2, [r2, #4]
 8002a7e:	605a      	str	r2, [r3, #4]
      
    /* PCLK = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE_DIV1;
 8002a80:	4b1a      	ldr	r3, [pc, #104]	; (8002aec <SetSysClock+0xd4>)
 8002a82:	4a1a      	ldr	r2, [pc, #104]	; (8002aec <SetSysClock+0xd4>)
 8002a84:	6852      	ldr	r2, [r2, #4]
 8002a86:	605a      	str	r2, [r3, #4]

    /* PLL configuration = HSE * 6 = 48 MHz */
    /* DW: HSE (24 MHz) * 2 = 48 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 8002a88:	4b18      	ldr	r3, [pc, #96]	; (8002aec <SetSysClock+0xd4>)
 8002a8a:	4a18      	ldr	r2, [pc, #96]	; (8002aec <SetSysClock+0xd4>)
 8002a8c:	6852      	ldr	r2, [r2, #4]
 8002a8e:	4919      	ldr	r1, [pc, #100]	; (8002af4 <SetSysClock+0xdc>)
 8002a90:	400a      	ands	r2, r1
 8002a92:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_PREDIV1 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL2);
 8002a94:	4b15      	ldr	r3, [pc, #84]	; (8002aec <SetSysClock+0xd4>)
 8002a96:	4a15      	ldr	r2, [pc, #84]	; (8002aec <SetSysClock+0xd4>)
 8002a98:	6852      	ldr	r2, [r2, #4]
 8002a9a:	2180      	movs	r1, #128	; 0x80
 8002a9c:	0249      	lsls	r1, r1, #9
 8002a9e:	430a      	orrs	r2, r1
 8002aa0:	605a      	str	r2, [r3, #4]
            
    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8002aa2:	4b12      	ldr	r3, [pc, #72]	; (8002aec <SetSysClock+0xd4>)
 8002aa4:	4a11      	ldr	r2, [pc, #68]	; (8002aec <SetSysClock+0xd4>)
 8002aa6:	6812      	ldr	r2, [r2, #0]
 8002aa8:	2180      	movs	r1, #128	; 0x80
 8002aaa:	0449      	lsls	r1, r1, #17
 8002aac:	430a      	orrs	r2, r1
 8002aae:	601a      	str	r2, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8002ab0:	46c0      	nop			; (mov r8, r8)
 8002ab2:	4b0e      	ldr	r3, [pc, #56]	; (8002aec <SetSysClock+0xd4>)
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	2380      	movs	r3, #128	; 0x80
 8002ab8:	049b      	lsls	r3, r3, #18
 8002aba:	4013      	ands	r3, r2
 8002abc:	d0f9      	beq.n	8002ab2 <SetSysClock+0x9a>
    {
    }

    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8002abe:	4b0b      	ldr	r3, [pc, #44]	; (8002aec <SetSysClock+0xd4>)
 8002ac0:	4a0a      	ldr	r2, [pc, #40]	; (8002aec <SetSysClock+0xd4>)
 8002ac2:	6852      	ldr	r2, [r2, #4]
 8002ac4:	2103      	movs	r1, #3
 8002ac6:	438a      	bics	r2, r1
 8002ac8:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8002aca:	4b08      	ldr	r3, [pc, #32]	; (8002aec <SetSysClock+0xd4>)
 8002acc:	4a07      	ldr	r2, [pc, #28]	; (8002aec <SetSysClock+0xd4>)
 8002ace:	6852      	ldr	r2, [r2, #4]
 8002ad0:	2102      	movs	r1, #2
 8002ad2:	430a      	orrs	r2, r1
 8002ad4:	605a      	str	r2, [r3, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 8002ad6:	46c0      	nop			; (mov r8, r8)
 8002ad8:	4b04      	ldr	r3, [pc, #16]	; (8002aec <SetSysClock+0xd4>)
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	220c      	movs	r2, #12
 8002ade:	4013      	ands	r3, r2
 8002ae0:	2b08      	cmp	r3, #8
 8002ae2:	d1f9      	bne.n	8002ad8 <SetSysClock+0xc0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }  
}
 8002ae4:	46c0      	nop			; (mov r8, r8)
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	b002      	add	sp, #8
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	40021000 	.word	0x40021000
 8002af0:	40022000 	.word	0x40022000
 8002af4:	ffc07fff 	.word	0xffc07fff

08002af8 <USART1_IRQHandler>:
    USART_Cmd(USART1, ENABLE);
    echo = YES;
}

void USART1_IRQHandler(void)
{
 8002af8:	b5b0      	push	{r4, r5, r7, lr}
 8002afa:	af00      	add	r7, sp, #0
	if ((USART1->ISR & USART_FLAG_RXNE) != (uint16_t)RESET) {
 8002afc:	4b38      	ldr	r3, [pc, #224]	; (8002be0 <USART1_IRQHandler+0xe8>)
 8002afe:	69db      	ldr	r3, [r3, #28]
 8002b00:	2220      	movs	r2, #32
 8002b02:	4013      	ands	r3, r2
 8002b04:	d01f      	beq.n	8002b46 <USART1_IRQHandler+0x4e>
		commData.uartRX[commData.rxHead] = USART_ReceiveData(USART1);
 8002b06:	4a37      	ldr	r2, [pc, #220]	; (8002be4 <USART1_IRQHandler+0xec>)
 8002b08:	2392      	movs	r3, #146	; 0x92
 8002b0a:	005b      	lsls	r3, r3, #1
 8002b0c:	5cd3      	ldrb	r3, [r2, r3]
 8002b0e:	001c      	movs	r4, r3
 8002b10:	4b33      	ldr	r3, [pc, #204]	; (8002be0 <USART1_IRQHandler+0xe8>)
 8002b12:	0018      	movs	r0, r3
 8002b14:	f7ff f982 	bl	8001e1c <USART_ReceiveData>
 8002b18:	0003      	movs	r3, r0
 8002b1a:	b2da      	uxtb	r2, r3
 8002b1c:	4b31      	ldr	r3, [pc, #196]	; (8002be4 <USART1_IRQHandler+0xec>)
 8002b1e:	191b      	adds	r3, r3, r4
 8002b20:	771a      	strb	r2, [r3, #28]
		commData.rxHead = (commData.rxHead + 1) % USART1_BUF_SIZE;
 8002b22:	4a30      	ldr	r2, [pc, #192]	; (8002be4 <USART1_IRQHandler+0xec>)
 8002b24:	2392      	movs	r3, #146	; 0x92
 8002b26:	005b      	lsls	r3, r3, #1
 8002b28:	5cd3      	ldrb	r3, [r2, r3]
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	4a2e      	ldr	r2, [pc, #184]	; (8002be8 <USART1_IRQHandler+0xf0>)
 8002b2e:	4013      	ands	r3, r2
 8002b30:	d504      	bpl.n	8002b3c <USART1_IRQHandler+0x44>
 8002b32:	3b01      	subs	r3, #1
 8002b34:	2280      	movs	r2, #128	; 0x80
 8002b36:	4252      	negs	r2, r2
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	3301      	adds	r3, #1
 8002b3c:	b2d9      	uxtb	r1, r3
 8002b3e:	4a29      	ldr	r2, [pc, #164]	; (8002be4 <USART1_IRQHandler+0xec>)
 8002b40:	2392      	movs	r3, #146	; 0x92
 8002b42:	005b      	lsls	r3, r3, #1
 8002b44:	54d1      	strb	r1, [r2, r3]
	}
	if ((USART1->ISR & USART_FLAG_TXE) != (uint16_t)RESET)   {
 8002b46:	4b26      	ldr	r3, [pc, #152]	; (8002be0 <USART1_IRQHandler+0xe8>)
 8002b48:	69db      	ldr	r3, [r3, #28]
 8002b4a:	2280      	movs	r2, #128	; 0x80
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	d043      	beq.n	8002bd8 <USART1_IRQHandler+0xe0>
    	if ( commData.txTail != commData.txHead ) {
 8002b50:	4a24      	ldr	r2, [pc, #144]	; (8002be4 <USART1_IRQHandler+0xec>)
 8002b52:	2328      	movs	r3, #40	; 0x28
 8002b54:	33ff      	adds	r3, #255	; 0xff
 8002b56:	5cd2      	ldrb	r2, [r2, r3]
 8002b58:	4922      	ldr	r1, [pc, #136]	; (8002be4 <USART1_IRQHandler+0xec>)
 8002b5a:	2393      	movs	r3, #147	; 0x93
 8002b5c:	005b      	lsls	r3, r3, #1
 8002b5e:	5ccb      	ldrb	r3, [r1, r3]
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d033      	beq.n	8002bcc <USART1_IRQHandler+0xd4>
			USART_SendData(USART1, commData.txBuf[commData.txTail]);
 8002b64:	4a1f      	ldr	r2, [pc, #124]	; (8002be4 <USART1_IRQHandler+0xec>)
 8002b66:	2328      	movs	r3, #40	; 0x28
 8002b68:	33ff      	adds	r3, #255	; 0xff
 8002b6a:	5cd3      	ldrb	r3, [r2, r3]
 8002b6c:	0019      	movs	r1, r3
 8002b6e:	4b1d      	ldr	r3, [pc, #116]	; (8002be4 <USART1_IRQHandler+0xec>)
 8002b70:	22a4      	movs	r2, #164	; 0xa4
 8002b72:	185b      	adds	r3, r3, r1
 8002b74:	189b      	adds	r3, r3, r2
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	b29b      	uxth	r3, r3
 8002b7c:	4a18      	ldr	r2, [pc, #96]	; (8002be0 <USART1_IRQHandler+0xe8>)
 8002b7e:	0019      	movs	r1, r3
 8002b80:	0010      	movs	r0, r2
 8002b82:	f7ff f939 	bl	8001df8 <USART_SendData>
			commData.txTail = (commData.txTail + 1) % USART1_BUF_SIZE;
 8002b86:	4a17      	ldr	r2, [pc, #92]	; (8002be4 <USART1_IRQHandler+0xec>)
 8002b88:	2328      	movs	r3, #40	; 0x28
 8002b8a:	33ff      	adds	r3, #255	; 0xff
 8002b8c:	5cd3      	ldrb	r3, [r2, r3]
 8002b8e:	3301      	adds	r3, #1
 8002b90:	4a15      	ldr	r2, [pc, #84]	; (8002be8 <USART1_IRQHandler+0xf0>)
 8002b92:	4013      	ands	r3, r2
 8002b94:	d504      	bpl.n	8002ba0 <USART1_IRQHandler+0xa8>
 8002b96:	3b01      	subs	r3, #1
 8002b98:	2280      	movs	r2, #128	; 0x80
 8002b9a:	4252      	negs	r2, r2
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	3301      	adds	r3, #1
 8002ba0:	b2d9      	uxtb	r1, r3
 8002ba2:	4a10      	ldr	r2, [pc, #64]	; (8002be4 <USART1_IRQHandler+0xec>)
 8002ba4:	2328      	movs	r3, #40	; 0x28
 8002ba6:	33ff      	adds	r3, #255	; 0xff
 8002ba8:	54d1      	strb	r1, [r2, r3]
			if ( commData.txTail == commData.txHead)
 8002baa:	4a0e      	ldr	r2, [pc, #56]	; (8002be4 <USART1_IRQHandler+0xec>)
 8002bac:	2328      	movs	r3, #40	; 0x28
 8002bae:	33ff      	adds	r3, #255	; 0xff
 8002bb0:	5cd2      	ldrb	r2, [r2, r3]
 8002bb2:	490c      	ldr	r1, [pc, #48]	; (8002be4 <USART1_IRQHandler+0xec>)
 8002bb4:	2393      	movs	r3, #147	; 0x93
 8002bb6:	005b      	lsls	r3, r3, #1
 8002bb8:	5ccb      	ldrb	r3, [r1, r3]
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	d10c      	bne.n	8002bd8 <USART1_IRQHandler+0xe0>
				USART_ITConfig(USART1, USART_IT_TXE, DISABLE);
 8002bbe:	490b      	ldr	r1, [pc, #44]	; (8002bec <USART1_IRQHandler+0xf4>)
 8002bc0:	4b07      	ldr	r3, [pc, #28]	; (8002be0 <USART1_IRQHandler+0xe8>)
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	0018      	movs	r0, r3
 8002bc6:	f7ff f937 	bl	8001e38 <USART_ITConfig>
    	}
		else {
			USART_ITConfig(USART1, USART_IT_TXE, DISABLE); //disable Transmit Data Register empty interrupt
		}
    }
}
 8002bca:	e005      	b.n	8002bd8 <USART1_IRQHandler+0xe0>
			USART_ITConfig(USART1, USART_IT_TXE, DISABLE); //disable Transmit Data Register empty interrupt
 8002bcc:	4907      	ldr	r1, [pc, #28]	; (8002bec <USART1_IRQHandler+0xf4>)
 8002bce:	4b04      	ldr	r3, [pc, #16]	; (8002be0 <USART1_IRQHandler+0xe8>)
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	0018      	movs	r0, r3
 8002bd4:	f7ff f930 	bl	8001e38 <USART_ITConfig>
}
 8002bd8:	46c0      	nop			; (mov r8, r8)
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bdb0      	pop	{r4, r5, r7, pc}
 8002bde:	46c0      	nop			; (mov r8, r8)
 8002be0:	40013800 	.word	0x40013800
 8002be4:	200007fc 	.word	0x200007fc
 8002be8:	8000007f 	.word	0x8000007f
 8002bec:	00070107 	.word	0x00070107

08002bf0 <__libc_init_array>:
 8002bf0:	b570      	push	{r4, r5, r6, lr}
 8002bf2:	2600      	movs	r6, #0
 8002bf4:	4d0c      	ldr	r5, [pc, #48]	; (8002c28 <__libc_init_array+0x38>)
 8002bf6:	4c0d      	ldr	r4, [pc, #52]	; (8002c2c <__libc_init_array+0x3c>)
 8002bf8:	1b64      	subs	r4, r4, r5
 8002bfa:	10a4      	asrs	r4, r4, #2
 8002bfc:	42a6      	cmp	r6, r4
 8002bfe:	d109      	bne.n	8002c14 <__libc_init_array+0x24>
 8002c00:	2600      	movs	r6, #0
 8002c02:	f000 f819 	bl	8002c38 <_init>
 8002c06:	4d0a      	ldr	r5, [pc, #40]	; (8002c30 <__libc_init_array+0x40>)
 8002c08:	4c0a      	ldr	r4, [pc, #40]	; (8002c34 <__libc_init_array+0x44>)
 8002c0a:	1b64      	subs	r4, r4, r5
 8002c0c:	10a4      	asrs	r4, r4, #2
 8002c0e:	42a6      	cmp	r6, r4
 8002c10:	d105      	bne.n	8002c1e <__libc_init_array+0x2e>
 8002c12:	bd70      	pop	{r4, r5, r6, pc}
 8002c14:	00b3      	lsls	r3, r6, #2
 8002c16:	58eb      	ldr	r3, [r5, r3]
 8002c18:	4798      	blx	r3
 8002c1a:	3601      	adds	r6, #1
 8002c1c:	e7ee      	b.n	8002bfc <__libc_init_array+0xc>
 8002c1e:	00b3      	lsls	r3, r6, #2
 8002c20:	58eb      	ldr	r3, [r5, r3]
 8002c22:	4798      	blx	r3
 8002c24:	3601      	adds	r6, #1
 8002c26:	e7f2      	b.n	8002c0e <__libc_init_array+0x1e>
 8002c28:	08002d60 	.word	0x08002d60
 8002c2c:	08002d60 	.word	0x08002d60
 8002c30:	08002d60 	.word	0x08002d60
 8002c34:	08002d64 	.word	0x08002d64

08002c38 <_init>:
 8002c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c3a:	46c0      	nop			; (mov r8, r8)
 8002c3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c3e:	bc08      	pop	{r3}
 8002c40:	469e      	mov	lr, r3
 8002c42:	4770      	bx	lr

08002c44 <_fini>:
 8002c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c46:	46c0      	nop			; (mov r8, r8)
 8002c48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c4a:	bc08      	pop	{r3}
 8002c4c:	469e      	mov	lr, r3
 8002c4e:	4770      	bx	lr
