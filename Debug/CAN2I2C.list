
CAN2I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004854  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  08004914  08004914  00014914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004b0c  08004b0c  00014b0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08004b10  08004b10  00014b10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000078  20000000  08004b14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000cb8  20000078  08004b8c  00020078  2**2
                  ALLOC
  7 ._user_heap_stack 00000080  20000d30  08004b8c  00020d30  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
  9 .debug_info   000121fd  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000238d  00000000  00000000  0003229d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000dd0  00000000  00000000  00034630  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000cb8  00000000  00000000  00035400  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000552a  00000000  00000000  000360b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000057d1  00000000  00000000  0003b5e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00040db3  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000034f4  00000000  00000000  00040e30  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stab         00000024  00000000  00000000  00044324  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  00044348  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000078 	.word	0x20000078
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080048fc 	.word	0x080048fc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000007c 	.word	0x2000007c
 8000104:	080048fc 	.word	0x080048fc

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_d2uiz>:
 80003f4:	b570      	push	{r4, r5, r6, lr}
 80003f6:	2200      	movs	r2, #0
 80003f8:	4b0c      	ldr	r3, [pc, #48]	; (800042c <__aeabi_d2uiz+0x38>)
 80003fa:	0004      	movs	r4, r0
 80003fc:	000d      	movs	r5, r1
 80003fe:	f000 ff01 	bl	8001204 <__aeabi_dcmpge>
 8000402:	2800      	cmp	r0, #0
 8000404:	d104      	bne.n	8000410 <__aeabi_d2uiz+0x1c>
 8000406:	0020      	movs	r0, r4
 8000408:	0029      	movs	r1, r5
 800040a:	f000 fe5b 	bl	80010c4 <__aeabi_d2iz>
 800040e:	bd70      	pop	{r4, r5, r6, pc}
 8000410:	4b06      	ldr	r3, [pc, #24]	; (800042c <__aeabi_d2uiz+0x38>)
 8000412:	2200      	movs	r2, #0
 8000414:	0020      	movs	r0, r4
 8000416:	0029      	movs	r1, r5
 8000418:	f000 fb3e 	bl	8000a98 <__aeabi_dsub>
 800041c:	f000 fe52 	bl	80010c4 <__aeabi_d2iz>
 8000420:	2380      	movs	r3, #128	; 0x80
 8000422:	061b      	lsls	r3, r3, #24
 8000424:	469c      	mov	ip, r3
 8000426:	4460      	add	r0, ip
 8000428:	e7f1      	b.n	800040e <__aeabi_d2uiz+0x1a>
 800042a:	46c0      	nop			; (mov r8, r8)
 800042c:	41e00000 	.word	0x41e00000

08000430 <__aeabi_ddiv>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	4657      	mov	r7, sl
 8000434:	4645      	mov	r5, r8
 8000436:	46de      	mov	lr, fp
 8000438:	464e      	mov	r6, r9
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	004c      	lsls	r4, r1, #1
 800043e:	030e      	lsls	r6, r1, #12
 8000440:	b087      	sub	sp, #28
 8000442:	4683      	mov	fp, r0
 8000444:	4692      	mov	sl, r2
 8000446:	001d      	movs	r5, r3
 8000448:	4680      	mov	r8, r0
 800044a:	0b36      	lsrs	r6, r6, #12
 800044c:	0d64      	lsrs	r4, r4, #21
 800044e:	0fcf      	lsrs	r7, r1, #31
 8000450:	2c00      	cmp	r4, #0
 8000452:	d04f      	beq.n	80004f4 <__aeabi_ddiv+0xc4>
 8000454:	4b6f      	ldr	r3, [pc, #444]	; (8000614 <__aeabi_ddiv+0x1e4>)
 8000456:	429c      	cmp	r4, r3
 8000458:	d035      	beq.n	80004c6 <__aeabi_ddiv+0x96>
 800045a:	2380      	movs	r3, #128	; 0x80
 800045c:	0f42      	lsrs	r2, r0, #29
 800045e:	041b      	lsls	r3, r3, #16
 8000460:	00f6      	lsls	r6, r6, #3
 8000462:	4313      	orrs	r3, r2
 8000464:	4333      	orrs	r3, r6
 8000466:	4699      	mov	r9, r3
 8000468:	00c3      	lsls	r3, r0, #3
 800046a:	4698      	mov	r8, r3
 800046c:	4b6a      	ldr	r3, [pc, #424]	; (8000618 <__aeabi_ddiv+0x1e8>)
 800046e:	2600      	movs	r6, #0
 8000470:	469c      	mov	ip, r3
 8000472:	2300      	movs	r3, #0
 8000474:	4464      	add	r4, ip
 8000476:	9303      	str	r3, [sp, #12]
 8000478:	032b      	lsls	r3, r5, #12
 800047a:	0b1b      	lsrs	r3, r3, #12
 800047c:	469b      	mov	fp, r3
 800047e:	006b      	lsls	r3, r5, #1
 8000480:	0fed      	lsrs	r5, r5, #31
 8000482:	4650      	mov	r0, sl
 8000484:	0d5b      	lsrs	r3, r3, #21
 8000486:	9501      	str	r5, [sp, #4]
 8000488:	d05e      	beq.n	8000548 <__aeabi_ddiv+0x118>
 800048a:	4a62      	ldr	r2, [pc, #392]	; (8000614 <__aeabi_ddiv+0x1e4>)
 800048c:	4293      	cmp	r3, r2
 800048e:	d053      	beq.n	8000538 <__aeabi_ddiv+0x108>
 8000490:	465a      	mov	r2, fp
 8000492:	00d1      	lsls	r1, r2, #3
 8000494:	2280      	movs	r2, #128	; 0x80
 8000496:	0f40      	lsrs	r0, r0, #29
 8000498:	0412      	lsls	r2, r2, #16
 800049a:	4302      	orrs	r2, r0
 800049c:	430a      	orrs	r2, r1
 800049e:	4693      	mov	fp, r2
 80004a0:	4652      	mov	r2, sl
 80004a2:	00d1      	lsls	r1, r2, #3
 80004a4:	4a5c      	ldr	r2, [pc, #368]	; (8000618 <__aeabi_ddiv+0x1e8>)
 80004a6:	4694      	mov	ip, r2
 80004a8:	2200      	movs	r2, #0
 80004aa:	4463      	add	r3, ip
 80004ac:	0038      	movs	r0, r7
 80004ae:	4068      	eors	r0, r5
 80004b0:	4684      	mov	ip, r0
 80004b2:	9002      	str	r0, [sp, #8]
 80004b4:	1ae4      	subs	r4, r4, r3
 80004b6:	4316      	orrs	r6, r2
 80004b8:	2e0f      	cmp	r6, #15
 80004ba:	d900      	bls.n	80004be <__aeabi_ddiv+0x8e>
 80004bc:	e0b4      	b.n	8000628 <__aeabi_ddiv+0x1f8>
 80004be:	4b57      	ldr	r3, [pc, #348]	; (800061c <__aeabi_ddiv+0x1ec>)
 80004c0:	00b6      	lsls	r6, r6, #2
 80004c2:	599b      	ldr	r3, [r3, r6]
 80004c4:	469f      	mov	pc, r3
 80004c6:	0003      	movs	r3, r0
 80004c8:	4333      	orrs	r3, r6
 80004ca:	4699      	mov	r9, r3
 80004cc:	d16c      	bne.n	80005a8 <__aeabi_ddiv+0x178>
 80004ce:	2300      	movs	r3, #0
 80004d0:	4698      	mov	r8, r3
 80004d2:	3302      	adds	r3, #2
 80004d4:	2608      	movs	r6, #8
 80004d6:	9303      	str	r3, [sp, #12]
 80004d8:	e7ce      	b.n	8000478 <__aeabi_ddiv+0x48>
 80004da:	46cb      	mov	fp, r9
 80004dc:	4641      	mov	r1, r8
 80004de:	9a03      	ldr	r2, [sp, #12]
 80004e0:	9701      	str	r7, [sp, #4]
 80004e2:	2a02      	cmp	r2, #2
 80004e4:	d165      	bne.n	80005b2 <__aeabi_ddiv+0x182>
 80004e6:	9b01      	ldr	r3, [sp, #4]
 80004e8:	4c4a      	ldr	r4, [pc, #296]	; (8000614 <__aeabi_ddiv+0x1e4>)
 80004ea:	469c      	mov	ip, r3
 80004ec:	2300      	movs	r3, #0
 80004ee:	2200      	movs	r2, #0
 80004f0:	4698      	mov	r8, r3
 80004f2:	e06b      	b.n	80005cc <__aeabi_ddiv+0x19c>
 80004f4:	0003      	movs	r3, r0
 80004f6:	4333      	orrs	r3, r6
 80004f8:	4699      	mov	r9, r3
 80004fa:	d04e      	beq.n	800059a <__aeabi_ddiv+0x16a>
 80004fc:	2e00      	cmp	r6, #0
 80004fe:	d100      	bne.n	8000502 <__aeabi_ddiv+0xd2>
 8000500:	e1bc      	b.n	800087c <__aeabi_ddiv+0x44c>
 8000502:	0030      	movs	r0, r6
 8000504:	f000 fe88 	bl	8001218 <__clzsi2>
 8000508:	0003      	movs	r3, r0
 800050a:	3b0b      	subs	r3, #11
 800050c:	2b1c      	cmp	r3, #28
 800050e:	dd00      	ble.n	8000512 <__aeabi_ddiv+0xe2>
 8000510:	e1ac      	b.n	800086c <__aeabi_ddiv+0x43c>
 8000512:	221d      	movs	r2, #29
 8000514:	1ad3      	subs	r3, r2, r3
 8000516:	465a      	mov	r2, fp
 8000518:	0001      	movs	r1, r0
 800051a:	40da      	lsrs	r2, r3
 800051c:	3908      	subs	r1, #8
 800051e:	408e      	lsls	r6, r1
 8000520:	0013      	movs	r3, r2
 8000522:	4333      	orrs	r3, r6
 8000524:	4699      	mov	r9, r3
 8000526:	465b      	mov	r3, fp
 8000528:	408b      	lsls	r3, r1
 800052a:	4698      	mov	r8, r3
 800052c:	2300      	movs	r3, #0
 800052e:	4c3c      	ldr	r4, [pc, #240]	; (8000620 <__aeabi_ddiv+0x1f0>)
 8000530:	2600      	movs	r6, #0
 8000532:	1a24      	subs	r4, r4, r0
 8000534:	9303      	str	r3, [sp, #12]
 8000536:	e79f      	b.n	8000478 <__aeabi_ddiv+0x48>
 8000538:	4651      	mov	r1, sl
 800053a:	465a      	mov	r2, fp
 800053c:	4311      	orrs	r1, r2
 800053e:	d129      	bne.n	8000594 <__aeabi_ddiv+0x164>
 8000540:	2200      	movs	r2, #0
 8000542:	4693      	mov	fp, r2
 8000544:	3202      	adds	r2, #2
 8000546:	e7b1      	b.n	80004ac <__aeabi_ddiv+0x7c>
 8000548:	4659      	mov	r1, fp
 800054a:	4301      	orrs	r1, r0
 800054c:	d01e      	beq.n	800058c <__aeabi_ddiv+0x15c>
 800054e:	465b      	mov	r3, fp
 8000550:	2b00      	cmp	r3, #0
 8000552:	d100      	bne.n	8000556 <__aeabi_ddiv+0x126>
 8000554:	e19e      	b.n	8000894 <__aeabi_ddiv+0x464>
 8000556:	4658      	mov	r0, fp
 8000558:	f000 fe5e 	bl	8001218 <__clzsi2>
 800055c:	0003      	movs	r3, r0
 800055e:	3b0b      	subs	r3, #11
 8000560:	2b1c      	cmp	r3, #28
 8000562:	dd00      	ble.n	8000566 <__aeabi_ddiv+0x136>
 8000564:	e18f      	b.n	8000886 <__aeabi_ddiv+0x456>
 8000566:	0002      	movs	r2, r0
 8000568:	4659      	mov	r1, fp
 800056a:	3a08      	subs	r2, #8
 800056c:	4091      	lsls	r1, r2
 800056e:	468b      	mov	fp, r1
 8000570:	211d      	movs	r1, #29
 8000572:	1acb      	subs	r3, r1, r3
 8000574:	4651      	mov	r1, sl
 8000576:	40d9      	lsrs	r1, r3
 8000578:	000b      	movs	r3, r1
 800057a:	4659      	mov	r1, fp
 800057c:	430b      	orrs	r3, r1
 800057e:	4651      	mov	r1, sl
 8000580:	469b      	mov	fp, r3
 8000582:	4091      	lsls	r1, r2
 8000584:	4b26      	ldr	r3, [pc, #152]	; (8000620 <__aeabi_ddiv+0x1f0>)
 8000586:	2200      	movs	r2, #0
 8000588:	1a1b      	subs	r3, r3, r0
 800058a:	e78f      	b.n	80004ac <__aeabi_ddiv+0x7c>
 800058c:	2300      	movs	r3, #0
 800058e:	2201      	movs	r2, #1
 8000590:	469b      	mov	fp, r3
 8000592:	e78b      	b.n	80004ac <__aeabi_ddiv+0x7c>
 8000594:	4651      	mov	r1, sl
 8000596:	2203      	movs	r2, #3
 8000598:	e788      	b.n	80004ac <__aeabi_ddiv+0x7c>
 800059a:	2300      	movs	r3, #0
 800059c:	4698      	mov	r8, r3
 800059e:	3301      	adds	r3, #1
 80005a0:	2604      	movs	r6, #4
 80005a2:	2400      	movs	r4, #0
 80005a4:	9303      	str	r3, [sp, #12]
 80005a6:	e767      	b.n	8000478 <__aeabi_ddiv+0x48>
 80005a8:	2303      	movs	r3, #3
 80005aa:	46b1      	mov	r9, r6
 80005ac:	9303      	str	r3, [sp, #12]
 80005ae:	260c      	movs	r6, #12
 80005b0:	e762      	b.n	8000478 <__aeabi_ddiv+0x48>
 80005b2:	2a03      	cmp	r2, #3
 80005b4:	d100      	bne.n	80005b8 <__aeabi_ddiv+0x188>
 80005b6:	e25c      	b.n	8000a72 <__aeabi_ddiv+0x642>
 80005b8:	9b01      	ldr	r3, [sp, #4]
 80005ba:	2a01      	cmp	r2, #1
 80005bc:	d000      	beq.n	80005c0 <__aeabi_ddiv+0x190>
 80005be:	e1e4      	b.n	800098a <__aeabi_ddiv+0x55a>
 80005c0:	4013      	ands	r3, r2
 80005c2:	469c      	mov	ip, r3
 80005c4:	2300      	movs	r3, #0
 80005c6:	2400      	movs	r4, #0
 80005c8:	2200      	movs	r2, #0
 80005ca:	4698      	mov	r8, r3
 80005cc:	2100      	movs	r1, #0
 80005ce:	0312      	lsls	r2, r2, #12
 80005d0:	0b13      	lsrs	r3, r2, #12
 80005d2:	0d0a      	lsrs	r2, r1, #20
 80005d4:	0512      	lsls	r2, r2, #20
 80005d6:	431a      	orrs	r2, r3
 80005d8:	0523      	lsls	r3, r4, #20
 80005da:	4c12      	ldr	r4, [pc, #72]	; (8000624 <__aeabi_ddiv+0x1f4>)
 80005dc:	4640      	mov	r0, r8
 80005de:	4022      	ands	r2, r4
 80005e0:	4313      	orrs	r3, r2
 80005e2:	4662      	mov	r2, ip
 80005e4:	005b      	lsls	r3, r3, #1
 80005e6:	07d2      	lsls	r2, r2, #31
 80005e8:	085b      	lsrs	r3, r3, #1
 80005ea:	4313      	orrs	r3, r2
 80005ec:	0019      	movs	r1, r3
 80005ee:	b007      	add	sp, #28
 80005f0:	bc3c      	pop	{r2, r3, r4, r5}
 80005f2:	4690      	mov	r8, r2
 80005f4:	4699      	mov	r9, r3
 80005f6:	46a2      	mov	sl, r4
 80005f8:	46ab      	mov	fp, r5
 80005fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005fc:	2300      	movs	r3, #0
 80005fe:	2280      	movs	r2, #128	; 0x80
 8000600:	469c      	mov	ip, r3
 8000602:	0312      	lsls	r2, r2, #12
 8000604:	4698      	mov	r8, r3
 8000606:	4c03      	ldr	r4, [pc, #12]	; (8000614 <__aeabi_ddiv+0x1e4>)
 8000608:	e7e0      	b.n	80005cc <__aeabi_ddiv+0x19c>
 800060a:	2300      	movs	r3, #0
 800060c:	4c01      	ldr	r4, [pc, #4]	; (8000614 <__aeabi_ddiv+0x1e4>)
 800060e:	2200      	movs	r2, #0
 8000610:	4698      	mov	r8, r3
 8000612:	e7db      	b.n	80005cc <__aeabi_ddiv+0x19c>
 8000614:	000007ff 	.word	0x000007ff
 8000618:	fffffc01 	.word	0xfffffc01
 800061c:	0800491c 	.word	0x0800491c
 8000620:	fffffc0d 	.word	0xfffffc0d
 8000624:	800fffff 	.word	0x800fffff
 8000628:	45d9      	cmp	r9, fp
 800062a:	d900      	bls.n	800062e <__aeabi_ddiv+0x1fe>
 800062c:	e139      	b.n	80008a2 <__aeabi_ddiv+0x472>
 800062e:	d100      	bne.n	8000632 <__aeabi_ddiv+0x202>
 8000630:	e134      	b.n	800089c <__aeabi_ddiv+0x46c>
 8000632:	2300      	movs	r3, #0
 8000634:	4646      	mov	r6, r8
 8000636:	464d      	mov	r5, r9
 8000638:	469a      	mov	sl, r3
 800063a:	3c01      	subs	r4, #1
 800063c:	465b      	mov	r3, fp
 800063e:	0e0a      	lsrs	r2, r1, #24
 8000640:	021b      	lsls	r3, r3, #8
 8000642:	431a      	orrs	r2, r3
 8000644:	020b      	lsls	r3, r1, #8
 8000646:	0c17      	lsrs	r7, r2, #16
 8000648:	9303      	str	r3, [sp, #12]
 800064a:	0413      	lsls	r3, r2, #16
 800064c:	0c1b      	lsrs	r3, r3, #16
 800064e:	0039      	movs	r1, r7
 8000650:	0028      	movs	r0, r5
 8000652:	4690      	mov	r8, r2
 8000654:	9301      	str	r3, [sp, #4]
 8000656:	f7ff fd57 	bl	8000108 <__udivsi3>
 800065a:	0002      	movs	r2, r0
 800065c:	9b01      	ldr	r3, [sp, #4]
 800065e:	4683      	mov	fp, r0
 8000660:	435a      	muls	r2, r3
 8000662:	0028      	movs	r0, r5
 8000664:	0039      	movs	r1, r7
 8000666:	4691      	mov	r9, r2
 8000668:	f7ff fdd4 	bl	8000214 <__aeabi_uidivmod>
 800066c:	0c35      	lsrs	r5, r6, #16
 800066e:	0409      	lsls	r1, r1, #16
 8000670:	430d      	orrs	r5, r1
 8000672:	45a9      	cmp	r9, r5
 8000674:	d90d      	bls.n	8000692 <__aeabi_ddiv+0x262>
 8000676:	465b      	mov	r3, fp
 8000678:	4445      	add	r5, r8
 800067a:	3b01      	subs	r3, #1
 800067c:	45a8      	cmp	r8, r5
 800067e:	d900      	bls.n	8000682 <__aeabi_ddiv+0x252>
 8000680:	e13a      	b.n	80008f8 <__aeabi_ddiv+0x4c8>
 8000682:	45a9      	cmp	r9, r5
 8000684:	d800      	bhi.n	8000688 <__aeabi_ddiv+0x258>
 8000686:	e137      	b.n	80008f8 <__aeabi_ddiv+0x4c8>
 8000688:	2302      	movs	r3, #2
 800068a:	425b      	negs	r3, r3
 800068c:	469c      	mov	ip, r3
 800068e:	4445      	add	r5, r8
 8000690:	44e3      	add	fp, ip
 8000692:	464b      	mov	r3, r9
 8000694:	1aeb      	subs	r3, r5, r3
 8000696:	0039      	movs	r1, r7
 8000698:	0018      	movs	r0, r3
 800069a:	9304      	str	r3, [sp, #16]
 800069c:	f7ff fd34 	bl	8000108 <__udivsi3>
 80006a0:	9b01      	ldr	r3, [sp, #4]
 80006a2:	0005      	movs	r5, r0
 80006a4:	4343      	muls	r3, r0
 80006a6:	0039      	movs	r1, r7
 80006a8:	9804      	ldr	r0, [sp, #16]
 80006aa:	4699      	mov	r9, r3
 80006ac:	f7ff fdb2 	bl	8000214 <__aeabi_uidivmod>
 80006b0:	0433      	lsls	r3, r6, #16
 80006b2:	0409      	lsls	r1, r1, #16
 80006b4:	0c1b      	lsrs	r3, r3, #16
 80006b6:	430b      	orrs	r3, r1
 80006b8:	4599      	cmp	r9, r3
 80006ba:	d909      	bls.n	80006d0 <__aeabi_ddiv+0x2a0>
 80006bc:	4443      	add	r3, r8
 80006be:	1e6a      	subs	r2, r5, #1
 80006c0:	4598      	cmp	r8, r3
 80006c2:	d900      	bls.n	80006c6 <__aeabi_ddiv+0x296>
 80006c4:	e11a      	b.n	80008fc <__aeabi_ddiv+0x4cc>
 80006c6:	4599      	cmp	r9, r3
 80006c8:	d800      	bhi.n	80006cc <__aeabi_ddiv+0x29c>
 80006ca:	e117      	b.n	80008fc <__aeabi_ddiv+0x4cc>
 80006cc:	3d02      	subs	r5, #2
 80006ce:	4443      	add	r3, r8
 80006d0:	464a      	mov	r2, r9
 80006d2:	1a9b      	subs	r3, r3, r2
 80006d4:	465a      	mov	r2, fp
 80006d6:	0412      	lsls	r2, r2, #16
 80006d8:	432a      	orrs	r2, r5
 80006da:	9903      	ldr	r1, [sp, #12]
 80006dc:	4693      	mov	fp, r2
 80006de:	0c10      	lsrs	r0, r2, #16
 80006e0:	0c0a      	lsrs	r2, r1, #16
 80006e2:	4691      	mov	r9, r2
 80006e4:	0409      	lsls	r1, r1, #16
 80006e6:	465a      	mov	r2, fp
 80006e8:	0c09      	lsrs	r1, r1, #16
 80006ea:	464e      	mov	r6, r9
 80006ec:	000d      	movs	r5, r1
 80006ee:	0412      	lsls	r2, r2, #16
 80006f0:	0c12      	lsrs	r2, r2, #16
 80006f2:	4345      	muls	r5, r0
 80006f4:	9105      	str	r1, [sp, #20]
 80006f6:	4351      	muls	r1, r2
 80006f8:	4372      	muls	r2, r6
 80006fa:	4370      	muls	r0, r6
 80006fc:	1952      	adds	r2, r2, r5
 80006fe:	0c0e      	lsrs	r6, r1, #16
 8000700:	18b2      	adds	r2, r6, r2
 8000702:	4295      	cmp	r5, r2
 8000704:	d903      	bls.n	800070e <__aeabi_ddiv+0x2de>
 8000706:	2580      	movs	r5, #128	; 0x80
 8000708:	026d      	lsls	r5, r5, #9
 800070a:	46ac      	mov	ip, r5
 800070c:	4460      	add	r0, ip
 800070e:	0c15      	lsrs	r5, r2, #16
 8000710:	0409      	lsls	r1, r1, #16
 8000712:	0412      	lsls	r2, r2, #16
 8000714:	0c09      	lsrs	r1, r1, #16
 8000716:	1828      	adds	r0, r5, r0
 8000718:	1852      	adds	r2, r2, r1
 800071a:	4283      	cmp	r3, r0
 800071c:	d200      	bcs.n	8000720 <__aeabi_ddiv+0x2f0>
 800071e:	e0ce      	b.n	80008be <__aeabi_ddiv+0x48e>
 8000720:	d100      	bne.n	8000724 <__aeabi_ddiv+0x2f4>
 8000722:	e0c8      	b.n	80008b6 <__aeabi_ddiv+0x486>
 8000724:	1a1d      	subs	r5, r3, r0
 8000726:	4653      	mov	r3, sl
 8000728:	1a9e      	subs	r6, r3, r2
 800072a:	45b2      	cmp	sl, r6
 800072c:	4192      	sbcs	r2, r2
 800072e:	4252      	negs	r2, r2
 8000730:	1aab      	subs	r3, r5, r2
 8000732:	469a      	mov	sl, r3
 8000734:	4598      	cmp	r8, r3
 8000736:	d100      	bne.n	800073a <__aeabi_ddiv+0x30a>
 8000738:	e117      	b.n	800096a <__aeabi_ddiv+0x53a>
 800073a:	0039      	movs	r1, r7
 800073c:	0018      	movs	r0, r3
 800073e:	f7ff fce3 	bl	8000108 <__udivsi3>
 8000742:	9b01      	ldr	r3, [sp, #4]
 8000744:	0005      	movs	r5, r0
 8000746:	4343      	muls	r3, r0
 8000748:	0039      	movs	r1, r7
 800074a:	4650      	mov	r0, sl
 800074c:	9304      	str	r3, [sp, #16]
 800074e:	f7ff fd61 	bl	8000214 <__aeabi_uidivmod>
 8000752:	9804      	ldr	r0, [sp, #16]
 8000754:	040b      	lsls	r3, r1, #16
 8000756:	0c31      	lsrs	r1, r6, #16
 8000758:	4319      	orrs	r1, r3
 800075a:	4288      	cmp	r0, r1
 800075c:	d909      	bls.n	8000772 <__aeabi_ddiv+0x342>
 800075e:	4441      	add	r1, r8
 8000760:	1e6b      	subs	r3, r5, #1
 8000762:	4588      	cmp	r8, r1
 8000764:	d900      	bls.n	8000768 <__aeabi_ddiv+0x338>
 8000766:	e107      	b.n	8000978 <__aeabi_ddiv+0x548>
 8000768:	4288      	cmp	r0, r1
 800076a:	d800      	bhi.n	800076e <__aeabi_ddiv+0x33e>
 800076c:	e104      	b.n	8000978 <__aeabi_ddiv+0x548>
 800076e:	3d02      	subs	r5, #2
 8000770:	4441      	add	r1, r8
 8000772:	9b04      	ldr	r3, [sp, #16]
 8000774:	1acb      	subs	r3, r1, r3
 8000776:	0018      	movs	r0, r3
 8000778:	0039      	movs	r1, r7
 800077a:	9304      	str	r3, [sp, #16]
 800077c:	f7ff fcc4 	bl	8000108 <__udivsi3>
 8000780:	9b01      	ldr	r3, [sp, #4]
 8000782:	4682      	mov	sl, r0
 8000784:	4343      	muls	r3, r0
 8000786:	0039      	movs	r1, r7
 8000788:	9804      	ldr	r0, [sp, #16]
 800078a:	9301      	str	r3, [sp, #4]
 800078c:	f7ff fd42 	bl	8000214 <__aeabi_uidivmod>
 8000790:	9801      	ldr	r0, [sp, #4]
 8000792:	040b      	lsls	r3, r1, #16
 8000794:	0431      	lsls	r1, r6, #16
 8000796:	0c09      	lsrs	r1, r1, #16
 8000798:	4319      	orrs	r1, r3
 800079a:	4288      	cmp	r0, r1
 800079c:	d90d      	bls.n	80007ba <__aeabi_ddiv+0x38a>
 800079e:	4653      	mov	r3, sl
 80007a0:	4441      	add	r1, r8
 80007a2:	3b01      	subs	r3, #1
 80007a4:	4588      	cmp	r8, r1
 80007a6:	d900      	bls.n	80007aa <__aeabi_ddiv+0x37a>
 80007a8:	e0e8      	b.n	800097c <__aeabi_ddiv+0x54c>
 80007aa:	4288      	cmp	r0, r1
 80007ac:	d800      	bhi.n	80007b0 <__aeabi_ddiv+0x380>
 80007ae:	e0e5      	b.n	800097c <__aeabi_ddiv+0x54c>
 80007b0:	2302      	movs	r3, #2
 80007b2:	425b      	negs	r3, r3
 80007b4:	469c      	mov	ip, r3
 80007b6:	4441      	add	r1, r8
 80007b8:	44e2      	add	sl, ip
 80007ba:	9b01      	ldr	r3, [sp, #4]
 80007bc:	042d      	lsls	r5, r5, #16
 80007be:	1ace      	subs	r6, r1, r3
 80007c0:	4651      	mov	r1, sl
 80007c2:	4329      	orrs	r1, r5
 80007c4:	9d05      	ldr	r5, [sp, #20]
 80007c6:	464f      	mov	r7, r9
 80007c8:	002a      	movs	r2, r5
 80007ca:	040b      	lsls	r3, r1, #16
 80007cc:	0c08      	lsrs	r0, r1, #16
 80007ce:	0c1b      	lsrs	r3, r3, #16
 80007d0:	435a      	muls	r2, r3
 80007d2:	4345      	muls	r5, r0
 80007d4:	437b      	muls	r3, r7
 80007d6:	4378      	muls	r0, r7
 80007d8:	195b      	adds	r3, r3, r5
 80007da:	0c17      	lsrs	r7, r2, #16
 80007dc:	18fb      	adds	r3, r7, r3
 80007de:	429d      	cmp	r5, r3
 80007e0:	d903      	bls.n	80007ea <__aeabi_ddiv+0x3ba>
 80007e2:	2580      	movs	r5, #128	; 0x80
 80007e4:	026d      	lsls	r5, r5, #9
 80007e6:	46ac      	mov	ip, r5
 80007e8:	4460      	add	r0, ip
 80007ea:	0c1d      	lsrs	r5, r3, #16
 80007ec:	0412      	lsls	r2, r2, #16
 80007ee:	041b      	lsls	r3, r3, #16
 80007f0:	0c12      	lsrs	r2, r2, #16
 80007f2:	1828      	adds	r0, r5, r0
 80007f4:	189b      	adds	r3, r3, r2
 80007f6:	4286      	cmp	r6, r0
 80007f8:	d200      	bcs.n	80007fc <__aeabi_ddiv+0x3cc>
 80007fa:	e093      	b.n	8000924 <__aeabi_ddiv+0x4f4>
 80007fc:	d100      	bne.n	8000800 <__aeabi_ddiv+0x3d0>
 80007fe:	e08e      	b.n	800091e <__aeabi_ddiv+0x4ee>
 8000800:	2301      	movs	r3, #1
 8000802:	4319      	orrs	r1, r3
 8000804:	4ba0      	ldr	r3, [pc, #640]	; (8000a88 <__aeabi_ddiv+0x658>)
 8000806:	18e3      	adds	r3, r4, r3
 8000808:	2b00      	cmp	r3, #0
 800080a:	dc00      	bgt.n	800080e <__aeabi_ddiv+0x3de>
 800080c:	e099      	b.n	8000942 <__aeabi_ddiv+0x512>
 800080e:	074a      	lsls	r2, r1, #29
 8000810:	d000      	beq.n	8000814 <__aeabi_ddiv+0x3e4>
 8000812:	e09e      	b.n	8000952 <__aeabi_ddiv+0x522>
 8000814:	465a      	mov	r2, fp
 8000816:	01d2      	lsls	r2, r2, #7
 8000818:	d506      	bpl.n	8000828 <__aeabi_ddiv+0x3f8>
 800081a:	465a      	mov	r2, fp
 800081c:	4b9b      	ldr	r3, [pc, #620]	; (8000a8c <__aeabi_ddiv+0x65c>)
 800081e:	401a      	ands	r2, r3
 8000820:	2380      	movs	r3, #128	; 0x80
 8000822:	4693      	mov	fp, r2
 8000824:	00db      	lsls	r3, r3, #3
 8000826:	18e3      	adds	r3, r4, r3
 8000828:	4a99      	ldr	r2, [pc, #612]	; (8000a90 <__aeabi_ddiv+0x660>)
 800082a:	4293      	cmp	r3, r2
 800082c:	dd68      	ble.n	8000900 <__aeabi_ddiv+0x4d0>
 800082e:	2301      	movs	r3, #1
 8000830:	9a02      	ldr	r2, [sp, #8]
 8000832:	4c98      	ldr	r4, [pc, #608]	; (8000a94 <__aeabi_ddiv+0x664>)
 8000834:	401a      	ands	r2, r3
 8000836:	2300      	movs	r3, #0
 8000838:	4694      	mov	ip, r2
 800083a:	4698      	mov	r8, r3
 800083c:	2200      	movs	r2, #0
 800083e:	e6c5      	b.n	80005cc <__aeabi_ddiv+0x19c>
 8000840:	2280      	movs	r2, #128	; 0x80
 8000842:	464b      	mov	r3, r9
 8000844:	0312      	lsls	r2, r2, #12
 8000846:	4213      	tst	r3, r2
 8000848:	d00a      	beq.n	8000860 <__aeabi_ddiv+0x430>
 800084a:	465b      	mov	r3, fp
 800084c:	4213      	tst	r3, r2
 800084e:	d106      	bne.n	800085e <__aeabi_ddiv+0x42e>
 8000850:	431a      	orrs	r2, r3
 8000852:	0312      	lsls	r2, r2, #12
 8000854:	0b12      	lsrs	r2, r2, #12
 8000856:	46ac      	mov	ip, r5
 8000858:	4688      	mov	r8, r1
 800085a:	4c8e      	ldr	r4, [pc, #568]	; (8000a94 <__aeabi_ddiv+0x664>)
 800085c:	e6b6      	b.n	80005cc <__aeabi_ddiv+0x19c>
 800085e:	464b      	mov	r3, r9
 8000860:	431a      	orrs	r2, r3
 8000862:	0312      	lsls	r2, r2, #12
 8000864:	0b12      	lsrs	r2, r2, #12
 8000866:	46bc      	mov	ip, r7
 8000868:	4c8a      	ldr	r4, [pc, #552]	; (8000a94 <__aeabi_ddiv+0x664>)
 800086a:	e6af      	b.n	80005cc <__aeabi_ddiv+0x19c>
 800086c:	0003      	movs	r3, r0
 800086e:	465a      	mov	r2, fp
 8000870:	3b28      	subs	r3, #40	; 0x28
 8000872:	409a      	lsls	r2, r3
 8000874:	2300      	movs	r3, #0
 8000876:	4691      	mov	r9, r2
 8000878:	4698      	mov	r8, r3
 800087a:	e657      	b.n	800052c <__aeabi_ddiv+0xfc>
 800087c:	4658      	mov	r0, fp
 800087e:	f000 fccb 	bl	8001218 <__clzsi2>
 8000882:	3020      	adds	r0, #32
 8000884:	e640      	b.n	8000508 <__aeabi_ddiv+0xd8>
 8000886:	0003      	movs	r3, r0
 8000888:	4652      	mov	r2, sl
 800088a:	3b28      	subs	r3, #40	; 0x28
 800088c:	409a      	lsls	r2, r3
 800088e:	2100      	movs	r1, #0
 8000890:	4693      	mov	fp, r2
 8000892:	e677      	b.n	8000584 <__aeabi_ddiv+0x154>
 8000894:	f000 fcc0 	bl	8001218 <__clzsi2>
 8000898:	3020      	adds	r0, #32
 800089a:	e65f      	b.n	800055c <__aeabi_ddiv+0x12c>
 800089c:	4588      	cmp	r8, r1
 800089e:	d200      	bcs.n	80008a2 <__aeabi_ddiv+0x472>
 80008a0:	e6c7      	b.n	8000632 <__aeabi_ddiv+0x202>
 80008a2:	464b      	mov	r3, r9
 80008a4:	07de      	lsls	r6, r3, #31
 80008a6:	085d      	lsrs	r5, r3, #1
 80008a8:	4643      	mov	r3, r8
 80008aa:	085b      	lsrs	r3, r3, #1
 80008ac:	431e      	orrs	r6, r3
 80008ae:	4643      	mov	r3, r8
 80008b0:	07db      	lsls	r3, r3, #31
 80008b2:	469a      	mov	sl, r3
 80008b4:	e6c2      	b.n	800063c <__aeabi_ddiv+0x20c>
 80008b6:	2500      	movs	r5, #0
 80008b8:	4592      	cmp	sl, r2
 80008ba:	d300      	bcc.n	80008be <__aeabi_ddiv+0x48e>
 80008bc:	e733      	b.n	8000726 <__aeabi_ddiv+0x2f6>
 80008be:	9e03      	ldr	r6, [sp, #12]
 80008c0:	4659      	mov	r1, fp
 80008c2:	46b4      	mov	ip, r6
 80008c4:	44e2      	add	sl, ip
 80008c6:	45b2      	cmp	sl, r6
 80008c8:	41ad      	sbcs	r5, r5
 80008ca:	426d      	negs	r5, r5
 80008cc:	4445      	add	r5, r8
 80008ce:	18eb      	adds	r3, r5, r3
 80008d0:	3901      	subs	r1, #1
 80008d2:	4598      	cmp	r8, r3
 80008d4:	d207      	bcs.n	80008e6 <__aeabi_ddiv+0x4b6>
 80008d6:	4298      	cmp	r0, r3
 80008d8:	d900      	bls.n	80008dc <__aeabi_ddiv+0x4ac>
 80008da:	e07f      	b.n	80009dc <__aeabi_ddiv+0x5ac>
 80008dc:	d100      	bne.n	80008e0 <__aeabi_ddiv+0x4b0>
 80008de:	e0bc      	b.n	8000a5a <__aeabi_ddiv+0x62a>
 80008e0:	1a1d      	subs	r5, r3, r0
 80008e2:	468b      	mov	fp, r1
 80008e4:	e71f      	b.n	8000726 <__aeabi_ddiv+0x2f6>
 80008e6:	4598      	cmp	r8, r3
 80008e8:	d1fa      	bne.n	80008e0 <__aeabi_ddiv+0x4b0>
 80008ea:	9d03      	ldr	r5, [sp, #12]
 80008ec:	4555      	cmp	r5, sl
 80008ee:	d9f2      	bls.n	80008d6 <__aeabi_ddiv+0x4a6>
 80008f0:	4643      	mov	r3, r8
 80008f2:	468b      	mov	fp, r1
 80008f4:	1a1d      	subs	r5, r3, r0
 80008f6:	e716      	b.n	8000726 <__aeabi_ddiv+0x2f6>
 80008f8:	469b      	mov	fp, r3
 80008fa:	e6ca      	b.n	8000692 <__aeabi_ddiv+0x262>
 80008fc:	0015      	movs	r5, r2
 80008fe:	e6e7      	b.n	80006d0 <__aeabi_ddiv+0x2a0>
 8000900:	465a      	mov	r2, fp
 8000902:	08c9      	lsrs	r1, r1, #3
 8000904:	0752      	lsls	r2, r2, #29
 8000906:	430a      	orrs	r2, r1
 8000908:	055b      	lsls	r3, r3, #21
 800090a:	4690      	mov	r8, r2
 800090c:	0d5c      	lsrs	r4, r3, #21
 800090e:	465a      	mov	r2, fp
 8000910:	2301      	movs	r3, #1
 8000912:	9902      	ldr	r1, [sp, #8]
 8000914:	0252      	lsls	r2, r2, #9
 8000916:	4019      	ands	r1, r3
 8000918:	0b12      	lsrs	r2, r2, #12
 800091a:	468c      	mov	ip, r1
 800091c:	e656      	b.n	80005cc <__aeabi_ddiv+0x19c>
 800091e:	2b00      	cmp	r3, #0
 8000920:	d100      	bne.n	8000924 <__aeabi_ddiv+0x4f4>
 8000922:	e76f      	b.n	8000804 <__aeabi_ddiv+0x3d4>
 8000924:	4446      	add	r6, r8
 8000926:	1e4a      	subs	r2, r1, #1
 8000928:	45b0      	cmp	r8, r6
 800092a:	d929      	bls.n	8000980 <__aeabi_ddiv+0x550>
 800092c:	0011      	movs	r1, r2
 800092e:	4286      	cmp	r6, r0
 8000930:	d000      	beq.n	8000934 <__aeabi_ddiv+0x504>
 8000932:	e765      	b.n	8000800 <__aeabi_ddiv+0x3d0>
 8000934:	9a03      	ldr	r2, [sp, #12]
 8000936:	4293      	cmp	r3, r2
 8000938:	d000      	beq.n	800093c <__aeabi_ddiv+0x50c>
 800093a:	e761      	b.n	8000800 <__aeabi_ddiv+0x3d0>
 800093c:	e762      	b.n	8000804 <__aeabi_ddiv+0x3d4>
 800093e:	2101      	movs	r1, #1
 8000940:	4249      	negs	r1, r1
 8000942:	2001      	movs	r0, #1
 8000944:	1ac2      	subs	r2, r0, r3
 8000946:	2a38      	cmp	r2, #56	; 0x38
 8000948:	dd21      	ble.n	800098e <__aeabi_ddiv+0x55e>
 800094a:	9b02      	ldr	r3, [sp, #8]
 800094c:	4003      	ands	r3, r0
 800094e:	469c      	mov	ip, r3
 8000950:	e638      	b.n	80005c4 <__aeabi_ddiv+0x194>
 8000952:	220f      	movs	r2, #15
 8000954:	400a      	ands	r2, r1
 8000956:	2a04      	cmp	r2, #4
 8000958:	d100      	bne.n	800095c <__aeabi_ddiv+0x52c>
 800095a:	e75b      	b.n	8000814 <__aeabi_ddiv+0x3e4>
 800095c:	000a      	movs	r2, r1
 800095e:	1d11      	adds	r1, r2, #4
 8000960:	4291      	cmp	r1, r2
 8000962:	4192      	sbcs	r2, r2
 8000964:	4252      	negs	r2, r2
 8000966:	4493      	add	fp, r2
 8000968:	e754      	b.n	8000814 <__aeabi_ddiv+0x3e4>
 800096a:	4b47      	ldr	r3, [pc, #284]	; (8000a88 <__aeabi_ddiv+0x658>)
 800096c:	18e3      	adds	r3, r4, r3
 800096e:	2b00      	cmp	r3, #0
 8000970:	dde5      	ble.n	800093e <__aeabi_ddiv+0x50e>
 8000972:	2201      	movs	r2, #1
 8000974:	4252      	negs	r2, r2
 8000976:	e7f2      	b.n	800095e <__aeabi_ddiv+0x52e>
 8000978:	001d      	movs	r5, r3
 800097a:	e6fa      	b.n	8000772 <__aeabi_ddiv+0x342>
 800097c:	469a      	mov	sl, r3
 800097e:	e71c      	b.n	80007ba <__aeabi_ddiv+0x38a>
 8000980:	42b0      	cmp	r0, r6
 8000982:	d839      	bhi.n	80009f8 <__aeabi_ddiv+0x5c8>
 8000984:	d06e      	beq.n	8000a64 <__aeabi_ddiv+0x634>
 8000986:	0011      	movs	r1, r2
 8000988:	e73a      	b.n	8000800 <__aeabi_ddiv+0x3d0>
 800098a:	9302      	str	r3, [sp, #8]
 800098c:	e73a      	b.n	8000804 <__aeabi_ddiv+0x3d4>
 800098e:	2a1f      	cmp	r2, #31
 8000990:	dc3c      	bgt.n	8000a0c <__aeabi_ddiv+0x5dc>
 8000992:	2320      	movs	r3, #32
 8000994:	1a9b      	subs	r3, r3, r2
 8000996:	000c      	movs	r4, r1
 8000998:	4658      	mov	r0, fp
 800099a:	4099      	lsls	r1, r3
 800099c:	4098      	lsls	r0, r3
 800099e:	1e4b      	subs	r3, r1, #1
 80009a0:	4199      	sbcs	r1, r3
 80009a2:	465b      	mov	r3, fp
 80009a4:	40d4      	lsrs	r4, r2
 80009a6:	40d3      	lsrs	r3, r2
 80009a8:	4320      	orrs	r0, r4
 80009aa:	4308      	orrs	r0, r1
 80009ac:	001a      	movs	r2, r3
 80009ae:	0743      	lsls	r3, r0, #29
 80009b0:	d009      	beq.n	80009c6 <__aeabi_ddiv+0x596>
 80009b2:	230f      	movs	r3, #15
 80009b4:	4003      	ands	r3, r0
 80009b6:	2b04      	cmp	r3, #4
 80009b8:	d005      	beq.n	80009c6 <__aeabi_ddiv+0x596>
 80009ba:	0001      	movs	r1, r0
 80009bc:	1d08      	adds	r0, r1, #4
 80009be:	4288      	cmp	r0, r1
 80009c0:	419b      	sbcs	r3, r3
 80009c2:	425b      	negs	r3, r3
 80009c4:	18d2      	adds	r2, r2, r3
 80009c6:	0213      	lsls	r3, r2, #8
 80009c8:	d53a      	bpl.n	8000a40 <__aeabi_ddiv+0x610>
 80009ca:	2301      	movs	r3, #1
 80009cc:	9a02      	ldr	r2, [sp, #8]
 80009ce:	2401      	movs	r4, #1
 80009d0:	401a      	ands	r2, r3
 80009d2:	2300      	movs	r3, #0
 80009d4:	4694      	mov	ip, r2
 80009d6:	4698      	mov	r8, r3
 80009d8:	2200      	movs	r2, #0
 80009da:	e5f7      	b.n	80005cc <__aeabi_ddiv+0x19c>
 80009dc:	2102      	movs	r1, #2
 80009de:	4249      	negs	r1, r1
 80009e0:	468c      	mov	ip, r1
 80009e2:	9d03      	ldr	r5, [sp, #12]
 80009e4:	44e3      	add	fp, ip
 80009e6:	46ac      	mov	ip, r5
 80009e8:	44e2      	add	sl, ip
 80009ea:	45aa      	cmp	sl, r5
 80009ec:	41ad      	sbcs	r5, r5
 80009ee:	426d      	negs	r5, r5
 80009f0:	4445      	add	r5, r8
 80009f2:	18ed      	adds	r5, r5, r3
 80009f4:	1a2d      	subs	r5, r5, r0
 80009f6:	e696      	b.n	8000726 <__aeabi_ddiv+0x2f6>
 80009f8:	1e8a      	subs	r2, r1, #2
 80009fa:	9903      	ldr	r1, [sp, #12]
 80009fc:	004d      	lsls	r5, r1, #1
 80009fe:	428d      	cmp	r5, r1
 8000a00:	4189      	sbcs	r1, r1
 8000a02:	4249      	negs	r1, r1
 8000a04:	4441      	add	r1, r8
 8000a06:	1876      	adds	r6, r6, r1
 8000a08:	9503      	str	r5, [sp, #12]
 8000a0a:	e78f      	b.n	800092c <__aeabi_ddiv+0x4fc>
 8000a0c:	201f      	movs	r0, #31
 8000a0e:	4240      	negs	r0, r0
 8000a10:	1ac3      	subs	r3, r0, r3
 8000a12:	4658      	mov	r0, fp
 8000a14:	40d8      	lsrs	r0, r3
 8000a16:	0003      	movs	r3, r0
 8000a18:	2a20      	cmp	r2, #32
 8000a1a:	d028      	beq.n	8000a6e <__aeabi_ddiv+0x63e>
 8000a1c:	2040      	movs	r0, #64	; 0x40
 8000a1e:	465d      	mov	r5, fp
 8000a20:	1a82      	subs	r2, r0, r2
 8000a22:	4095      	lsls	r5, r2
 8000a24:	4329      	orrs	r1, r5
 8000a26:	1e4a      	subs	r2, r1, #1
 8000a28:	4191      	sbcs	r1, r2
 8000a2a:	4319      	orrs	r1, r3
 8000a2c:	2307      	movs	r3, #7
 8000a2e:	2200      	movs	r2, #0
 8000a30:	400b      	ands	r3, r1
 8000a32:	d009      	beq.n	8000a48 <__aeabi_ddiv+0x618>
 8000a34:	230f      	movs	r3, #15
 8000a36:	2200      	movs	r2, #0
 8000a38:	400b      	ands	r3, r1
 8000a3a:	0008      	movs	r0, r1
 8000a3c:	2b04      	cmp	r3, #4
 8000a3e:	d1bd      	bne.n	80009bc <__aeabi_ddiv+0x58c>
 8000a40:	0001      	movs	r1, r0
 8000a42:	0753      	lsls	r3, r2, #29
 8000a44:	0252      	lsls	r2, r2, #9
 8000a46:	0b12      	lsrs	r2, r2, #12
 8000a48:	08c9      	lsrs	r1, r1, #3
 8000a4a:	4319      	orrs	r1, r3
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	4688      	mov	r8, r1
 8000a50:	9902      	ldr	r1, [sp, #8]
 8000a52:	2400      	movs	r4, #0
 8000a54:	4019      	ands	r1, r3
 8000a56:	468c      	mov	ip, r1
 8000a58:	e5b8      	b.n	80005cc <__aeabi_ddiv+0x19c>
 8000a5a:	4552      	cmp	r2, sl
 8000a5c:	d8be      	bhi.n	80009dc <__aeabi_ddiv+0x5ac>
 8000a5e:	468b      	mov	fp, r1
 8000a60:	2500      	movs	r5, #0
 8000a62:	e660      	b.n	8000726 <__aeabi_ddiv+0x2f6>
 8000a64:	9d03      	ldr	r5, [sp, #12]
 8000a66:	429d      	cmp	r5, r3
 8000a68:	d3c6      	bcc.n	80009f8 <__aeabi_ddiv+0x5c8>
 8000a6a:	0011      	movs	r1, r2
 8000a6c:	e762      	b.n	8000934 <__aeabi_ddiv+0x504>
 8000a6e:	2500      	movs	r5, #0
 8000a70:	e7d8      	b.n	8000a24 <__aeabi_ddiv+0x5f4>
 8000a72:	2280      	movs	r2, #128	; 0x80
 8000a74:	465b      	mov	r3, fp
 8000a76:	0312      	lsls	r2, r2, #12
 8000a78:	431a      	orrs	r2, r3
 8000a7a:	9b01      	ldr	r3, [sp, #4]
 8000a7c:	0312      	lsls	r2, r2, #12
 8000a7e:	0b12      	lsrs	r2, r2, #12
 8000a80:	469c      	mov	ip, r3
 8000a82:	4688      	mov	r8, r1
 8000a84:	4c03      	ldr	r4, [pc, #12]	; (8000a94 <__aeabi_ddiv+0x664>)
 8000a86:	e5a1      	b.n	80005cc <__aeabi_ddiv+0x19c>
 8000a88:	000003ff 	.word	0x000003ff
 8000a8c:	feffffff 	.word	0xfeffffff
 8000a90:	000007fe 	.word	0x000007fe
 8000a94:	000007ff 	.word	0x000007ff

08000a98 <__aeabi_dsub>:
 8000a98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a9a:	4646      	mov	r6, r8
 8000a9c:	46d6      	mov	lr, sl
 8000a9e:	464f      	mov	r7, r9
 8000aa0:	030c      	lsls	r4, r1, #12
 8000aa2:	b5c0      	push	{r6, r7, lr}
 8000aa4:	0fcd      	lsrs	r5, r1, #31
 8000aa6:	004e      	lsls	r6, r1, #1
 8000aa8:	0a61      	lsrs	r1, r4, #9
 8000aaa:	0f44      	lsrs	r4, r0, #29
 8000aac:	430c      	orrs	r4, r1
 8000aae:	00c1      	lsls	r1, r0, #3
 8000ab0:	0058      	lsls	r0, r3, #1
 8000ab2:	0d40      	lsrs	r0, r0, #21
 8000ab4:	4684      	mov	ip, r0
 8000ab6:	468a      	mov	sl, r1
 8000ab8:	000f      	movs	r7, r1
 8000aba:	0319      	lsls	r1, r3, #12
 8000abc:	0f50      	lsrs	r0, r2, #29
 8000abe:	0a49      	lsrs	r1, r1, #9
 8000ac0:	4301      	orrs	r1, r0
 8000ac2:	48c6      	ldr	r0, [pc, #792]	; (8000ddc <__aeabi_dsub+0x344>)
 8000ac4:	0d76      	lsrs	r6, r6, #21
 8000ac6:	46a8      	mov	r8, r5
 8000ac8:	0fdb      	lsrs	r3, r3, #31
 8000aca:	00d2      	lsls	r2, r2, #3
 8000acc:	4584      	cmp	ip, r0
 8000ace:	d100      	bne.n	8000ad2 <__aeabi_dsub+0x3a>
 8000ad0:	e0d8      	b.n	8000c84 <__aeabi_dsub+0x1ec>
 8000ad2:	2001      	movs	r0, #1
 8000ad4:	4043      	eors	r3, r0
 8000ad6:	42ab      	cmp	r3, r5
 8000ad8:	d100      	bne.n	8000adc <__aeabi_dsub+0x44>
 8000ada:	e0a6      	b.n	8000c2a <__aeabi_dsub+0x192>
 8000adc:	4660      	mov	r0, ip
 8000ade:	1a35      	subs	r5, r6, r0
 8000ae0:	2d00      	cmp	r5, #0
 8000ae2:	dc00      	bgt.n	8000ae6 <__aeabi_dsub+0x4e>
 8000ae4:	e105      	b.n	8000cf2 <__aeabi_dsub+0x25a>
 8000ae6:	2800      	cmp	r0, #0
 8000ae8:	d110      	bne.n	8000b0c <__aeabi_dsub+0x74>
 8000aea:	000b      	movs	r3, r1
 8000aec:	4313      	orrs	r3, r2
 8000aee:	d100      	bne.n	8000af2 <__aeabi_dsub+0x5a>
 8000af0:	e0d7      	b.n	8000ca2 <__aeabi_dsub+0x20a>
 8000af2:	1e6b      	subs	r3, r5, #1
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d000      	beq.n	8000afa <__aeabi_dsub+0x62>
 8000af8:	e14b      	b.n	8000d92 <__aeabi_dsub+0x2fa>
 8000afa:	4653      	mov	r3, sl
 8000afc:	1a9f      	subs	r7, r3, r2
 8000afe:	45ba      	cmp	sl, r7
 8000b00:	4180      	sbcs	r0, r0
 8000b02:	1a64      	subs	r4, r4, r1
 8000b04:	4240      	negs	r0, r0
 8000b06:	1a24      	subs	r4, r4, r0
 8000b08:	2601      	movs	r6, #1
 8000b0a:	e01e      	b.n	8000b4a <__aeabi_dsub+0xb2>
 8000b0c:	4bb3      	ldr	r3, [pc, #716]	; (8000ddc <__aeabi_dsub+0x344>)
 8000b0e:	429e      	cmp	r6, r3
 8000b10:	d048      	beq.n	8000ba4 <__aeabi_dsub+0x10c>
 8000b12:	2380      	movs	r3, #128	; 0x80
 8000b14:	041b      	lsls	r3, r3, #16
 8000b16:	4319      	orrs	r1, r3
 8000b18:	2d38      	cmp	r5, #56	; 0x38
 8000b1a:	dd00      	ble.n	8000b1e <__aeabi_dsub+0x86>
 8000b1c:	e119      	b.n	8000d52 <__aeabi_dsub+0x2ba>
 8000b1e:	2d1f      	cmp	r5, #31
 8000b20:	dd00      	ble.n	8000b24 <__aeabi_dsub+0x8c>
 8000b22:	e14c      	b.n	8000dbe <__aeabi_dsub+0x326>
 8000b24:	2320      	movs	r3, #32
 8000b26:	000f      	movs	r7, r1
 8000b28:	1b5b      	subs	r3, r3, r5
 8000b2a:	0010      	movs	r0, r2
 8000b2c:	409a      	lsls	r2, r3
 8000b2e:	409f      	lsls	r7, r3
 8000b30:	40e8      	lsrs	r0, r5
 8000b32:	1e53      	subs	r3, r2, #1
 8000b34:	419a      	sbcs	r2, r3
 8000b36:	40e9      	lsrs	r1, r5
 8000b38:	4307      	orrs	r7, r0
 8000b3a:	4317      	orrs	r7, r2
 8000b3c:	4653      	mov	r3, sl
 8000b3e:	1bdf      	subs	r7, r3, r7
 8000b40:	1a61      	subs	r1, r4, r1
 8000b42:	45ba      	cmp	sl, r7
 8000b44:	41a4      	sbcs	r4, r4
 8000b46:	4264      	negs	r4, r4
 8000b48:	1b0c      	subs	r4, r1, r4
 8000b4a:	0223      	lsls	r3, r4, #8
 8000b4c:	d400      	bmi.n	8000b50 <__aeabi_dsub+0xb8>
 8000b4e:	e0c5      	b.n	8000cdc <__aeabi_dsub+0x244>
 8000b50:	0264      	lsls	r4, r4, #9
 8000b52:	0a65      	lsrs	r5, r4, #9
 8000b54:	2d00      	cmp	r5, #0
 8000b56:	d100      	bne.n	8000b5a <__aeabi_dsub+0xc2>
 8000b58:	e0f6      	b.n	8000d48 <__aeabi_dsub+0x2b0>
 8000b5a:	0028      	movs	r0, r5
 8000b5c:	f000 fb5c 	bl	8001218 <__clzsi2>
 8000b60:	0003      	movs	r3, r0
 8000b62:	3b08      	subs	r3, #8
 8000b64:	2b1f      	cmp	r3, #31
 8000b66:	dd00      	ble.n	8000b6a <__aeabi_dsub+0xd2>
 8000b68:	e0e9      	b.n	8000d3e <__aeabi_dsub+0x2a6>
 8000b6a:	2220      	movs	r2, #32
 8000b6c:	003c      	movs	r4, r7
 8000b6e:	1ad2      	subs	r2, r2, r3
 8000b70:	409d      	lsls	r5, r3
 8000b72:	40d4      	lsrs	r4, r2
 8000b74:	409f      	lsls	r7, r3
 8000b76:	4325      	orrs	r5, r4
 8000b78:	429e      	cmp	r6, r3
 8000b7a:	dd00      	ble.n	8000b7e <__aeabi_dsub+0xe6>
 8000b7c:	e0db      	b.n	8000d36 <__aeabi_dsub+0x29e>
 8000b7e:	1b9e      	subs	r6, r3, r6
 8000b80:	1c73      	adds	r3, r6, #1
 8000b82:	2b1f      	cmp	r3, #31
 8000b84:	dd00      	ble.n	8000b88 <__aeabi_dsub+0xf0>
 8000b86:	e10a      	b.n	8000d9e <__aeabi_dsub+0x306>
 8000b88:	2220      	movs	r2, #32
 8000b8a:	0038      	movs	r0, r7
 8000b8c:	1ad2      	subs	r2, r2, r3
 8000b8e:	0029      	movs	r1, r5
 8000b90:	4097      	lsls	r7, r2
 8000b92:	002c      	movs	r4, r5
 8000b94:	4091      	lsls	r1, r2
 8000b96:	40d8      	lsrs	r0, r3
 8000b98:	1e7a      	subs	r2, r7, #1
 8000b9a:	4197      	sbcs	r7, r2
 8000b9c:	40dc      	lsrs	r4, r3
 8000b9e:	2600      	movs	r6, #0
 8000ba0:	4301      	orrs	r1, r0
 8000ba2:	430f      	orrs	r7, r1
 8000ba4:	077b      	lsls	r3, r7, #29
 8000ba6:	d009      	beq.n	8000bbc <__aeabi_dsub+0x124>
 8000ba8:	230f      	movs	r3, #15
 8000baa:	403b      	ands	r3, r7
 8000bac:	2b04      	cmp	r3, #4
 8000bae:	d005      	beq.n	8000bbc <__aeabi_dsub+0x124>
 8000bb0:	1d3b      	adds	r3, r7, #4
 8000bb2:	42bb      	cmp	r3, r7
 8000bb4:	41bf      	sbcs	r7, r7
 8000bb6:	427f      	negs	r7, r7
 8000bb8:	19e4      	adds	r4, r4, r7
 8000bba:	001f      	movs	r7, r3
 8000bbc:	0223      	lsls	r3, r4, #8
 8000bbe:	d525      	bpl.n	8000c0c <__aeabi_dsub+0x174>
 8000bc0:	4b86      	ldr	r3, [pc, #536]	; (8000ddc <__aeabi_dsub+0x344>)
 8000bc2:	3601      	adds	r6, #1
 8000bc4:	429e      	cmp	r6, r3
 8000bc6:	d100      	bne.n	8000bca <__aeabi_dsub+0x132>
 8000bc8:	e0af      	b.n	8000d2a <__aeabi_dsub+0x292>
 8000bca:	4b85      	ldr	r3, [pc, #532]	; (8000de0 <__aeabi_dsub+0x348>)
 8000bcc:	2501      	movs	r5, #1
 8000bce:	401c      	ands	r4, r3
 8000bd0:	4643      	mov	r3, r8
 8000bd2:	0762      	lsls	r2, r4, #29
 8000bd4:	08ff      	lsrs	r7, r7, #3
 8000bd6:	0264      	lsls	r4, r4, #9
 8000bd8:	0576      	lsls	r6, r6, #21
 8000bda:	4317      	orrs	r7, r2
 8000bdc:	0b24      	lsrs	r4, r4, #12
 8000bde:	0d76      	lsrs	r6, r6, #21
 8000be0:	401d      	ands	r5, r3
 8000be2:	2100      	movs	r1, #0
 8000be4:	0324      	lsls	r4, r4, #12
 8000be6:	0b23      	lsrs	r3, r4, #12
 8000be8:	0d0c      	lsrs	r4, r1, #20
 8000bea:	4a7e      	ldr	r2, [pc, #504]	; (8000de4 <__aeabi_dsub+0x34c>)
 8000bec:	0524      	lsls	r4, r4, #20
 8000bee:	431c      	orrs	r4, r3
 8000bf0:	4014      	ands	r4, r2
 8000bf2:	0533      	lsls	r3, r6, #20
 8000bf4:	4323      	orrs	r3, r4
 8000bf6:	005b      	lsls	r3, r3, #1
 8000bf8:	07ed      	lsls	r5, r5, #31
 8000bfa:	085b      	lsrs	r3, r3, #1
 8000bfc:	432b      	orrs	r3, r5
 8000bfe:	0038      	movs	r0, r7
 8000c00:	0019      	movs	r1, r3
 8000c02:	bc1c      	pop	{r2, r3, r4}
 8000c04:	4690      	mov	r8, r2
 8000c06:	4699      	mov	r9, r3
 8000c08:	46a2      	mov	sl, r4
 8000c0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c0c:	2501      	movs	r5, #1
 8000c0e:	4643      	mov	r3, r8
 8000c10:	0762      	lsls	r2, r4, #29
 8000c12:	08ff      	lsrs	r7, r7, #3
 8000c14:	4317      	orrs	r7, r2
 8000c16:	08e4      	lsrs	r4, r4, #3
 8000c18:	401d      	ands	r5, r3
 8000c1a:	4b70      	ldr	r3, [pc, #448]	; (8000ddc <__aeabi_dsub+0x344>)
 8000c1c:	429e      	cmp	r6, r3
 8000c1e:	d036      	beq.n	8000c8e <__aeabi_dsub+0x1f6>
 8000c20:	0324      	lsls	r4, r4, #12
 8000c22:	0576      	lsls	r6, r6, #21
 8000c24:	0b24      	lsrs	r4, r4, #12
 8000c26:	0d76      	lsrs	r6, r6, #21
 8000c28:	e7db      	b.n	8000be2 <__aeabi_dsub+0x14a>
 8000c2a:	4663      	mov	r3, ip
 8000c2c:	1af3      	subs	r3, r6, r3
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	dc00      	bgt.n	8000c34 <__aeabi_dsub+0x19c>
 8000c32:	e094      	b.n	8000d5e <__aeabi_dsub+0x2c6>
 8000c34:	4660      	mov	r0, ip
 8000c36:	2800      	cmp	r0, #0
 8000c38:	d035      	beq.n	8000ca6 <__aeabi_dsub+0x20e>
 8000c3a:	4868      	ldr	r0, [pc, #416]	; (8000ddc <__aeabi_dsub+0x344>)
 8000c3c:	4286      	cmp	r6, r0
 8000c3e:	d0b1      	beq.n	8000ba4 <__aeabi_dsub+0x10c>
 8000c40:	2780      	movs	r7, #128	; 0x80
 8000c42:	043f      	lsls	r7, r7, #16
 8000c44:	4339      	orrs	r1, r7
 8000c46:	2b38      	cmp	r3, #56	; 0x38
 8000c48:	dc00      	bgt.n	8000c4c <__aeabi_dsub+0x1b4>
 8000c4a:	e0fd      	b.n	8000e48 <__aeabi_dsub+0x3b0>
 8000c4c:	430a      	orrs	r2, r1
 8000c4e:	0017      	movs	r7, r2
 8000c50:	2100      	movs	r1, #0
 8000c52:	1e7a      	subs	r2, r7, #1
 8000c54:	4197      	sbcs	r7, r2
 8000c56:	4457      	add	r7, sl
 8000c58:	4557      	cmp	r7, sl
 8000c5a:	4180      	sbcs	r0, r0
 8000c5c:	1909      	adds	r1, r1, r4
 8000c5e:	4244      	negs	r4, r0
 8000c60:	190c      	adds	r4, r1, r4
 8000c62:	0223      	lsls	r3, r4, #8
 8000c64:	d53a      	bpl.n	8000cdc <__aeabi_dsub+0x244>
 8000c66:	4b5d      	ldr	r3, [pc, #372]	; (8000ddc <__aeabi_dsub+0x344>)
 8000c68:	3601      	adds	r6, #1
 8000c6a:	429e      	cmp	r6, r3
 8000c6c:	d100      	bne.n	8000c70 <__aeabi_dsub+0x1d8>
 8000c6e:	e14b      	b.n	8000f08 <__aeabi_dsub+0x470>
 8000c70:	2201      	movs	r2, #1
 8000c72:	4b5b      	ldr	r3, [pc, #364]	; (8000de0 <__aeabi_dsub+0x348>)
 8000c74:	401c      	ands	r4, r3
 8000c76:	087b      	lsrs	r3, r7, #1
 8000c78:	4017      	ands	r7, r2
 8000c7a:	431f      	orrs	r7, r3
 8000c7c:	07e2      	lsls	r2, r4, #31
 8000c7e:	4317      	orrs	r7, r2
 8000c80:	0864      	lsrs	r4, r4, #1
 8000c82:	e78f      	b.n	8000ba4 <__aeabi_dsub+0x10c>
 8000c84:	0008      	movs	r0, r1
 8000c86:	4310      	orrs	r0, r2
 8000c88:	d000      	beq.n	8000c8c <__aeabi_dsub+0x1f4>
 8000c8a:	e724      	b.n	8000ad6 <__aeabi_dsub+0x3e>
 8000c8c:	e721      	b.n	8000ad2 <__aeabi_dsub+0x3a>
 8000c8e:	0023      	movs	r3, r4
 8000c90:	433b      	orrs	r3, r7
 8000c92:	d100      	bne.n	8000c96 <__aeabi_dsub+0x1fe>
 8000c94:	e1b9      	b.n	800100a <__aeabi_dsub+0x572>
 8000c96:	2280      	movs	r2, #128	; 0x80
 8000c98:	0312      	lsls	r2, r2, #12
 8000c9a:	4314      	orrs	r4, r2
 8000c9c:	0324      	lsls	r4, r4, #12
 8000c9e:	0b24      	lsrs	r4, r4, #12
 8000ca0:	e79f      	b.n	8000be2 <__aeabi_dsub+0x14a>
 8000ca2:	002e      	movs	r6, r5
 8000ca4:	e77e      	b.n	8000ba4 <__aeabi_dsub+0x10c>
 8000ca6:	0008      	movs	r0, r1
 8000ca8:	4310      	orrs	r0, r2
 8000caa:	d100      	bne.n	8000cae <__aeabi_dsub+0x216>
 8000cac:	e0ca      	b.n	8000e44 <__aeabi_dsub+0x3ac>
 8000cae:	1e58      	subs	r0, r3, #1
 8000cb0:	4684      	mov	ip, r0
 8000cb2:	2800      	cmp	r0, #0
 8000cb4:	d000      	beq.n	8000cb8 <__aeabi_dsub+0x220>
 8000cb6:	e0e7      	b.n	8000e88 <__aeabi_dsub+0x3f0>
 8000cb8:	4452      	add	r2, sl
 8000cba:	4552      	cmp	r2, sl
 8000cbc:	4180      	sbcs	r0, r0
 8000cbe:	1864      	adds	r4, r4, r1
 8000cc0:	4240      	negs	r0, r0
 8000cc2:	1824      	adds	r4, r4, r0
 8000cc4:	0017      	movs	r7, r2
 8000cc6:	2601      	movs	r6, #1
 8000cc8:	0223      	lsls	r3, r4, #8
 8000cca:	d507      	bpl.n	8000cdc <__aeabi_dsub+0x244>
 8000ccc:	2602      	movs	r6, #2
 8000cce:	e7cf      	b.n	8000c70 <__aeabi_dsub+0x1d8>
 8000cd0:	4664      	mov	r4, ip
 8000cd2:	432c      	orrs	r4, r5
 8000cd4:	d100      	bne.n	8000cd8 <__aeabi_dsub+0x240>
 8000cd6:	e1b3      	b.n	8001040 <__aeabi_dsub+0x5a8>
 8000cd8:	002c      	movs	r4, r5
 8000cda:	4667      	mov	r7, ip
 8000cdc:	077b      	lsls	r3, r7, #29
 8000cde:	d000      	beq.n	8000ce2 <__aeabi_dsub+0x24a>
 8000ce0:	e762      	b.n	8000ba8 <__aeabi_dsub+0x110>
 8000ce2:	0763      	lsls	r3, r4, #29
 8000ce4:	08ff      	lsrs	r7, r7, #3
 8000ce6:	431f      	orrs	r7, r3
 8000ce8:	2501      	movs	r5, #1
 8000cea:	4643      	mov	r3, r8
 8000cec:	08e4      	lsrs	r4, r4, #3
 8000cee:	401d      	ands	r5, r3
 8000cf0:	e793      	b.n	8000c1a <__aeabi_dsub+0x182>
 8000cf2:	2d00      	cmp	r5, #0
 8000cf4:	d178      	bne.n	8000de8 <__aeabi_dsub+0x350>
 8000cf6:	1c75      	adds	r5, r6, #1
 8000cf8:	056d      	lsls	r5, r5, #21
 8000cfa:	0d6d      	lsrs	r5, r5, #21
 8000cfc:	2d01      	cmp	r5, #1
 8000cfe:	dc00      	bgt.n	8000d02 <__aeabi_dsub+0x26a>
 8000d00:	e0f2      	b.n	8000ee8 <__aeabi_dsub+0x450>
 8000d02:	4650      	mov	r0, sl
 8000d04:	1a80      	subs	r0, r0, r2
 8000d06:	4582      	cmp	sl, r0
 8000d08:	41bf      	sbcs	r7, r7
 8000d0a:	1a65      	subs	r5, r4, r1
 8000d0c:	427f      	negs	r7, r7
 8000d0e:	1bed      	subs	r5, r5, r7
 8000d10:	4684      	mov	ip, r0
 8000d12:	0228      	lsls	r0, r5, #8
 8000d14:	d400      	bmi.n	8000d18 <__aeabi_dsub+0x280>
 8000d16:	e08c      	b.n	8000e32 <__aeabi_dsub+0x39a>
 8000d18:	4650      	mov	r0, sl
 8000d1a:	1a17      	subs	r7, r2, r0
 8000d1c:	42ba      	cmp	r2, r7
 8000d1e:	4192      	sbcs	r2, r2
 8000d20:	1b0c      	subs	r4, r1, r4
 8000d22:	4255      	negs	r5, r2
 8000d24:	1b65      	subs	r5, r4, r5
 8000d26:	4698      	mov	r8, r3
 8000d28:	e714      	b.n	8000b54 <__aeabi_dsub+0xbc>
 8000d2a:	2501      	movs	r5, #1
 8000d2c:	4643      	mov	r3, r8
 8000d2e:	2400      	movs	r4, #0
 8000d30:	401d      	ands	r5, r3
 8000d32:	2700      	movs	r7, #0
 8000d34:	e755      	b.n	8000be2 <__aeabi_dsub+0x14a>
 8000d36:	4c2a      	ldr	r4, [pc, #168]	; (8000de0 <__aeabi_dsub+0x348>)
 8000d38:	1af6      	subs	r6, r6, r3
 8000d3a:	402c      	ands	r4, r5
 8000d3c:	e732      	b.n	8000ba4 <__aeabi_dsub+0x10c>
 8000d3e:	003d      	movs	r5, r7
 8000d40:	3828      	subs	r0, #40	; 0x28
 8000d42:	4085      	lsls	r5, r0
 8000d44:	2700      	movs	r7, #0
 8000d46:	e717      	b.n	8000b78 <__aeabi_dsub+0xe0>
 8000d48:	0038      	movs	r0, r7
 8000d4a:	f000 fa65 	bl	8001218 <__clzsi2>
 8000d4e:	3020      	adds	r0, #32
 8000d50:	e706      	b.n	8000b60 <__aeabi_dsub+0xc8>
 8000d52:	430a      	orrs	r2, r1
 8000d54:	0017      	movs	r7, r2
 8000d56:	2100      	movs	r1, #0
 8000d58:	1e7a      	subs	r2, r7, #1
 8000d5a:	4197      	sbcs	r7, r2
 8000d5c:	e6ee      	b.n	8000b3c <__aeabi_dsub+0xa4>
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d000      	beq.n	8000d64 <__aeabi_dsub+0x2cc>
 8000d62:	e0e5      	b.n	8000f30 <__aeabi_dsub+0x498>
 8000d64:	1c73      	adds	r3, r6, #1
 8000d66:	469c      	mov	ip, r3
 8000d68:	055b      	lsls	r3, r3, #21
 8000d6a:	0d5b      	lsrs	r3, r3, #21
 8000d6c:	2b01      	cmp	r3, #1
 8000d6e:	dc00      	bgt.n	8000d72 <__aeabi_dsub+0x2da>
 8000d70:	e09f      	b.n	8000eb2 <__aeabi_dsub+0x41a>
 8000d72:	4b1a      	ldr	r3, [pc, #104]	; (8000ddc <__aeabi_dsub+0x344>)
 8000d74:	459c      	cmp	ip, r3
 8000d76:	d100      	bne.n	8000d7a <__aeabi_dsub+0x2e2>
 8000d78:	e0c5      	b.n	8000f06 <__aeabi_dsub+0x46e>
 8000d7a:	4452      	add	r2, sl
 8000d7c:	4552      	cmp	r2, sl
 8000d7e:	4180      	sbcs	r0, r0
 8000d80:	1864      	adds	r4, r4, r1
 8000d82:	4240      	negs	r0, r0
 8000d84:	1824      	adds	r4, r4, r0
 8000d86:	07e7      	lsls	r7, r4, #31
 8000d88:	0852      	lsrs	r2, r2, #1
 8000d8a:	4317      	orrs	r7, r2
 8000d8c:	0864      	lsrs	r4, r4, #1
 8000d8e:	4666      	mov	r6, ip
 8000d90:	e708      	b.n	8000ba4 <__aeabi_dsub+0x10c>
 8000d92:	4812      	ldr	r0, [pc, #72]	; (8000ddc <__aeabi_dsub+0x344>)
 8000d94:	4285      	cmp	r5, r0
 8000d96:	d100      	bne.n	8000d9a <__aeabi_dsub+0x302>
 8000d98:	e085      	b.n	8000ea6 <__aeabi_dsub+0x40e>
 8000d9a:	001d      	movs	r5, r3
 8000d9c:	e6bc      	b.n	8000b18 <__aeabi_dsub+0x80>
 8000d9e:	0029      	movs	r1, r5
 8000da0:	3e1f      	subs	r6, #31
 8000da2:	40f1      	lsrs	r1, r6
 8000da4:	2b20      	cmp	r3, #32
 8000da6:	d100      	bne.n	8000daa <__aeabi_dsub+0x312>
 8000da8:	e07f      	b.n	8000eaa <__aeabi_dsub+0x412>
 8000daa:	2240      	movs	r2, #64	; 0x40
 8000dac:	1ad3      	subs	r3, r2, r3
 8000dae:	409d      	lsls	r5, r3
 8000db0:	432f      	orrs	r7, r5
 8000db2:	1e7d      	subs	r5, r7, #1
 8000db4:	41af      	sbcs	r7, r5
 8000db6:	2400      	movs	r4, #0
 8000db8:	430f      	orrs	r7, r1
 8000dba:	2600      	movs	r6, #0
 8000dbc:	e78e      	b.n	8000cdc <__aeabi_dsub+0x244>
 8000dbe:	002b      	movs	r3, r5
 8000dc0:	000f      	movs	r7, r1
 8000dc2:	3b20      	subs	r3, #32
 8000dc4:	40df      	lsrs	r7, r3
 8000dc6:	2d20      	cmp	r5, #32
 8000dc8:	d071      	beq.n	8000eae <__aeabi_dsub+0x416>
 8000dca:	2340      	movs	r3, #64	; 0x40
 8000dcc:	1b5d      	subs	r5, r3, r5
 8000dce:	40a9      	lsls	r1, r5
 8000dd0:	430a      	orrs	r2, r1
 8000dd2:	1e51      	subs	r1, r2, #1
 8000dd4:	418a      	sbcs	r2, r1
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	4317      	orrs	r7, r2
 8000dda:	e6af      	b.n	8000b3c <__aeabi_dsub+0xa4>
 8000ddc:	000007ff 	.word	0x000007ff
 8000de0:	ff7fffff 	.word	0xff7fffff
 8000de4:	800fffff 	.word	0x800fffff
 8000de8:	2e00      	cmp	r6, #0
 8000dea:	d03e      	beq.n	8000e6a <__aeabi_dsub+0x3d2>
 8000dec:	4eb3      	ldr	r6, [pc, #716]	; (80010bc <__aeabi_dsub+0x624>)
 8000dee:	45b4      	cmp	ip, r6
 8000df0:	d045      	beq.n	8000e7e <__aeabi_dsub+0x3e6>
 8000df2:	2680      	movs	r6, #128	; 0x80
 8000df4:	0436      	lsls	r6, r6, #16
 8000df6:	426d      	negs	r5, r5
 8000df8:	4334      	orrs	r4, r6
 8000dfa:	2d38      	cmp	r5, #56	; 0x38
 8000dfc:	dd00      	ble.n	8000e00 <__aeabi_dsub+0x368>
 8000dfe:	e0a8      	b.n	8000f52 <__aeabi_dsub+0x4ba>
 8000e00:	2d1f      	cmp	r5, #31
 8000e02:	dd00      	ble.n	8000e06 <__aeabi_dsub+0x36e>
 8000e04:	e11f      	b.n	8001046 <__aeabi_dsub+0x5ae>
 8000e06:	2620      	movs	r6, #32
 8000e08:	0027      	movs	r7, r4
 8000e0a:	4650      	mov	r0, sl
 8000e0c:	1b76      	subs	r6, r6, r5
 8000e0e:	40b7      	lsls	r7, r6
 8000e10:	40e8      	lsrs	r0, r5
 8000e12:	4307      	orrs	r7, r0
 8000e14:	4650      	mov	r0, sl
 8000e16:	40b0      	lsls	r0, r6
 8000e18:	1e46      	subs	r6, r0, #1
 8000e1a:	41b0      	sbcs	r0, r6
 8000e1c:	40ec      	lsrs	r4, r5
 8000e1e:	4338      	orrs	r0, r7
 8000e20:	1a17      	subs	r7, r2, r0
 8000e22:	42ba      	cmp	r2, r7
 8000e24:	4192      	sbcs	r2, r2
 8000e26:	1b0c      	subs	r4, r1, r4
 8000e28:	4252      	negs	r2, r2
 8000e2a:	1aa4      	subs	r4, r4, r2
 8000e2c:	4666      	mov	r6, ip
 8000e2e:	4698      	mov	r8, r3
 8000e30:	e68b      	b.n	8000b4a <__aeabi_dsub+0xb2>
 8000e32:	4664      	mov	r4, ip
 8000e34:	4667      	mov	r7, ip
 8000e36:	432c      	orrs	r4, r5
 8000e38:	d000      	beq.n	8000e3c <__aeabi_dsub+0x3a4>
 8000e3a:	e68b      	b.n	8000b54 <__aeabi_dsub+0xbc>
 8000e3c:	2500      	movs	r5, #0
 8000e3e:	2600      	movs	r6, #0
 8000e40:	2700      	movs	r7, #0
 8000e42:	e6ea      	b.n	8000c1a <__aeabi_dsub+0x182>
 8000e44:	001e      	movs	r6, r3
 8000e46:	e6ad      	b.n	8000ba4 <__aeabi_dsub+0x10c>
 8000e48:	2b1f      	cmp	r3, #31
 8000e4a:	dc60      	bgt.n	8000f0e <__aeabi_dsub+0x476>
 8000e4c:	2720      	movs	r7, #32
 8000e4e:	1af8      	subs	r0, r7, r3
 8000e50:	000f      	movs	r7, r1
 8000e52:	4684      	mov	ip, r0
 8000e54:	4087      	lsls	r7, r0
 8000e56:	0010      	movs	r0, r2
 8000e58:	40d8      	lsrs	r0, r3
 8000e5a:	4307      	orrs	r7, r0
 8000e5c:	4660      	mov	r0, ip
 8000e5e:	4082      	lsls	r2, r0
 8000e60:	1e50      	subs	r0, r2, #1
 8000e62:	4182      	sbcs	r2, r0
 8000e64:	40d9      	lsrs	r1, r3
 8000e66:	4317      	orrs	r7, r2
 8000e68:	e6f5      	b.n	8000c56 <__aeabi_dsub+0x1be>
 8000e6a:	0026      	movs	r6, r4
 8000e6c:	4650      	mov	r0, sl
 8000e6e:	4306      	orrs	r6, r0
 8000e70:	d005      	beq.n	8000e7e <__aeabi_dsub+0x3e6>
 8000e72:	43ed      	mvns	r5, r5
 8000e74:	2d00      	cmp	r5, #0
 8000e76:	d0d3      	beq.n	8000e20 <__aeabi_dsub+0x388>
 8000e78:	4e90      	ldr	r6, [pc, #576]	; (80010bc <__aeabi_dsub+0x624>)
 8000e7a:	45b4      	cmp	ip, r6
 8000e7c:	d1bd      	bne.n	8000dfa <__aeabi_dsub+0x362>
 8000e7e:	000c      	movs	r4, r1
 8000e80:	0017      	movs	r7, r2
 8000e82:	4666      	mov	r6, ip
 8000e84:	4698      	mov	r8, r3
 8000e86:	e68d      	b.n	8000ba4 <__aeabi_dsub+0x10c>
 8000e88:	488c      	ldr	r0, [pc, #560]	; (80010bc <__aeabi_dsub+0x624>)
 8000e8a:	4283      	cmp	r3, r0
 8000e8c:	d00b      	beq.n	8000ea6 <__aeabi_dsub+0x40e>
 8000e8e:	4663      	mov	r3, ip
 8000e90:	e6d9      	b.n	8000c46 <__aeabi_dsub+0x1ae>
 8000e92:	2d00      	cmp	r5, #0
 8000e94:	d000      	beq.n	8000e98 <__aeabi_dsub+0x400>
 8000e96:	e096      	b.n	8000fc6 <__aeabi_dsub+0x52e>
 8000e98:	0008      	movs	r0, r1
 8000e9a:	4310      	orrs	r0, r2
 8000e9c:	d100      	bne.n	8000ea0 <__aeabi_dsub+0x408>
 8000e9e:	e0e2      	b.n	8001066 <__aeabi_dsub+0x5ce>
 8000ea0:	000c      	movs	r4, r1
 8000ea2:	0017      	movs	r7, r2
 8000ea4:	4698      	mov	r8, r3
 8000ea6:	4e85      	ldr	r6, [pc, #532]	; (80010bc <__aeabi_dsub+0x624>)
 8000ea8:	e67c      	b.n	8000ba4 <__aeabi_dsub+0x10c>
 8000eaa:	2500      	movs	r5, #0
 8000eac:	e780      	b.n	8000db0 <__aeabi_dsub+0x318>
 8000eae:	2100      	movs	r1, #0
 8000eb0:	e78e      	b.n	8000dd0 <__aeabi_dsub+0x338>
 8000eb2:	0023      	movs	r3, r4
 8000eb4:	4650      	mov	r0, sl
 8000eb6:	4303      	orrs	r3, r0
 8000eb8:	2e00      	cmp	r6, #0
 8000eba:	d000      	beq.n	8000ebe <__aeabi_dsub+0x426>
 8000ebc:	e0a8      	b.n	8001010 <__aeabi_dsub+0x578>
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d100      	bne.n	8000ec4 <__aeabi_dsub+0x42c>
 8000ec2:	e0de      	b.n	8001082 <__aeabi_dsub+0x5ea>
 8000ec4:	000b      	movs	r3, r1
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	d100      	bne.n	8000ecc <__aeabi_dsub+0x434>
 8000eca:	e66b      	b.n	8000ba4 <__aeabi_dsub+0x10c>
 8000ecc:	4452      	add	r2, sl
 8000ece:	4552      	cmp	r2, sl
 8000ed0:	4180      	sbcs	r0, r0
 8000ed2:	1864      	adds	r4, r4, r1
 8000ed4:	4240      	negs	r0, r0
 8000ed6:	1824      	adds	r4, r4, r0
 8000ed8:	0017      	movs	r7, r2
 8000eda:	0223      	lsls	r3, r4, #8
 8000edc:	d400      	bmi.n	8000ee0 <__aeabi_dsub+0x448>
 8000ede:	e6fd      	b.n	8000cdc <__aeabi_dsub+0x244>
 8000ee0:	4b77      	ldr	r3, [pc, #476]	; (80010c0 <__aeabi_dsub+0x628>)
 8000ee2:	4666      	mov	r6, ip
 8000ee4:	401c      	ands	r4, r3
 8000ee6:	e65d      	b.n	8000ba4 <__aeabi_dsub+0x10c>
 8000ee8:	0025      	movs	r5, r4
 8000eea:	4650      	mov	r0, sl
 8000eec:	4305      	orrs	r5, r0
 8000eee:	2e00      	cmp	r6, #0
 8000ef0:	d1cf      	bne.n	8000e92 <__aeabi_dsub+0x3fa>
 8000ef2:	2d00      	cmp	r5, #0
 8000ef4:	d14f      	bne.n	8000f96 <__aeabi_dsub+0x4fe>
 8000ef6:	000c      	movs	r4, r1
 8000ef8:	4314      	orrs	r4, r2
 8000efa:	d100      	bne.n	8000efe <__aeabi_dsub+0x466>
 8000efc:	e0a0      	b.n	8001040 <__aeabi_dsub+0x5a8>
 8000efe:	000c      	movs	r4, r1
 8000f00:	0017      	movs	r7, r2
 8000f02:	4698      	mov	r8, r3
 8000f04:	e64e      	b.n	8000ba4 <__aeabi_dsub+0x10c>
 8000f06:	4666      	mov	r6, ip
 8000f08:	2400      	movs	r4, #0
 8000f0a:	2700      	movs	r7, #0
 8000f0c:	e685      	b.n	8000c1a <__aeabi_dsub+0x182>
 8000f0e:	001f      	movs	r7, r3
 8000f10:	0008      	movs	r0, r1
 8000f12:	3f20      	subs	r7, #32
 8000f14:	40f8      	lsrs	r0, r7
 8000f16:	0007      	movs	r7, r0
 8000f18:	2b20      	cmp	r3, #32
 8000f1a:	d100      	bne.n	8000f1e <__aeabi_dsub+0x486>
 8000f1c:	e08e      	b.n	800103c <__aeabi_dsub+0x5a4>
 8000f1e:	2040      	movs	r0, #64	; 0x40
 8000f20:	1ac3      	subs	r3, r0, r3
 8000f22:	4099      	lsls	r1, r3
 8000f24:	430a      	orrs	r2, r1
 8000f26:	1e51      	subs	r1, r2, #1
 8000f28:	418a      	sbcs	r2, r1
 8000f2a:	2100      	movs	r1, #0
 8000f2c:	4317      	orrs	r7, r2
 8000f2e:	e692      	b.n	8000c56 <__aeabi_dsub+0x1be>
 8000f30:	2e00      	cmp	r6, #0
 8000f32:	d114      	bne.n	8000f5e <__aeabi_dsub+0x4c6>
 8000f34:	0026      	movs	r6, r4
 8000f36:	4650      	mov	r0, sl
 8000f38:	4306      	orrs	r6, r0
 8000f3a:	d062      	beq.n	8001002 <__aeabi_dsub+0x56a>
 8000f3c:	43db      	mvns	r3, r3
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d15c      	bne.n	8000ffc <__aeabi_dsub+0x564>
 8000f42:	1887      	adds	r7, r0, r2
 8000f44:	4297      	cmp	r7, r2
 8000f46:	4192      	sbcs	r2, r2
 8000f48:	1864      	adds	r4, r4, r1
 8000f4a:	4252      	negs	r2, r2
 8000f4c:	18a4      	adds	r4, r4, r2
 8000f4e:	4666      	mov	r6, ip
 8000f50:	e687      	b.n	8000c62 <__aeabi_dsub+0x1ca>
 8000f52:	4650      	mov	r0, sl
 8000f54:	4320      	orrs	r0, r4
 8000f56:	1e44      	subs	r4, r0, #1
 8000f58:	41a0      	sbcs	r0, r4
 8000f5a:	2400      	movs	r4, #0
 8000f5c:	e760      	b.n	8000e20 <__aeabi_dsub+0x388>
 8000f5e:	4e57      	ldr	r6, [pc, #348]	; (80010bc <__aeabi_dsub+0x624>)
 8000f60:	45b4      	cmp	ip, r6
 8000f62:	d04e      	beq.n	8001002 <__aeabi_dsub+0x56a>
 8000f64:	2680      	movs	r6, #128	; 0x80
 8000f66:	0436      	lsls	r6, r6, #16
 8000f68:	425b      	negs	r3, r3
 8000f6a:	4334      	orrs	r4, r6
 8000f6c:	2b38      	cmp	r3, #56	; 0x38
 8000f6e:	dd00      	ble.n	8000f72 <__aeabi_dsub+0x4da>
 8000f70:	e07f      	b.n	8001072 <__aeabi_dsub+0x5da>
 8000f72:	2b1f      	cmp	r3, #31
 8000f74:	dd00      	ble.n	8000f78 <__aeabi_dsub+0x4e0>
 8000f76:	e08b      	b.n	8001090 <__aeabi_dsub+0x5f8>
 8000f78:	2620      	movs	r6, #32
 8000f7a:	0027      	movs	r7, r4
 8000f7c:	4650      	mov	r0, sl
 8000f7e:	1af6      	subs	r6, r6, r3
 8000f80:	40b7      	lsls	r7, r6
 8000f82:	40d8      	lsrs	r0, r3
 8000f84:	4307      	orrs	r7, r0
 8000f86:	4650      	mov	r0, sl
 8000f88:	40b0      	lsls	r0, r6
 8000f8a:	1e46      	subs	r6, r0, #1
 8000f8c:	41b0      	sbcs	r0, r6
 8000f8e:	4307      	orrs	r7, r0
 8000f90:	40dc      	lsrs	r4, r3
 8000f92:	18bf      	adds	r7, r7, r2
 8000f94:	e7d6      	b.n	8000f44 <__aeabi_dsub+0x4ac>
 8000f96:	000d      	movs	r5, r1
 8000f98:	4315      	orrs	r5, r2
 8000f9a:	d100      	bne.n	8000f9e <__aeabi_dsub+0x506>
 8000f9c:	e602      	b.n	8000ba4 <__aeabi_dsub+0x10c>
 8000f9e:	4650      	mov	r0, sl
 8000fa0:	1a80      	subs	r0, r0, r2
 8000fa2:	4582      	cmp	sl, r0
 8000fa4:	41bf      	sbcs	r7, r7
 8000fa6:	1a65      	subs	r5, r4, r1
 8000fa8:	427f      	negs	r7, r7
 8000faa:	1bed      	subs	r5, r5, r7
 8000fac:	4684      	mov	ip, r0
 8000fae:	0228      	lsls	r0, r5, #8
 8000fb0:	d400      	bmi.n	8000fb4 <__aeabi_dsub+0x51c>
 8000fb2:	e68d      	b.n	8000cd0 <__aeabi_dsub+0x238>
 8000fb4:	4650      	mov	r0, sl
 8000fb6:	1a17      	subs	r7, r2, r0
 8000fb8:	42ba      	cmp	r2, r7
 8000fba:	4192      	sbcs	r2, r2
 8000fbc:	1b0c      	subs	r4, r1, r4
 8000fbe:	4252      	negs	r2, r2
 8000fc0:	1aa4      	subs	r4, r4, r2
 8000fc2:	4698      	mov	r8, r3
 8000fc4:	e5ee      	b.n	8000ba4 <__aeabi_dsub+0x10c>
 8000fc6:	000d      	movs	r5, r1
 8000fc8:	4315      	orrs	r5, r2
 8000fca:	d100      	bne.n	8000fce <__aeabi_dsub+0x536>
 8000fcc:	e76b      	b.n	8000ea6 <__aeabi_dsub+0x40e>
 8000fce:	4650      	mov	r0, sl
 8000fd0:	0767      	lsls	r7, r4, #29
 8000fd2:	08c0      	lsrs	r0, r0, #3
 8000fd4:	4307      	orrs	r7, r0
 8000fd6:	2080      	movs	r0, #128	; 0x80
 8000fd8:	08e4      	lsrs	r4, r4, #3
 8000fda:	0300      	lsls	r0, r0, #12
 8000fdc:	4204      	tst	r4, r0
 8000fde:	d007      	beq.n	8000ff0 <__aeabi_dsub+0x558>
 8000fe0:	08cd      	lsrs	r5, r1, #3
 8000fe2:	4205      	tst	r5, r0
 8000fe4:	d104      	bne.n	8000ff0 <__aeabi_dsub+0x558>
 8000fe6:	002c      	movs	r4, r5
 8000fe8:	4698      	mov	r8, r3
 8000fea:	08d7      	lsrs	r7, r2, #3
 8000fec:	0749      	lsls	r1, r1, #29
 8000fee:	430f      	orrs	r7, r1
 8000ff0:	0f7b      	lsrs	r3, r7, #29
 8000ff2:	00e4      	lsls	r4, r4, #3
 8000ff4:	431c      	orrs	r4, r3
 8000ff6:	00ff      	lsls	r7, r7, #3
 8000ff8:	4e30      	ldr	r6, [pc, #192]	; (80010bc <__aeabi_dsub+0x624>)
 8000ffa:	e5d3      	b.n	8000ba4 <__aeabi_dsub+0x10c>
 8000ffc:	4e2f      	ldr	r6, [pc, #188]	; (80010bc <__aeabi_dsub+0x624>)
 8000ffe:	45b4      	cmp	ip, r6
 8001000:	d1b4      	bne.n	8000f6c <__aeabi_dsub+0x4d4>
 8001002:	000c      	movs	r4, r1
 8001004:	0017      	movs	r7, r2
 8001006:	4666      	mov	r6, ip
 8001008:	e5cc      	b.n	8000ba4 <__aeabi_dsub+0x10c>
 800100a:	2700      	movs	r7, #0
 800100c:	2400      	movs	r4, #0
 800100e:	e5e8      	b.n	8000be2 <__aeabi_dsub+0x14a>
 8001010:	2b00      	cmp	r3, #0
 8001012:	d039      	beq.n	8001088 <__aeabi_dsub+0x5f0>
 8001014:	000b      	movs	r3, r1
 8001016:	4313      	orrs	r3, r2
 8001018:	d100      	bne.n	800101c <__aeabi_dsub+0x584>
 800101a:	e744      	b.n	8000ea6 <__aeabi_dsub+0x40e>
 800101c:	08c0      	lsrs	r0, r0, #3
 800101e:	0767      	lsls	r7, r4, #29
 8001020:	4307      	orrs	r7, r0
 8001022:	2080      	movs	r0, #128	; 0x80
 8001024:	08e4      	lsrs	r4, r4, #3
 8001026:	0300      	lsls	r0, r0, #12
 8001028:	4204      	tst	r4, r0
 800102a:	d0e1      	beq.n	8000ff0 <__aeabi_dsub+0x558>
 800102c:	08cb      	lsrs	r3, r1, #3
 800102e:	4203      	tst	r3, r0
 8001030:	d1de      	bne.n	8000ff0 <__aeabi_dsub+0x558>
 8001032:	08d7      	lsrs	r7, r2, #3
 8001034:	0749      	lsls	r1, r1, #29
 8001036:	430f      	orrs	r7, r1
 8001038:	001c      	movs	r4, r3
 800103a:	e7d9      	b.n	8000ff0 <__aeabi_dsub+0x558>
 800103c:	2100      	movs	r1, #0
 800103e:	e771      	b.n	8000f24 <__aeabi_dsub+0x48c>
 8001040:	2500      	movs	r5, #0
 8001042:	2700      	movs	r7, #0
 8001044:	e5e9      	b.n	8000c1a <__aeabi_dsub+0x182>
 8001046:	002e      	movs	r6, r5
 8001048:	0027      	movs	r7, r4
 800104a:	3e20      	subs	r6, #32
 800104c:	40f7      	lsrs	r7, r6
 800104e:	2d20      	cmp	r5, #32
 8001050:	d02f      	beq.n	80010b2 <__aeabi_dsub+0x61a>
 8001052:	2640      	movs	r6, #64	; 0x40
 8001054:	1b75      	subs	r5, r6, r5
 8001056:	40ac      	lsls	r4, r5
 8001058:	4650      	mov	r0, sl
 800105a:	4320      	orrs	r0, r4
 800105c:	1e44      	subs	r4, r0, #1
 800105e:	41a0      	sbcs	r0, r4
 8001060:	2400      	movs	r4, #0
 8001062:	4338      	orrs	r0, r7
 8001064:	e6dc      	b.n	8000e20 <__aeabi_dsub+0x388>
 8001066:	2480      	movs	r4, #128	; 0x80
 8001068:	2500      	movs	r5, #0
 800106a:	0324      	lsls	r4, r4, #12
 800106c:	4e13      	ldr	r6, [pc, #76]	; (80010bc <__aeabi_dsub+0x624>)
 800106e:	2700      	movs	r7, #0
 8001070:	e5d3      	b.n	8000c1a <__aeabi_dsub+0x182>
 8001072:	4650      	mov	r0, sl
 8001074:	4320      	orrs	r0, r4
 8001076:	0007      	movs	r7, r0
 8001078:	1e78      	subs	r0, r7, #1
 800107a:	4187      	sbcs	r7, r0
 800107c:	2400      	movs	r4, #0
 800107e:	18bf      	adds	r7, r7, r2
 8001080:	e760      	b.n	8000f44 <__aeabi_dsub+0x4ac>
 8001082:	000c      	movs	r4, r1
 8001084:	0017      	movs	r7, r2
 8001086:	e58d      	b.n	8000ba4 <__aeabi_dsub+0x10c>
 8001088:	000c      	movs	r4, r1
 800108a:	0017      	movs	r7, r2
 800108c:	4e0b      	ldr	r6, [pc, #44]	; (80010bc <__aeabi_dsub+0x624>)
 800108e:	e589      	b.n	8000ba4 <__aeabi_dsub+0x10c>
 8001090:	001e      	movs	r6, r3
 8001092:	0027      	movs	r7, r4
 8001094:	3e20      	subs	r6, #32
 8001096:	40f7      	lsrs	r7, r6
 8001098:	2b20      	cmp	r3, #32
 800109a:	d00c      	beq.n	80010b6 <__aeabi_dsub+0x61e>
 800109c:	2640      	movs	r6, #64	; 0x40
 800109e:	1af3      	subs	r3, r6, r3
 80010a0:	409c      	lsls	r4, r3
 80010a2:	4650      	mov	r0, sl
 80010a4:	4320      	orrs	r0, r4
 80010a6:	1e44      	subs	r4, r0, #1
 80010a8:	41a0      	sbcs	r0, r4
 80010aa:	4307      	orrs	r7, r0
 80010ac:	2400      	movs	r4, #0
 80010ae:	18bf      	adds	r7, r7, r2
 80010b0:	e748      	b.n	8000f44 <__aeabi_dsub+0x4ac>
 80010b2:	2400      	movs	r4, #0
 80010b4:	e7d0      	b.n	8001058 <__aeabi_dsub+0x5c0>
 80010b6:	2400      	movs	r4, #0
 80010b8:	e7f3      	b.n	80010a2 <__aeabi_dsub+0x60a>
 80010ba:	46c0      	nop			; (mov r8, r8)
 80010bc:	000007ff 	.word	0x000007ff
 80010c0:	ff7fffff 	.word	0xff7fffff

080010c4 <__aeabi_d2iz>:
 80010c4:	b530      	push	{r4, r5, lr}
 80010c6:	4d13      	ldr	r5, [pc, #76]	; (8001114 <__aeabi_d2iz+0x50>)
 80010c8:	030a      	lsls	r2, r1, #12
 80010ca:	004b      	lsls	r3, r1, #1
 80010cc:	0b12      	lsrs	r2, r2, #12
 80010ce:	0d5b      	lsrs	r3, r3, #21
 80010d0:	0fc9      	lsrs	r1, r1, #31
 80010d2:	2400      	movs	r4, #0
 80010d4:	42ab      	cmp	r3, r5
 80010d6:	dd10      	ble.n	80010fa <__aeabi_d2iz+0x36>
 80010d8:	4c0f      	ldr	r4, [pc, #60]	; (8001118 <__aeabi_d2iz+0x54>)
 80010da:	42a3      	cmp	r3, r4
 80010dc:	dc0f      	bgt.n	80010fe <__aeabi_d2iz+0x3a>
 80010de:	2480      	movs	r4, #128	; 0x80
 80010e0:	4d0e      	ldr	r5, [pc, #56]	; (800111c <__aeabi_d2iz+0x58>)
 80010e2:	0364      	lsls	r4, r4, #13
 80010e4:	4322      	orrs	r2, r4
 80010e6:	1aed      	subs	r5, r5, r3
 80010e8:	2d1f      	cmp	r5, #31
 80010ea:	dd0b      	ble.n	8001104 <__aeabi_d2iz+0x40>
 80010ec:	480c      	ldr	r0, [pc, #48]	; (8001120 <__aeabi_d2iz+0x5c>)
 80010ee:	1ac3      	subs	r3, r0, r3
 80010f0:	40da      	lsrs	r2, r3
 80010f2:	4254      	negs	r4, r2
 80010f4:	2900      	cmp	r1, #0
 80010f6:	d100      	bne.n	80010fa <__aeabi_d2iz+0x36>
 80010f8:	0014      	movs	r4, r2
 80010fa:	0020      	movs	r0, r4
 80010fc:	bd30      	pop	{r4, r5, pc}
 80010fe:	4b09      	ldr	r3, [pc, #36]	; (8001124 <__aeabi_d2iz+0x60>)
 8001100:	18cc      	adds	r4, r1, r3
 8001102:	e7fa      	b.n	80010fa <__aeabi_d2iz+0x36>
 8001104:	4c08      	ldr	r4, [pc, #32]	; (8001128 <__aeabi_d2iz+0x64>)
 8001106:	40e8      	lsrs	r0, r5
 8001108:	46a4      	mov	ip, r4
 800110a:	4463      	add	r3, ip
 800110c:	409a      	lsls	r2, r3
 800110e:	4302      	orrs	r2, r0
 8001110:	e7ef      	b.n	80010f2 <__aeabi_d2iz+0x2e>
 8001112:	46c0      	nop			; (mov r8, r8)
 8001114:	000003fe 	.word	0x000003fe
 8001118:	0000041d 	.word	0x0000041d
 800111c:	00000433 	.word	0x00000433
 8001120:	00000413 	.word	0x00000413
 8001124:	7fffffff 	.word	0x7fffffff
 8001128:	fffffbed 	.word	0xfffffbed

0800112c <__aeabi_ui2d>:
 800112c:	b510      	push	{r4, lr}
 800112e:	1e04      	subs	r4, r0, #0
 8001130:	d028      	beq.n	8001184 <__aeabi_ui2d+0x58>
 8001132:	f000 f871 	bl	8001218 <__clzsi2>
 8001136:	4b15      	ldr	r3, [pc, #84]	; (800118c <__aeabi_ui2d+0x60>)
 8001138:	4a15      	ldr	r2, [pc, #84]	; (8001190 <__aeabi_ui2d+0x64>)
 800113a:	1a1b      	subs	r3, r3, r0
 800113c:	1ad2      	subs	r2, r2, r3
 800113e:	2a1f      	cmp	r2, #31
 8001140:	dd15      	ble.n	800116e <__aeabi_ui2d+0x42>
 8001142:	4a14      	ldr	r2, [pc, #80]	; (8001194 <__aeabi_ui2d+0x68>)
 8001144:	1ad2      	subs	r2, r2, r3
 8001146:	4094      	lsls	r4, r2
 8001148:	2200      	movs	r2, #0
 800114a:	0324      	lsls	r4, r4, #12
 800114c:	055b      	lsls	r3, r3, #21
 800114e:	0b24      	lsrs	r4, r4, #12
 8001150:	0d5b      	lsrs	r3, r3, #21
 8001152:	2100      	movs	r1, #0
 8001154:	0010      	movs	r0, r2
 8001156:	0324      	lsls	r4, r4, #12
 8001158:	0d0a      	lsrs	r2, r1, #20
 800115a:	0b24      	lsrs	r4, r4, #12
 800115c:	0512      	lsls	r2, r2, #20
 800115e:	4322      	orrs	r2, r4
 8001160:	4c0d      	ldr	r4, [pc, #52]	; (8001198 <__aeabi_ui2d+0x6c>)
 8001162:	051b      	lsls	r3, r3, #20
 8001164:	4022      	ands	r2, r4
 8001166:	4313      	orrs	r3, r2
 8001168:	005b      	lsls	r3, r3, #1
 800116a:	0859      	lsrs	r1, r3, #1
 800116c:	bd10      	pop	{r4, pc}
 800116e:	0021      	movs	r1, r4
 8001170:	4091      	lsls	r1, r2
 8001172:	000a      	movs	r2, r1
 8001174:	210b      	movs	r1, #11
 8001176:	1a08      	subs	r0, r1, r0
 8001178:	40c4      	lsrs	r4, r0
 800117a:	055b      	lsls	r3, r3, #21
 800117c:	0324      	lsls	r4, r4, #12
 800117e:	0b24      	lsrs	r4, r4, #12
 8001180:	0d5b      	lsrs	r3, r3, #21
 8001182:	e7e6      	b.n	8001152 <__aeabi_ui2d+0x26>
 8001184:	2300      	movs	r3, #0
 8001186:	2400      	movs	r4, #0
 8001188:	2200      	movs	r2, #0
 800118a:	e7e2      	b.n	8001152 <__aeabi_ui2d+0x26>
 800118c:	0000041e 	.word	0x0000041e
 8001190:	00000433 	.word	0x00000433
 8001194:	00000413 	.word	0x00000413
 8001198:	800fffff 	.word	0x800fffff

0800119c <__aeabi_cdrcmple>:
 800119c:	4684      	mov	ip, r0
 800119e:	1c10      	adds	r0, r2, #0
 80011a0:	4662      	mov	r2, ip
 80011a2:	468c      	mov	ip, r1
 80011a4:	1c19      	adds	r1, r3, #0
 80011a6:	4663      	mov	r3, ip
 80011a8:	e000      	b.n	80011ac <__aeabi_cdcmpeq>
 80011aa:	46c0      	nop			; (mov r8, r8)

080011ac <__aeabi_cdcmpeq>:
 80011ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80011ae:	f000 f8ef 	bl	8001390 <__ledf2>
 80011b2:	2800      	cmp	r0, #0
 80011b4:	d401      	bmi.n	80011ba <__aeabi_cdcmpeq+0xe>
 80011b6:	2100      	movs	r1, #0
 80011b8:	42c8      	cmn	r0, r1
 80011ba:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080011bc <__aeabi_dcmpeq>:
 80011bc:	b510      	push	{r4, lr}
 80011be:	f000 f849 	bl	8001254 <__eqdf2>
 80011c2:	4240      	negs	r0, r0
 80011c4:	3001      	adds	r0, #1
 80011c6:	bd10      	pop	{r4, pc}

080011c8 <__aeabi_dcmplt>:
 80011c8:	b510      	push	{r4, lr}
 80011ca:	f000 f8e1 	bl	8001390 <__ledf2>
 80011ce:	2800      	cmp	r0, #0
 80011d0:	db01      	blt.n	80011d6 <__aeabi_dcmplt+0xe>
 80011d2:	2000      	movs	r0, #0
 80011d4:	bd10      	pop	{r4, pc}
 80011d6:	2001      	movs	r0, #1
 80011d8:	bd10      	pop	{r4, pc}
 80011da:	46c0      	nop			; (mov r8, r8)

080011dc <__aeabi_dcmple>:
 80011dc:	b510      	push	{r4, lr}
 80011de:	f000 f8d7 	bl	8001390 <__ledf2>
 80011e2:	2800      	cmp	r0, #0
 80011e4:	dd01      	ble.n	80011ea <__aeabi_dcmple+0xe>
 80011e6:	2000      	movs	r0, #0
 80011e8:	bd10      	pop	{r4, pc}
 80011ea:	2001      	movs	r0, #1
 80011ec:	bd10      	pop	{r4, pc}
 80011ee:	46c0      	nop			; (mov r8, r8)

080011f0 <__aeabi_dcmpgt>:
 80011f0:	b510      	push	{r4, lr}
 80011f2:	f000 f869 	bl	80012c8 <__gedf2>
 80011f6:	2800      	cmp	r0, #0
 80011f8:	dc01      	bgt.n	80011fe <__aeabi_dcmpgt+0xe>
 80011fa:	2000      	movs	r0, #0
 80011fc:	bd10      	pop	{r4, pc}
 80011fe:	2001      	movs	r0, #1
 8001200:	bd10      	pop	{r4, pc}
 8001202:	46c0      	nop			; (mov r8, r8)

08001204 <__aeabi_dcmpge>:
 8001204:	b510      	push	{r4, lr}
 8001206:	f000 f85f 	bl	80012c8 <__gedf2>
 800120a:	2800      	cmp	r0, #0
 800120c:	da01      	bge.n	8001212 <__aeabi_dcmpge+0xe>
 800120e:	2000      	movs	r0, #0
 8001210:	bd10      	pop	{r4, pc}
 8001212:	2001      	movs	r0, #1
 8001214:	bd10      	pop	{r4, pc}
 8001216:	46c0      	nop			; (mov r8, r8)

08001218 <__clzsi2>:
 8001218:	211c      	movs	r1, #28
 800121a:	2301      	movs	r3, #1
 800121c:	041b      	lsls	r3, r3, #16
 800121e:	4298      	cmp	r0, r3
 8001220:	d301      	bcc.n	8001226 <__clzsi2+0xe>
 8001222:	0c00      	lsrs	r0, r0, #16
 8001224:	3910      	subs	r1, #16
 8001226:	0a1b      	lsrs	r3, r3, #8
 8001228:	4298      	cmp	r0, r3
 800122a:	d301      	bcc.n	8001230 <__clzsi2+0x18>
 800122c:	0a00      	lsrs	r0, r0, #8
 800122e:	3908      	subs	r1, #8
 8001230:	091b      	lsrs	r3, r3, #4
 8001232:	4298      	cmp	r0, r3
 8001234:	d301      	bcc.n	800123a <__clzsi2+0x22>
 8001236:	0900      	lsrs	r0, r0, #4
 8001238:	3904      	subs	r1, #4
 800123a:	a202      	add	r2, pc, #8	; (adr r2, 8001244 <__clzsi2+0x2c>)
 800123c:	5c10      	ldrb	r0, [r2, r0]
 800123e:	1840      	adds	r0, r0, r1
 8001240:	4770      	bx	lr
 8001242:	46c0      	nop			; (mov r8, r8)
 8001244:	02020304 	.word	0x02020304
 8001248:	01010101 	.word	0x01010101
	...

08001254 <__eqdf2>:
 8001254:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001256:	464f      	mov	r7, r9
 8001258:	4646      	mov	r6, r8
 800125a:	46d6      	mov	lr, sl
 800125c:	005c      	lsls	r4, r3, #1
 800125e:	b5c0      	push	{r6, r7, lr}
 8001260:	031f      	lsls	r7, r3, #12
 8001262:	0fdb      	lsrs	r3, r3, #31
 8001264:	469a      	mov	sl, r3
 8001266:	4b17      	ldr	r3, [pc, #92]	; (80012c4 <__eqdf2+0x70>)
 8001268:	030e      	lsls	r6, r1, #12
 800126a:	004d      	lsls	r5, r1, #1
 800126c:	4684      	mov	ip, r0
 800126e:	4680      	mov	r8, r0
 8001270:	0b36      	lsrs	r6, r6, #12
 8001272:	0d6d      	lsrs	r5, r5, #21
 8001274:	0fc9      	lsrs	r1, r1, #31
 8001276:	4691      	mov	r9, r2
 8001278:	0b3f      	lsrs	r7, r7, #12
 800127a:	0d64      	lsrs	r4, r4, #21
 800127c:	2001      	movs	r0, #1
 800127e:	429d      	cmp	r5, r3
 8001280:	d008      	beq.n	8001294 <__eqdf2+0x40>
 8001282:	429c      	cmp	r4, r3
 8001284:	d001      	beq.n	800128a <__eqdf2+0x36>
 8001286:	42a5      	cmp	r5, r4
 8001288:	d00b      	beq.n	80012a2 <__eqdf2+0x4e>
 800128a:	bc1c      	pop	{r2, r3, r4}
 800128c:	4690      	mov	r8, r2
 800128e:	4699      	mov	r9, r3
 8001290:	46a2      	mov	sl, r4
 8001292:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001294:	4663      	mov	r3, ip
 8001296:	4333      	orrs	r3, r6
 8001298:	d1f7      	bne.n	800128a <__eqdf2+0x36>
 800129a:	42ac      	cmp	r4, r5
 800129c:	d1f5      	bne.n	800128a <__eqdf2+0x36>
 800129e:	433a      	orrs	r2, r7
 80012a0:	d1f3      	bne.n	800128a <__eqdf2+0x36>
 80012a2:	2001      	movs	r0, #1
 80012a4:	42be      	cmp	r6, r7
 80012a6:	d1f0      	bne.n	800128a <__eqdf2+0x36>
 80012a8:	45c8      	cmp	r8, r9
 80012aa:	d1ee      	bne.n	800128a <__eqdf2+0x36>
 80012ac:	4551      	cmp	r1, sl
 80012ae:	d007      	beq.n	80012c0 <__eqdf2+0x6c>
 80012b0:	2d00      	cmp	r5, #0
 80012b2:	d1ea      	bne.n	800128a <__eqdf2+0x36>
 80012b4:	4663      	mov	r3, ip
 80012b6:	431e      	orrs	r6, r3
 80012b8:	0030      	movs	r0, r6
 80012ba:	1e46      	subs	r6, r0, #1
 80012bc:	41b0      	sbcs	r0, r6
 80012be:	e7e4      	b.n	800128a <__eqdf2+0x36>
 80012c0:	2000      	movs	r0, #0
 80012c2:	e7e2      	b.n	800128a <__eqdf2+0x36>
 80012c4:	000007ff 	.word	0x000007ff

080012c8 <__gedf2>:
 80012c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012ca:	4645      	mov	r5, r8
 80012cc:	46de      	mov	lr, fp
 80012ce:	4657      	mov	r7, sl
 80012d0:	464e      	mov	r6, r9
 80012d2:	b5e0      	push	{r5, r6, r7, lr}
 80012d4:	031f      	lsls	r7, r3, #12
 80012d6:	0b3d      	lsrs	r5, r7, #12
 80012d8:	4f2c      	ldr	r7, [pc, #176]	; (800138c <__gedf2+0xc4>)
 80012da:	030e      	lsls	r6, r1, #12
 80012dc:	004c      	lsls	r4, r1, #1
 80012de:	46ab      	mov	fp, r5
 80012e0:	005d      	lsls	r5, r3, #1
 80012e2:	4684      	mov	ip, r0
 80012e4:	0b36      	lsrs	r6, r6, #12
 80012e6:	0d64      	lsrs	r4, r4, #21
 80012e8:	0fc9      	lsrs	r1, r1, #31
 80012ea:	4690      	mov	r8, r2
 80012ec:	0d6d      	lsrs	r5, r5, #21
 80012ee:	0fdb      	lsrs	r3, r3, #31
 80012f0:	42bc      	cmp	r4, r7
 80012f2:	d02a      	beq.n	800134a <__gedf2+0x82>
 80012f4:	4f25      	ldr	r7, [pc, #148]	; (800138c <__gedf2+0xc4>)
 80012f6:	42bd      	cmp	r5, r7
 80012f8:	d02d      	beq.n	8001356 <__gedf2+0x8e>
 80012fa:	2c00      	cmp	r4, #0
 80012fc:	d10f      	bne.n	800131e <__gedf2+0x56>
 80012fe:	4330      	orrs	r0, r6
 8001300:	0007      	movs	r7, r0
 8001302:	4681      	mov	r9, r0
 8001304:	4278      	negs	r0, r7
 8001306:	4178      	adcs	r0, r7
 8001308:	b2c0      	uxtb	r0, r0
 800130a:	2d00      	cmp	r5, #0
 800130c:	d117      	bne.n	800133e <__gedf2+0x76>
 800130e:	465f      	mov	r7, fp
 8001310:	433a      	orrs	r2, r7
 8001312:	d114      	bne.n	800133e <__gedf2+0x76>
 8001314:	464b      	mov	r3, r9
 8001316:	2000      	movs	r0, #0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d00a      	beq.n	8001332 <__gedf2+0x6a>
 800131c:	e006      	b.n	800132c <__gedf2+0x64>
 800131e:	2d00      	cmp	r5, #0
 8001320:	d102      	bne.n	8001328 <__gedf2+0x60>
 8001322:	4658      	mov	r0, fp
 8001324:	4302      	orrs	r2, r0
 8001326:	d001      	beq.n	800132c <__gedf2+0x64>
 8001328:	4299      	cmp	r1, r3
 800132a:	d018      	beq.n	800135e <__gedf2+0x96>
 800132c:	4248      	negs	r0, r1
 800132e:	2101      	movs	r1, #1
 8001330:	4308      	orrs	r0, r1
 8001332:	bc3c      	pop	{r2, r3, r4, r5}
 8001334:	4690      	mov	r8, r2
 8001336:	4699      	mov	r9, r3
 8001338:	46a2      	mov	sl, r4
 800133a:	46ab      	mov	fp, r5
 800133c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800133e:	2800      	cmp	r0, #0
 8001340:	d0f2      	beq.n	8001328 <__gedf2+0x60>
 8001342:	2001      	movs	r0, #1
 8001344:	3b01      	subs	r3, #1
 8001346:	4318      	orrs	r0, r3
 8001348:	e7f3      	b.n	8001332 <__gedf2+0x6a>
 800134a:	0037      	movs	r7, r6
 800134c:	4307      	orrs	r7, r0
 800134e:	d0d1      	beq.n	80012f4 <__gedf2+0x2c>
 8001350:	2002      	movs	r0, #2
 8001352:	4240      	negs	r0, r0
 8001354:	e7ed      	b.n	8001332 <__gedf2+0x6a>
 8001356:	465f      	mov	r7, fp
 8001358:	4317      	orrs	r7, r2
 800135a:	d0ce      	beq.n	80012fa <__gedf2+0x32>
 800135c:	e7f8      	b.n	8001350 <__gedf2+0x88>
 800135e:	42ac      	cmp	r4, r5
 8001360:	dce4      	bgt.n	800132c <__gedf2+0x64>
 8001362:	da03      	bge.n	800136c <__gedf2+0xa4>
 8001364:	1e48      	subs	r0, r1, #1
 8001366:	2101      	movs	r1, #1
 8001368:	4308      	orrs	r0, r1
 800136a:	e7e2      	b.n	8001332 <__gedf2+0x6a>
 800136c:	455e      	cmp	r6, fp
 800136e:	d8dd      	bhi.n	800132c <__gedf2+0x64>
 8001370:	d006      	beq.n	8001380 <__gedf2+0xb8>
 8001372:	2000      	movs	r0, #0
 8001374:	455e      	cmp	r6, fp
 8001376:	d2dc      	bcs.n	8001332 <__gedf2+0x6a>
 8001378:	2301      	movs	r3, #1
 800137a:	1e48      	subs	r0, r1, #1
 800137c:	4318      	orrs	r0, r3
 800137e:	e7d8      	b.n	8001332 <__gedf2+0x6a>
 8001380:	45c4      	cmp	ip, r8
 8001382:	d8d3      	bhi.n	800132c <__gedf2+0x64>
 8001384:	2000      	movs	r0, #0
 8001386:	45c4      	cmp	ip, r8
 8001388:	d3f6      	bcc.n	8001378 <__gedf2+0xb0>
 800138a:	e7d2      	b.n	8001332 <__gedf2+0x6a>
 800138c:	000007ff 	.word	0x000007ff

08001390 <__ledf2>:
 8001390:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001392:	464e      	mov	r6, r9
 8001394:	4645      	mov	r5, r8
 8001396:	46de      	mov	lr, fp
 8001398:	4657      	mov	r7, sl
 800139a:	005c      	lsls	r4, r3, #1
 800139c:	b5e0      	push	{r5, r6, r7, lr}
 800139e:	031f      	lsls	r7, r3, #12
 80013a0:	0fdb      	lsrs	r3, r3, #31
 80013a2:	4699      	mov	r9, r3
 80013a4:	4b2a      	ldr	r3, [pc, #168]	; (8001450 <__ledf2+0xc0>)
 80013a6:	030e      	lsls	r6, r1, #12
 80013a8:	004d      	lsls	r5, r1, #1
 80013aa:	0fc9      	lsrs	r1, r1, #31
 80013ac:	4684      	mov	ip, r0
 80013ae:	0b36      	lsrs	r6, r6, #12
 80013b0:	0d6d      	lsrs	r5, r5, #21
 80013b2:	468b      	mov	fp, r1
 80013b4:	4690      	mov	r8, r2
 80013b6:	0b3f      	lsrs	r7, r7, #12
 80013b8:	0d64      	lsrs	r4, r4, #21
 80013ba:	429d      	cmp	r5, r3
 80013bc:	d020      	beq.n	8001400 <__ledf2+0x70>
 80013be:	4b24      	ldr	r3, [pc, #144]	; (8001450 <__ledf2+0xc0>)
 80013c0:	429c      	cmp	r4, r3
 80013c2:	d022      	beq.n	800140a <__ledf2+0x7a>
 80013c4:	2d00      	cmp	r5, #0
 80013c6:	d112      	bne.n	80013ee <__ledf2+0x5e>
 80013c8:	4330      	orrs	r0, r6
 80013ca:	4243      	negs	r3, r0
 80013cc:	4143      	adcs	r3, r0
 80013ce:	b2db      	uxtb	r3, r3
 80013d0:	2c00      	cmp	r4, #0
 80013d2:	d01f      	beq.n	8001414 <__ledf2+0x84>
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d00c      	beq.n	80013f2 <__ledf2+0x62>
 80013d8:	464b      	mov	r3, r9
 80013da:	2001      	movs	r0, #1
 80013dc:	3b01      	subs	r3, #1
 80013de:	4303      	orrs	r3, r0
 80013e0:	0018      	movs	r0, r3
 80013e2:	bc3c      	pop	{r2, r3, r4, r5}
 80013e4:	4690      	mov	r8, r2
 80013e6:	4699      	mov	r9, r3
 80013e8:	46a2      	mov	sl, r4
 80013ea:	46ab      	mov	fp, r5
 80013ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013ee:	2c00      	cmp	r4, #0
 80013f0:	d016      	beq.n	8001420 <__ledf2+0x90>
 80013f2:	45cb      	cmp	fp, r9
 80013f4:	d017      	beq.n	8001426 <__ledf2+0x96>
 80013f6:	465b      	mov	r3, fp
 80013f8:	4259      	negs	r1, r3
 80013fa:	2301      	movs	r3, #1
 80013fc:	430b      	orrs	r3, r1
 80013fe:	e7ef      	b.n	80013e0 <__ledf2+0x50>
 8001400:	0031      	movs	r1, r6
 8001402:	2302      	movs	r3, #2
 8001404:	4301      	orrs	r1, r0
 8001406:	d1eb      	bne.n	80013e0 <__ledf2+0x50>
 8001408:	e7d9      	b.n	80013be <__ledf2+0x2e>
 800140a:	0039      	movs	r1, r7
 800140c:	2302      	movs	r3, #2
 800140e:	4311      	orrs	r1, r2
 8001410:	d1e6      	bne.n	80013e0 <__ledf2+0x50>
 8001412:	e7d7      	b.n	80013c4 <__ledf2+0x34>
 8001414:	433a      	orrs	r2, r7
 8001416:	d1dd      	bne.n	80013d4 <__ledf2+0x44>
 8001418:	2300      	movs	r3, #0
 800141a:	2800      	cmp	r0, #0
 800141c:	d0e0      	beq.n	80013e0 <__ledf2+0x50>
 800141e:	e7ea      	b.n	80013f6 <__ledf2+0x66>
 8001420:	433a      	orrs	r2, r7
 8001422:	d1e6      	bne.n	80013f2 <__ledf2+0x62>
 8001424:	e7e7      	b.n	80013f6 <__ledf2+0x66>
 8001426:	42a5      	cmp	r5, r4
 8001428:	dce5      	bgt.n	80013f6 <__ledf2+0x66>
 800142a:	db05      	blt.n	8001438 <__ledf2+0xa8>
 800142c:	42be      	cmp	r6, r7
 800142e:	d8e2      	bhi.n	80013f6 <__ledf2+0x66>
 8001430:	d007      	beq.n	8001442 <__ledf2+0xb2>
 8001432:	2300      	movs	r3, #0
 8001434:	42be      	cmp	r6, r7
 8001436:	d2d3      	bcs.n	80013e0 <__ledf2+0x50>
 8001438:	4659      	mov	r1, fp
 800143a:	2301      	movs	r3, #1
 800143c:	3901      	subs	r1, #1
 800143e:	430b      	orrs	r3, r1
 8001440:	e7ce      	b.n	80013e0 <__ledf2+0x50>
 8001442:	45c4      	cmp	ip, r8
 8001444:	d8d7      	bhi.n	80013f6 <__ledf2+0x66>
 8001446:	2300      	movs	r3, #0
 8001448:	45c4      	cmp	ip, r8
 800144a:	d3f5      	bcc.n	8001438 <__ledf2+0xa8>
 800144c:	e7c8      	b.n	80013e0 <__ledf2+0x50>
 800144e:	46c0      	nop			; (mov r8, r8)
 8001450:	000007ff 	.word	0x000007ff

08001454 <CAN_Transmit>:
  * @param  TxMessage: pointer to a structure which contains CAN Id, CAN DLC and CAN data.
  * @retval The number of the mailbox that is used for transmission or
  *         CAN_TxStatus_NoMailBox if there is no empty mailbox.
  */
uint8_t CAN_Transmit(CAN_TypeDef* CANx, CanTxMsg* TxMessage)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	6039      	str	r1, [r7, #0]
  uint8_t transmit_mailbox = 0;
 800145e:	230f      	movs	r3, #15
 8001460:	18fb      	adds	r3, r7, r3
 8001462:	2200      	movs	r2, #0
 8001464:	701a      	strb	r2, [r3, #0]
  assert_param(IS_CAN_IDTYPE(TxMessage->IDE));
  assert_param(IS_CAN_RTR(TxMessage->RTR));
  assert_param(IS_CAN_DLC(TxMessage->DLC));

  /* Select one empty transmit mailbox */
  if ((CANx->TSR&CAN_TSR_TME0) == CAN_TSR_TME0)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	689a      	ldr	r2, [r3, #8]
 800146a:	2380      	movs	r3, #128	; 0x80
 800146c:	04db      	lsls	r3, r3, #19
 800146e:	401a      	ands	r2, r3
 8001470:	2380      	movs	r3, #128	; 0x80
 8001472:	04db      	lsls	r3, r3, #19
 8001474:	429a      	cmp	r2, r3
 8001476:	d104      	bne.n	8001482 <CAN_Transmit+0x2e>
  {
    transmit_mailbox = 0;
 8001478:	230f      	movs	r3, #15
 800147a:	18fb      	adds	r3, r7, r3
 800147c:	2200      	movs	r2, #0
 800147e:	701a      	strb	r2, [r3, #0]
 8001480:	e01f      	b.n	80014c2 <CAN_Transmit+0x6e>
  }
  else if ((CANx->TSR&CAN_TSR_TME1) == CAN_TSR_TME1)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	689a      	ldr	r2, [r3, #8]
 8001486:	2380      	movs	r3, #128	; 0x80
 8001488:	051b      	lsls	r3, r3, #20
 800148a:	401a      	ands	r2, r3
 800148c:	2380      	movs	r3, #128	; 0x80
 800148e:	051b      	lsls	r3, r3, #20
 8001490:	429a      	cmp	r2, r3
 8001492:	d104      	bne.n	800149e <CAN_Transmit+0x4a>
  {
    transmit_mailbox = 1;
 8001494:	230f      	movs	r3, #15
 8001496:	18fb      	adds	r3, r7, r3
 8001498:	2201      	movs	r2, #1
 800149a:	701a      	strb	r2, [r3, #0]
 800149c:	e011      	b.n	80014c2 <CAN_Transmit+0x6e>
  }
  else if ((CANx->TSR&CAN_TSR_TME2) == CAN_TSR_TME2)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	689a      	ldr	r2, [r3, #8]
 80014a2:	2380      	movs	r3, #128	; 0x80
 80014a4:	055b      	lsls	r3, r3, #21
 80014a6:	401a      	ands	r2, r3
 80014a8:	2380      	movs	r3, #128	; 0x80
 80014aa:	055b      	lsls	r3, r3, #21
 80014ac:	429a      	cmp	r2, r3
 80014ae:	d104      	bne.n	80014ba <CAN_Transmit+0x66>
  {
    transmit_mailbox = 2;
 80014b0:	230f      	movs	r3, #15
 80014b2:	18fb      	adds	r3, r7, r3
 80014b4:	2202      	movs	r2, #2
 80014b6:	701a      	strb	r2, [r3, #0]
 80014b8:	e003      	b.n	80014c2 <CAN_Transmit+0x6e>
  }
  else
  {
    transmit_mailbox = CAN_TxStatus_NoMailBox;
 80014ba:	230f      	movs	r3, #15
 80014bc:	18fb      	adds	r3, r7, r3
 80014be:	2204      	movs	r2, #4
 80014c0:	701a      	strb	r2, [r3, #0]
  }

  if (transmit_mailbox != CAN_TxStatus_NoMailBox)
 80014c2:	230f      	movs	r3, #15
 80014c4:	18fb      	adds	r3, r7, r3
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	2b04      	cmp	r3, #4
 80014ca:	d100      	bne.n	80014ce <CAN_Transmit+0x7a>
 80014cc:	e0b4      	b.n	8001638 <CAN_Transmit+0x1e4>
  {
    /* Set up the Id */
    CANx->sTxMailBox[transmit_mailbox].TIR &= TMIDxR_TXRQ;
 80014ce:	230f      	movs	r3, #15
 80014d0:	18fb      	adds	r3, r7, r3
 80014d2:	781a      	ldrb	r2, [r3, #0]
 80014d4:	230f      	movs	r3, #15
 80014d6:	18fb      	adds	r3, r7, r3
 80014d8:	7819      	ldrb	r1, [r3, #0]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	3118      	adds	r1, #24
 80014de:	0109      	lsls	r1, r1, #4
 80014e0:	58cb      	ldr	r3, [r1, r3]
 80014e2:	2101      	movs	r1, #1
 80014e4:	4019      	ands	r1, r3
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	3218      	adds	r2, #24
 80014ea:	0112      	lsls	r2, r2, #4
 80014ec:	50d1      	str	r1, [r2, r3]
    if (TxMessage->IDE == CAN_Id_Standard)
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	7a1b      	ldrb	r3, [r3, #8]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d115      	bne.n	8001522 <CAN_Transmit+0xce>
    {
      assert_param(IS_CAN_STDID(TxMessage->StdId));  
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->StdId << 21) | \
 80014f6:	230f      	movs	r3, #15
 80014f8:	18fb      	adds	r3, r7, r3
 80014fa:	781a      	ldrb	r2, [r3, #0]
 80014fc:	230f      	movs	r3, #15
 80014fe:	18fb      	adds	r3, r7, r3
 8001500:	7819      	ldrb	r1, [r3, #0]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	3118      	adds	r1, #24
 8001506:	0109      	lsls	r1, r1, #4
 8001508:	58c9      	ldr	r1, [r1, r3]
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	055b      	lsls	r3, r3, #21
                                                  TxMessage->RTR);
 8001510:	6838      	ldr	r0, [r7, #0]
 8001512:	7a40      	ldrb	r0, [r0, #9]
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->StdId << 21) | \
 8001514:	4303      	orrs	r3, r0
 8001516:	4319      	orrs	r1, r3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	3218      	adds	r2, #24
 800151c:	0112      	lsls	r2, r2, #4
 800151e:	50d1      	str	r1, [r2, r3]
 8001520:	e017      	b.n	8001552 <CAN_Transmit+0xfe>
    }
    else
    {
      assert_param(IS_CAN_EXTID(TxMessage->ExtId));
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
 8001522:	230f      	movs	r3, #15
 8001524:	18fb      	adds	r3, r7, r3
 8001526:	781a      	ldrb	r2, [r3, #0]
 8001528:	230f      	movs	r3, #15
 800152a:	18fb      	adds	r3, r7, r3
 800152c:	7819      	ldrb	r1, [r3, #0]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	3118      	adds	r1, #24
 8001532:	0109      	lsls	r1, r1, #4
 8001534:	58c9      	ldr	r1, [r1, r3]
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	00db      	lsls	r3, r3, #3
                                                  TxMessage->IDE | \
 800153c:	6838      	ldr	r0, [r7, #0]
 800153e:	7a00      	ldrb	r0, [r0, #8]
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
 8001540:	4303      	orrs	r3, r0
                                                  TxMessage->RTR);
 8001542:	6838      	ldr	r0, [r7, #0]
 8001544:	7a40      	ldrb	r0, [r0, #9]
                                                  TxMessage->IDE | \
 8001546:	4303      	orrs	r3, r0
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
 8001548:	4319      	orrs	r1, r3
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	3218      	adds	r2, #24
 800154e:	0112      	lsls	r2, r2, #4
 8001550:	50d1      	str	r1, [r2, r3]
    }
    
    /* Set up the DLC */
    TxMessage->DLC &= (uint8_t)0x0000000F;
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	7a9b      	ldrb	r3, [r3, #10]
 8001556:	220f      	movs	r2, #15
 8001558:	4013      	ands	r3, r2
 800155a:	b2da      	uxtb	r2, r3
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	729a      	strb	r2, [r3, #10]
    CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
 8001560:	230f      	movs	r3, #15
 8001562:	18fb      	adds	r3, r7, r3
 8001564:	7818      	ldrb	r0, [r3, #0]
 8001566:	230f      	movs	r3, #15
 8001568:	18fb      	adds	r3, r7, r3
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	687a      	ldr	r2, [r7, #4]
 800156e:	3318      	adds	r3, #24
 8001570:	011b      	lsls	r3, r3, #4
 8001572:	18d3      	adds	r3, r2, r3
 8001574:	3304      	adds	r3, #4
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	220f      	movs	r2, #15
 800157a:	4393      	bics	r3, r2
 800157c:	001a      	movs	r2, r3
 800157e:	6879      	ldr	r1, [r7, #4]
 8001580:	0003      	movs	r3, r0
 8001582:	3318      	adds	r3, #24
 8001584:	011b      	lsls	r3, r3, #4
 8001586:	18cb      	adds	r3, r1, r3
 8001588:	3304      	adds	r3, #4
 800158a:	601a      	str	r2, [r3, #0]
    CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;
 800158c:	230f      	movs	r3, #15
 800158e:	18fb      	adds	r3, r7, r3
 8001590:	7818      	ldrb	r0, [r3, #0]
 8001592:	230f      	movs	r3, #15
 8001594:	18fb      	adds	r3, r7, r3
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	687a      	ldr	r2, [r7, #4]
 800159a:	3318      	adds	r3, #24
 800159c:	011b      	lsls	r3, r3, #4
 800159e:	18d3      	adds	r3, r2, r3
 80015a0:	3304      	adds	r3, #4
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	683a      	ldr	r2, [r7, #0]
 80015a6:	7a92      	ldrb	r2, [r2, #10]
 80015a8:	431a      	orrs	r2, r3
 80015aa:	6879      	ldr	r1, [r7, #4]
 80015ac:	0003      	movs	r3, r0
 80015ae:	3318      	adds	r3, #24
 80015b0:	011b      	lsls	r3, r3, #4
 80015b2:	18cb      	adds	r3, r1, r3
 80015b4:	3304      	adds	r3, #4
 80015b6:	601a      	str	r2, [r3, #0]

    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 80015b8:	230f      	movs	r3, #15
 80015ba:	18fb      	adds	r3, r7, r3
 80015bc:	7819      	ldrb	r1, [r3, #0]
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	7b9b      	ldrb	r3, [r3, #14]
 80015c2:	061a      	lsls	r2, r3, #24
                                             ((uint32_t)TxMessage->Data[2] << 16) |
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	7b5b      	ldrb	r3, [r3, #13]
 80015c8:	041b      	lsls	r3, r3, #16
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 80015ca:	431a      	orrs	r2, r3
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	7b1b      	ldrb	r3, [r3, #12]
 80015d0:	021b      	lsls	r3, r3, #8
                                             ((uint32_t)TxMessage->Data[2] << 16) |
 80015d2:	4313      	orrs	r3, r2
                                             ((uint32_t)TxMessage->Data[0]));
 80015d4:	683a      	ldr	r2, [r7, #0]
 80015d6:	7ad2      	ldrb	r2, [r2, #11]
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
 80015d8:	431a      	orrs	r2, r3
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	23c4      	movs	r3, #196	; 0xc4
 80015de:	005b      	lsls	r3, r3, #1
 80015e0:	0109      	lsls	r1, r1, #4
 80015e2:	1841      	adds	r1, r0, r1
 80015e4:	18cb      	adds	r3, r1, r3
 80015e6:	601a      	str	r2, [r3, #0]
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 80015e8:	230f      	movs	r3, #15
 80015ea:	18fb      	adds	r3, r7, r3
 80015ec:	7819      	ldrb	r1, [r3, #0]
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	7c9b      	ldrb	r3, [r3, #18]
 80015f2:	061a      	lsls	r2, r3, #24
                                             ((uint32_t)TxMessage->Data[6] << 16) |
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	7c5b      	ldrb	r3, [r3, #17]
 80015f8:	041b      	lsls	r3, r3, #16
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 80015fa:	431a      	orrs	r2, r3
                                             ((uint32_t)TxMessage->Data[5] << 8) |
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	7c1b      	ldrb	r3, [r3, #16]
 8001600:	021b      	lsls	r3, r3, #8
                                             ((uint32_t)TxMessage->Data[6] << 16) |
 8001602:	4313      	orrs	r3, r2
                                             ((uint32_t)TxMessage->Data[4]));
 8001604:	683a      	ldr	r2, [r7, #0]
 8001606:	7bd2      	ldrb	r2, [r2, #15]
                                             ((uint32_t)TxMessage->Data[5] << 8) |
 8001608:	431a      	orrs	r2, r3
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	23c6      	movs	r3, #198	; 0xc6
 800160e:	005b      	lsls	r3, r3, #1
 8001610:	0109      	lsls	r1, r1, #4
 8001612:	1841      	adds	r1, r0, r1
 8001614:	18cb      	adds	r3, r1, r3
 8001616:	601a      	str	r2, [r3, #0]
    /* Request transmission */
    CANx->sTxMailBox[transmit_mailbox].TIR |= TMIDxR_TXRQ;
 8001618:	230f      	movs	r3, #15
 800161a:	18fb      	adds	r3, r7, r3
 800161c:	781a      	ldrb	r2, [r3, #0]
 800161e:	230f      	movs	r3, #15
 8001620:	18fb      	adds	r3, r7, r3
 8001622:	7819      	ldrb	r1, [r3, #0]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	3118      	adds	r1, #24
 8001628:	0109      	lsls	r1, r1, #4
 800162a:	58cb      	ldr	r3, [r1, r3]
 800162c:	2101      	movs	r1, #1
 800162e:	4319      	orrs	r1, r3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	3218      	adds	r2, #24
 8001634:	0112      	lsls	r2, r2, #4
 8001636:	50d1      	str	r1, [r2, r3]
  }
  return transmit_mailbox;
 8001638:	230f      	movs	r3, #15
 800163a:	18fb      	adds	r3, r7, r3
 800163c:	781b      	ldrb	r3, [r3, #0]
}
 800163e:	0018      	movs	r0, r3
 8001640:	46bd      	mov	sp, r7
 8001642:	b004      	add	sp, #16
 8001644:	bd80      	pop	{r7, pc}
	...

08001648 <CAN_TransmitStatus>:
  * @param  TransmitMailbox: the number of the mailbox that is used for transmission.
  * @retval CAN_TxStatus_Ok if the CAN driver transmits the message, 
  *         CAN_TxStatus_Failed in an other case.
  */
uint8_t CAN_TransmitStatus(CAN_TypeDef* CANx, uint8_t TransmitMailbox)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b084      	sub	sp, #16
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	000a      	movs	r2, r1
 8001652:	1cfb      	adds	r3, r7, #3
 8001654:	701a      	strb	r2, [r3, #0]
  uint32_t state = 0;
 8001656:	2300      	movs	r3, #0
 8001658:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_TRANSMITMAILBOX(TransmitMailbox));
 
  switch (TransmitMailbox)
 800165a:	1cfb      	adds	r3, r7, #3
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	2b01      	cmp	r3, #1
 8001660:	d009      	beq.n	8001676 <CAN_TransmitStatus+0x2e>
 8001662:	2b02      	cmp	r3, #2
 8001664:	d00d      	beq.n	8001682 <CAN_TransmitStatus+0x3a>
 8001666:	2b00      	cmp	r3, #0
 8001668:	d111      	bne.n	800168e <CAN_TransmitStatus+0x46>
  {
    case (CAN_TXMAILBOX_0): 
      state =   CANx->TSR &  (CAN_TSR_RQCP0 | CAN_TSR_TXOK0 | CAN_TSR_TME0);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	4a25      	ldr	r2, [pc, #148]	; (8001704 <CAN_TransmitStatus+0xbc>)
 8001670:	4013      	ands	r3, r2
 8001672:	60fb      	str	r3, [r7, #12]
      break;
 8001674:	e00e      	b.n	8001694 <CAN_TransmitStatus+0x4c>
    case (CAN_TXMAILBOX_1): 
      state =   CANx->TSR &  (CAN_TSR_RQCP1 | CAN_TSR_TXOK1 | CAN_TSR_TME1);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	4a23      	ldr	r2, [pc, #140]	; (8001708 <CAN_TransmitStatus+0xc0>)
 800167c:	4013      	ands	r3, r2
 800167e:	60fb      	str	r3, [r7, #12]
      break;
 8001680:	e008      	b.n	8001694 <CAN_TransmitStatus+0x4c>
    case (CAN_TXMAILBOX_2): 
      state =   CANx->TSR &  (CAN_TSR_RQCP2 | CAN_TSR_TXOK2 | CAN_TSR_TME2);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	4a21      	ldr	r2, [pc, #132]	; (800170c <CAN_TransmitStatus+0xc4>)
 8001688:	4013      	ands	r3, r2
 800168a:	60fb      	str	r3, [r7, #12]
      break;
 800168c:	e002      	b.n	8001694 <CAN_TransmitStatus+0x4c>
    default:
      state = CAN_TxStatus_Failed;
 800168e:	2300      	movs	r3, #0
 8001690:	60fb      	str	r3, [r7, #12]
      break;
 8001692:	46c0      	nop			; (mov r8, r8)
  }
  switch (state)
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	4a1e      	ldr	r2, [pc, #120]	; (8001710 <CAN_TransmitStatus+0xc8>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d01b      	beq.n	80016d4 <CAN_TransmitStatus+0x8c>
 800169c:	4a1c      	ldr	r2, [pc, #112]	; (8001710 <CAN_TransmitStatus+0xc8>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d808      	bhi.n	80016b4 <CAN_TransmitStatus+0x6c>
 80016a2:	4a1c      	ldr	r2, [pc, #112]	; (8001714 <CAN_TransmitStatus+0xcc>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d012      	beq.n	80016ce <CAN_TransmitStatus+0x86>
 80016a8:	4a16      	ldr	r2, [pc, #88]	; (8001704 <CAN_TransmitStatus+0xbc>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d018      	beq.n	80016e0 <CAN_TransmitStatus+0x98>
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d00a      	beq.n	80016c8 <CAN_TransmitStatus+0x80>
 80016b2:	e01e      	b.n	80016f2 <CAN_TransmitStatus+0xaa>
 80016b4:	4a18      	ldr	r2, [pc, #96]	; (8001718 <CAN_TransmitStatus+0xd0>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d00f      	beq.n	80016da <CAN_TransmitStatus+0x92>
 80016ba:	4a14      	ldr	r2, [pc, #80]	; (800170c <CAN_TransmitStatus+0xc4>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d015      	beq.n	80016ec <CAN_TransmitStatus+0xa4>
 80016c0:	4a11      	ldr	r2, [pc, #68]	; (8001708 <CAN_TransmitStatus+0xc0>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d00f      	beq.n	80016e6 <CAN_TransmitStatus+0x9e>
 80016c6:	e014      	b.n	80016f2 <CAN_TransmitStatus+0xaa>
  {
      /* transmit pending  */
    case (0x0): state = CAN_TxStatus_Pending;
 80016c8:	2302      	movs	r3, #2
 80016ca:	60fb      	str	r3, [r7, #12]
      break;
 80016cc:	e014      	b.n	80016f8 <CAN_TransmitStatus+0xb0>
      /* transmit failed  */
     case (CAN_TSR_RQCP0 | CAN_TSR_TME0): state = CAN_TxStatus_Failed;
 80016ce:	2300      	movs	r3, #0
 80016d0:	60fb      	str	r3, [r7, #12]
      break;
 80016d2:	e011      	b.n	80016f8 <CAN_TransmitStatus+0xb0>
     case (CAN_TSR_RQCP1 | CAN_TSR_TME1): state = CAN_TxStatus_Failed;
 80016d4:	2300      	movs	r3, #0
 80016d6:	60fb      	str	r3, [r7, #12]
      break;
 80016d8:	e00e      	b.n	80016f8 <CAN_TransmitStatus+0xb0>
     case (CAN_TSR_RQCP2 | CAN_TSR_TME2): state = CAN_TxStatus_Failed;
 80016da:	2300      	movs	r3, #0
 80016dc:	60fb      	str	r3, [r7, #12]
      break;
 80016de:	e00b      	b.n	80016f8 <CAN_TransmitStatus+0xb0>
      /* transmit succeeded  */
    case (CAN_TSR_RQCP0 | CAN_TSR_TXOK0 | CAN_TSR_TME0):state = CAN_TxStatus_Ok;
 80016e0:	2301      	movs	r3, #1
 80016e2:	60fb      	str	r3, [r7, #12]
      break;
 80016e4:	e008      	b.n	80016f8 <CAN_TransmitStatus+0xb0>
    case (CAN_TSR_RQCP1 | CAN_TSR_TXOK1 | CAN_TSR_TME1):state = CAN_TxStatus_Ok;
 80016e6:	2301      	movs	r3, #1
 80016e8:	60fb      	str	r3, [r7, #12]
      break;
 80016ea:	e005      	b.n	80016f8 <CAN_TransmitStatus+0xb0>
    case (CAN_TSR_RQCP2 | CAN_TSR_TXOK2 | CAN_TSR_TME2):state = CAN_TxStatus_Ok;
 80016ec:	2301      	movs	r3, #1
 80016ee:	60fb      	str	r3, [r7, #12]
      break;
 80016f0:	e002      	b.n	80016f8 <CAN_TransmitStatus+0xb0>
    default: state = CAN_TxStatus_Failed;
 80016f2:	2300      	movs	r3, #0
 80016f4:	60fb      	str	r3, [r7, #12]
      break;
 80016f6:	46c0      	nop			; (mov r8, r8)
  }
  return (uint8_t) state;
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	b2db      	uxtb	r3, r3
}
 80016fc:	0018      	movs	r0, r3
 80016fe:	46bd      	mov	sp, r7
 8001700:	b004      	add	sp, #16
 8001702:	bd80      	pop	{r7, pc}
 8001704:	04000003 	.word	0x04000003
 8001708:	08000300 	.word	0x08000300
 800170c:	10030000 	.word	0x10030000
 8001710:	08000100 	.word	0x08000100
 8001714:	04000001 	.word	0x04000001
 8001718:	10010000 	.word	0x10010000

0800171c <CAN_Receive>:
  * @param  RxMessage: pointer to a structure receive frame which contains CAN Id,
  *         CAN DLC, CAN data and FMI number.
  * @retval None
  */
void CAN_Receive(CAN_TypeDef* CANx, uint8_t FIFONumber, CanRxMsg* RxMessage)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b084      	sub	sp, #16
 8001720:	af00      	add	r7, sp, #0
 8001722:	60f8      	str	r0, [r7, #12]
 8001724:	607a      	str	r2, [r7, #4]
 8001726:	230b      	movs	r3, #11
 8001728:	18fb      	adds	r3, r7, r3
 800172a:	1c0a      	adds	r2, r1, #0
 800172c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_FIFO(FIFONumber));
  /* Get the Id */
  RxMessage->IDE = (uint8_t)0x04 & CANx->sFIFOMailBox[FIFONumber].RIR;
 800172e:	230b      	movs	r3, #11
 8001730:	18fb      	adds	r3, r7, r3
 8001732:	781a      	ldrb	r2, [r3, #0]
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	321b      	adds	r2, #27
 8001738:	0112      	lsls	r2, r2, #4
 800173a:	58d3      	ldr	r3, [r2, r3]
 800173c:	b2db      	uxtb	r3, r3
 800173e:	2204      	movs	r2, #4
 8001740:	4013      	ands	r3, r2
 8001742:	b2da      	uxtb	r2, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	721a      	strb	r2, [r3, #8]
  if (RxMessage->IDE == CAN_Id_Standard)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	7a1b      	ldrb	r3, [r3, #8]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d10c      	bne.n	800176a <CAN_Receive+0x4e>
  {
    RxMessage->StdId = (uint32_t)0x000007FF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 21);
 8001750:	230b      	movs	r3, #11
 8001752:	18fb      	adds	r3, r7, r3
 8001754:	781a      	ldrb	r2, [r3, #0]
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	321b      	adds	r2, #27
 800175a:	0112      	lsls	r2, r2, #4
 800175c:	58d3      	ldr	r3, [r2, r3]
 800175e:	0d5b      	lsrs	r3, r3, #21
 8001760:	055b      	lsls	r3, r3, #21
 8001762:	0d5a      	lsrs	r2, r3, #21
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	601a      	str	r2, [r3, #0]
 8001768:	e00b      	b.n	8001782 <CAN_Receive+0x66>
  }
  else
  {
    RxMessage->ExtId = (uint32_t)0x1FFFFFFF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 3);
 800176a:	230b      	movs	r3, #11
 800176c:	18fb      	adds	r3, r7, r3
 800176e:	781a      	ldrb	r2, [r3, #0]
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	321b      	adds	r2, #27
 8001774:	0112      	lsls	r2, r2, #4
 8001776:	58d3      	ldr	r3, [r2, r3]
 8001778:	08db      	lsrs	r3, r3, #3
 800177a:	00db      	lsls	r3, r3, #3
 800177c:	08da      	lsrs	r2, r3, #3
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	605a      	str	r2, [r3, #4]
  }
  
  RxMessage->RTR = (uint8_t)0x02 & CANx->sFIFOMailBox[FIFONumber].RIR;
 8001782:	230b      	movs	r3, #11
 8001784:	18fb      	adds	r3, r7, r3
 8001786:	781a      	ldrb	r2, [r3, #0]
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	321b      	adds	r2, #27
 800178c:	0112      	lsls	r2, r2, #4
 800178e:	58d3      	ldr	r3, [r2, r3]
 8001790:	b2db      	uxtb	r3, r3
 8001792:	2202      	movs	r2, #2
 8001794:	4013      	ands	r3, r2
 8001796:	b2da      	uxtb	r2, r3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	725a      	strb	r2, [r3, #9]
  /* Get the DLC */
  RxMessage->DLC = (uint8_t)0x0F & CANx->sFIFOMailBox[FIFONumber].RDTR;
 800179c:	230b      	movs	r3, #11
 800179e:	18fb      	adds	r3, r7, r3
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	68fa      	ldr	r2, [r7, #12]
 80017a4:	331b      	adds	r3, #27
 80017a6:	011b      	lsls	r3, r3, #4
 80017a8:	18d3      	adds	r3, r2, r3
 80017aa:	3304      	adds	r3, #4
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	b2db      	uxtb	r3, r3
 80017b0:	220f      	movs	r2, #15
 80017b2:	4013      	ands	r3, r2
 80017b4:	b2da      	uxtb	r2, r3
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	729a      	strb	r2, [r3, #10]
  /* Get the FMI */
  RxMessage->FMI = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDTR >> 8);
 80017ba:	230b      	movs	r3, #11
 80017bc:	18fb      	adds	r3, r7, r3
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	68fa      	ldr	r2, [r7, #12]
 80017c2:	331b      	adds	r3, #27
 80017c4:	011b      	lsls	r3, r3, #4
 80017c6:	18d3      	adds	r3, r2, r3
 80017c8:	3304      	adds	r3, #4
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	0a1b      	lsrs	r3, r3, #8
 80017ce:	b2da      	uxtb	r2, r3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	74da      	strb	r2, [r3, #19]
  /* Get the data field */
  RxMessage->Data[0] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDLR;
 80017d4:	230b      	movs	r3, #11
 80017d6:	18fb      	adds	r3, r7, r3
 80017d8:	781a      	ldrb	r2, [r3, #0]
 80017da:	68f9      	ldr	r1, [r7, #12]
 80017dc:	23dc      	movs	r3, #220	; 0xdc
 80017de:	005b      	lsls	r3, r3, #1
 80017e0:	0112      	lsls	r2, r2, #4
 80017e2:	188a      	adds	r2, r1, r2
 80017e4:	18d3      	adds	r3, r2, r3
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	b2da      	uxtb	r2, r3
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	72da      	strb	r2, [r3, #11]
  RxMessage->Data[1] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 8);
 80017ee:	230b      	movs	r3, #11
 80017f0:	18fb      	adds	r3, r7, r3
 80017f2:	781a      	ldrb	r2, [r3, #0]
 80017f4:	68f9      	ldr	r1, [r7, #12]
 80017f6:	23dc      	movs	r3, #220	; 0xdc
 80017f8:	005b      	lsls	r3, r3, #1
 80017fa:	0112      	lsls	r2, r2, #4
 80017fc:	188a      	adds	r2, r1, r2
 80017fe:	18d3      	adds	r3, r2, r3
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	0a1b      	lsrs	r3, r3, #8
 8001804:	b2da      	uxtb	r2, r3
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	731a      	strb	r2, [r3, #12]
  RxMessage->Data[2] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 16);
 800180a:	230b      	movs	r3, #11
 800180c:	18fb      	adds	r3, r7, r3
 800180e:	781a      	ldrb	r2, [r3, #0]
 8001810:	68f9      	ldr	r1, [r7, #12]
 8001812:	23dc      	movs	r3, #220	; 0xdc
 8001814:	005b      	lsls	r3, r3, #1
 8001816:	0112      	lsls	r2, r2, #4
 8001818:	188a      	adds	r2, r1, r2
 800181a:	18d3      	adds	r3, r2, r3
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	0c1b      	lsrs	r3, r3, #16
 8001820:	b2da      	uxtb	r2, r3
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	735a      	strb	r2, [r3, #13]
  RxMessage->Data[3] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 24);
 8001826:	230b      	movs	r3, #11
 8001828:	18fb      	adds	r3, r7, r3
 800182a:	781a      	ldrb	r2, [r3, #0]
 800182c:	68f9      	ldr	r1, [r7, #12]
 800182e:	23dc      	movs	r3, #220	; 0xdc
 8001830:	005b      	lsls	r3, r3, #1
 8001832:	0112      	lsls	r2, r2, #4
 8001834:	188a      	adds	r2, r1, r2
 8001836:	18d3      	adds	r3, r2, r3
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	0e1b      	lsrs	r3, r3, #24
 800183c:	b2da      	uxtb	r2, r3
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	739a      	strb	r2, [r3, #14]
  RxMessage->Data[4] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDHR;
 8001842:	230b      	movs	r3, #11
 8001844:	18fb      	adds	r3, r7, r3
 8001846:	781a      	ldrb	r2, [r3, #0]
 8001848:	68f9      	ldr	r1, [r7, #12]
 800184a:	23de      	movs	r3, #222	; 0xde
 800184c:	005b      	lsls	r3, r3, #1
 800184e:	0112      	lsls	r2, r2, #4
 8001850:	188a      	adds	r2, r1, r2
 8001852:	18d3      	adds	r3, r2, r3
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	b2da      	uxtb	r2, r3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	73da      	strb	r2, [r3, #15]
  RxMessage->Data[5] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 8);
 800185c:	230b      	movs	r3, #11
 800185e:	18fb      	adds	r3, r7, r3
 8001860:	781a      	ldrb	r2, [r3, #0]
 8001862:	68f9      	ldr	r1, [r7, #12]
 8001864:	23de      	movs	r3, #222	; 0xde
 8001866:	005b      	lsls	r3, r3, #1
 8001868:	0112      	lsls	r2, r2, #4
 800186a:	188a      	adds	r2, r1, r2
 800186c:	18d3      	adds	r3, r2, r3
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	0a1b      	lsrs	r3, r3, #8
 8001872:	b2da      	uxtb	r2, r3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	741a      	strb	r2, [r3, #16]
  RxMessage->Data[6] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 16);
 8001878:	230b      	movs	r3, #11
 800187a:	18fb      	adds	r3, r7, r3
 800187c:	781a      	ldrb	r2, [r3, #0]
 800187e:	68f9      	ldr	r1, [r7, #12]
 8001880:	23de      	movs	r3, #222	; 0xde
 8001882:	005b      	lsls	r3, r3, #1
 8001884:	0112      	lsls	r2, r2, #4
 8001886:	188a      	adds	r2, r1, r2
 8001888:	18d3      	adds	r3, r2, r3
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	0c1b      	lsrs	r3, r3, #16
 800188e:	b2da      	uxtb	r2, r3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	745a      	strb	r2, [r3, #17]
  RxMessage->Data[7] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 24);
 8001894:	230b      	movs	r3, #11
 8001896:	18fb      	adds	r3, r7, r3
 8001898:	781a      	ldrb	r2, [r3, #0]
 800189a:	68f9      	ldr	r1, [r7, #12]
 800189c:	23de      	movs	r3, #222	; 0xde
 800189e:	005b      	lsls	r3, r3, #1
 80018a0:	0112      	lsls	r2, r2, #4
 80018a2:	188a      	adds	r2, r1, r2
 80018a4:	18d3      	adds	r3, r2, r3
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	0e1b      	lsrs	r3, r3, #24
 80018aa:	b2da      	uxtb	r2, r3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	749a      	strb	r2, [r3, #18]
  /* Release the FIFO */
  /* Release FIFO0 */
  if (FIFONumber == CAN_FIFO0)
 80018b0:	230b      	movs	r3, #11
 80018b2:	18fb      	adds	r3, r7, r3
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d106      	bne.n	80018c8 <CAN_Receive+0x1ac>
  {
    CANx->RF0R |= CAN_RF0R_RFOM0;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	68db      	ldr	r3, [r3, #12]
 80018be:	2220      	movs	r2, #32
 80018c0:	431a      	orrs	r2, r3
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	60da      	str	r2, [r3, #12]
  /* Release FIFO1 */
  else /* FIFONumber == CAN_FIFO1 */
  {
    CANx->RF1R |= CAN_RF1R_RFOM1;
  }
}
 80018c6:	e005      	b.n	80018d4 <CAN_Receive+0x1b8>
    CANx->RF1R |= CAN_RF1R_RFOM1;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	691b      	ldr	r3, [r3, #16]
 80018cc:	2220      	movs	r2, #32
 80018ce:	431a      	orrs	r2, r3
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	611a      	str	r2, [r3, #16]
}
 80018d4:	46c0      	nop			; (mov r8, r8)
 80018d6:	46bd      	mov	sp, r7
 80018d8:	b004      	add	sp, #16
 80018da:	bd80      	pop	{r7, pc}

080018dc <CAN_MessagePending>:
  * @param  CANx: where x can be 1 to select the CAN peripheral.
  * @param  FIFONumber: Receive FIFO number, CAN_FIFO0 or CAN_FIFO1.
  * @retval NbMessage : which is the number of pending message.
  */
uint8_t CAN_MessagePending(CAN_TypeDef* CANx, uint8_t FIFONumber)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	000a      	movs	r2, r1
 80018e6:	1cfb      	adds	r3, r7, #3
 80018e8:	701a      	strb	r2, [r3, #0]
  uint8_t message_pending=0;
 80018ea:	230f      	movs	r3, #15
 80018ec:	18fb      	adds	r3, r7, r3
 80018ee:	2200      	movs	r2, #0
 80018f0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_FIFO(FIFONumber));
  if (FIFONumber == CAN_FIFO0)
 80018f2:	1cfb      	adds	r3, r7, #3
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d108      	bne.n	800190c <CAN_MessagePending+0x30>
  {
    message_pending = (uint8_t)(CANx->RF0R&(uint32_t)0x03);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	68db      	ldr	r3, [r3, #12]
 80018fe:	b2da      	uxtb	r2, r3
 8001900:	230f      	movs	r3, #15
 8001902:	18fb      	adds	r3, r7, r3
 8001904:	2103      	movs	r1, #3
 8001906:	400a      	ands	r2, r1
 8001908:	701a      	strb	r2, [r3, #0]
 800190a:	e010      	b.n	800192e <CAN_MessagePending+0x52>
  }
  else if (FIFONumber == CAN_FIFO1)
 800190c:	1cfb      	adds	r3, r7, #3
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	2b01      	cmp	r3, #1
 8001912:	d108      	bne.n	8001926 <CAN_MessagePending+0x4a>
  {
    message_pending = (uint8_t)(CANx->RF1R&(uint32_t)0x03);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	691b      	ldr	r3, [r3, #16]
 8001918:	b2da      	uxtb	r2, r3
 800191a:	230f      	movs	r3, #15
 800191c:	18fb      	adds	r3, r7, r3
 800191e:	2103      	movs	r1, #3
 8001920:	400a      	ands	r2, r1
 8001922:	701a      	strb	r2, [r3, #0]
 8001924:	e003      	b.n	800192e <CAN_MessagePending+0x52>
  }
  else
  {
    message_pending = 0;
 8001926:	230f      	movs	r3, #15
 8001928:	18fb      	adds	r3, r7, r3
 800192a:	2200      	movs	r2, #0
 800192c:	701a      	strb	r2, [r3, #0]
  }
  return message_pending;
 800192e:	230f      	movs	r3, #15
 8001930:	18fb      	adds	r3, r7, r3
 8001932:	781b      	ldrb	r3, [r3, #0]
}
 8001934:	0018      	movs	r0, r3
 8001936:	46bd      	mov	sp, r7
 8001938:	b004      	add	sp, #16
 800193a:	bd80      	pop	{r7, pc}

0800193c <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b086      	sub	sp, #24
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
 8001944:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8001946:	2300      	movs	r3, #0
 8001948:	617b      	str	r3, [r7, #20]
 800194a:	2300      	movs	r3, #0
 800194c:	613b      	str	r3, [r7, #16]
 800194e:	2300      	movs	r3, #0
 8001950:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8001952:	2300      	movs	r3, #0
 8001954:	617b      	str	r3, [r7, #20]
 8001956:	e07c      	b.n	8001a52 <GPIO_Init+0x116>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8001958:	2201      	movs	r2, #1
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	409a      	lsls	r2, r3
 800195e:	0013      	movs	r3, r2
 8001960:	613b      	str	r3, [r7, #16]

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	693a      	ldr	r2, [r7, #16]
 8001968:	4013      	ands	r3, r2
 800196a:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 800196c:	68fa      	ldr	r2, [r7, #12]
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	429a      	cmp	r2, r3
 8001972:	d16b      	bne.n	8001a4c <GPIO_Init+0x110>
    {
      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	791b      	ldrb	r3, [r3, #4]
 8001978:	2b01      	cmp	r3, #1
 800197a:	d003      	beq.n	8001984 <GPIO_Init+0x48>
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	791b      	ldrb	r3, [r3, #4]
 8001980:	2b02      	cmp	r3, #2
 8001982:	d134      	bne.n	80019ee <GPIO_Init+0xb2>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	697a      	ldr	r2, [r7, #20]
 800198a:	0052      	lsls	r2, r2, #1
 800198c:	2103      	movs	r1, #3
 800198e:	4091      	lsls	r1, r2
 8001990:	000a      	movs	r2, r1
 8001992:	43d2      	mvns	r2, r2
 8001994:	401a      	ands	r2, r3
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	689a      	ldr	r2, [r3, #8]
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	795b      	ldrb	r3, [r3, #5]
 80019a2:	0019      	movs	r1, r3
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	005b      	lsls	r3, r3, #1
 80019a8:	4099      	lsls	r1, r3
 80019aa:	000b      	movs	r3, r1
 80019ac:	431a      	orrs	r2, r3
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos));
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	889b      	ldrh	r3, [r3, #4]
 80019b6:	b29b      	uxth	r3, r3
 80019b8:	697a      	ldr	r2, [r7, #20]
 80019ba:	b292      	uxth	r2, r2
 80019bc:	0011      	movs	r1, r2
 80019be:	2201      	movs	r2, #1
 80019c0:	408a      	lsls	r2, r1
 80019c2:	b292      	uxth	r2, r2
 80019c4:	43d2      	mvns	r2, r2
 80019c6:	b292      	uxth	r2, r2
 80019c8:	4013      	ands	r3, r2
 80019ca:	b29a      	uxth	r2, r3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	809a      	strh	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	889b      	ldrh	r3, [r3, #4]
 80019d4:	b29a      	uxth	r2, r3
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	799b      	ldrb	r3, [r3, #6]
 80019da:	0019      	movs	r1, r3
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	b29b      	uxth	r3, r3
 80019e0:	4099      	lsls	r1, r3
 80019e2:	000b      	movs	r3, r1
 80019e4:	b29b      	uxth	r3, r3
 80019e6:	4313      	orrs	r3, r2
 80019e8:	b29a      	uxth	r2, r3
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	809a      	strh	r2, [r3, #4]
      }

      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	697a      	ldr	r2, [r7, #20]
 80019f4:	0052      	lsls	r2, r2, #1
 80019f6:	2103      	movs	r1, #3
 80019f8:	4091      	lsls	r1, r2
 80019fa:	000a      	movs	r2, r1
 80019fc:	43d2      	mvns	r2, r2
 80019fe:	401a      	ands	r2, r3
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	601a      	str	r2, [r3, #0]

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	791b      	ldrb	r3, [r3, #4]
 8001a0c:	0019      	movs	r1, r3
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	005b      	lsls	r3, r3, #1
 8001a12:	4099      	lsls	r1, r3
 8001a14:	000b      	movs	r3, r1
 8001a16:	431a      	orrs	r2, r3
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	601a      	str	r2, [r3, #0]

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	697a      	ldr	r2, [r7, #20]
 8001a22:	b292      	uxth	r2, r2
 8001a24:	0052      	lsls	r2, r2, #1
 8001a26:	2103      	movs	r1, #3
 8001a28:	4091      	lsls	r1, r2
 8001a2a:	000a      	movs	r2, r1
 8001a2c:	43d2      	mvns	r2, r2
 8001a2e:	401a      	ands	r2, r3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	68da      	ldr	r2, [r3, #12]
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	79db      	ldrb	r3, [r3, #7]
 8001a3c:	0019      	movs	r1, r3
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	005b      	lsls	r3, r3, #1
 8001a42:	4099      	lsls	r1, r3
 8001a44:	000b      	movs	r3, r1
 8001a46:	431a      	orrs	r2, r3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	3301      	adds	r3, #1
 8001a50:	617b      	str	r3, [r7, #20]
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	2b0f      	cmp	r3, #15
 8001a56:	d800      	bhi.n	8001a5a <GPIO_Init+0x11e>
 8001a58:	e77e      	b.n	8001958 <GPIO_Init+0x1c>
    }
  }
}
 8001a5a:	46c0      	nop			; (mov r8, r8)
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	b006      	add	sp, #24
 8001a60:	bd80      	pop	{r7, pc}
	...

08001a64 <GPIO_StructInit>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	4a09      	ldr	r2, [pc, #36]	; (8001a94 <GPIO_StructInit+0x30>)
 8001a70:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2200      	movs	r2, #0
 8001a76:	711a      	strb	r2, [r3, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_Level_2;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	715a      	strb	r2, [r3, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2200      	movs	r2, #0
 8001a82:	719a      	strb	r2, [r3, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2200      	movs	r2, #0
 8001a88:	71da      	strb	r2, [r3, #7]
}
 8001a8a:	46c0      	nop			; (mov r8, r8)
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	b002      	add	sp, #8
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	46c0      	nop			; (mov r8, r8)
 8001a94:	0000ffff 	.word	0x0000ffff

08001a98 <GPIO_SetBits>:
  *         For STM32F072: (0..15) for GPIOA, GPIOB, GPIOC, GPIOD, GPIOE, (0..10) for GPIOF.
  *         For STM32F031: (0..15) for GPIOA, GPIOB, (13..15) for GPIOC and (0..1, 6..7) for GPIOF. 
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	000a      	movs	r2, r1
 8001aa2:	1cbb      	adds	r3, r7, #2
 8001aa4:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRR = GPIO_Pin;
 8001aa6:	1cbb      	adds	r3, r7, #2
 8001aa8:	881a      	ldrh	r2, [r3, #0]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	619a      	str	r2, [r3, #24]
}
 8001aae:	46c0      	nop			; (mov r8, r8)
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	b002      	add	sp, #8
 8001ab4:	bd80      	pop	{r7, pc}

08001ab6 <GPIO_ResetBits>:
  *         For STM32F072: (0..15) for GPIOA, GPIOB, GPIOC, GPIOD, GPIOE, (0..10) for GPIOF.
  *         For STM32F031: (0..15) for GPIOA, GPIOB, (13..15) for GPIOC and (0..1, 6..7) for GPIOF. 
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	b082      	sub	sp, #8
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
 8001abe:	000a      	movs	r2, r1
 8001ac0:	1cbb      	adds	r3, r7, #2
 8001ac2:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BRR = GPIO_Pin;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	1cba      	adds	r2, r7, #2
 8001ac8:	8812      	ldrh	r2, [r2, #0]
 8001aca:	851a      	strh	r2, [r3, #40]	; 0x28
}
 8001acc:	46c0      	nop			; (mov r8, r8)
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	b002      	add	sp, #8
 8001ad2:	bd80      	pop	{r7, pc}

08001ad4 <GPIO_PinAFConfig>:
  *         for the detailed mapping of the system and peripherals'alternate 
  *         function I/O pins.
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b084      	sub	sp, #16
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	0008      	movs	r0, r1
 8001ade:	0011      	movs	r1, r2
 8001ae0:	1cbb      	adds	r3, r7, #2
 8001ae2:	1c02      	adds	r2, r0, #0
 8001ae4:	801a      	strh	r2, [r3, #0]
 8001ae6:	1c7b      	adds	r3, r7, #1
 8001ae8:	1c0a      	adds	r2, r1, #0
 8001aea:	701a      	strb	r2, [r3, #0]
  uint32_t temp = 0x00;
 8001aec:	2300      	movs	r3, #0
 8001aee:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8001af0:	2300      	movs	r3, #0
 8001af2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));

  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 8001af4:	1c7b      	adds	r3, r7, #1
 8001af6:	781a      	ldrb	r2, [r3, #0]
 8001af8:	1cbb      	adds	r3, r7, #2
 8001afa:	881b      	ldrh	r3, [r3, #0]
 8001afc:	2107      	movs	r1, #7
 8001afe:	400b      	ands	r3, r1
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	409a      	lsls	r2, r3
 8001b04:	0013      	movs	r3, r2
 8001b06:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 8001b08:	1cbb      	adds	r3, r7, #2
 8001b0a:	881b      	ldrh	r3, [r3, #0]
 8001b0c:	08db      	lsrs	r3, r3, #3
 8001b0e:	b29b      	uxth	r3, r3
 8001b10:	0018      	movs	r0, r3
 8001b12:	1cbb      	adds	r3, r7, #2
 8001b14:	881b      	ldrh	r3, [r3, #0]
 8001b16:	08db      	lsrs	r3, r3, #3
 8001b18:	b29b      	uxth	r3, r3
 8001b1a:	001a      	movs	r2, r3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	3208      	adds	r2, #8
 8001b20:	0092      	lsls	r2, r2, #2
 8001b22:	58d3      	ldr	r3, [r2, r3]
 8001b24:	1cba      	adds	r2, r7, #2
 8001b26:	8812      	ldrh	r2, [r2, #0]
 8001b28:	2107      	movs	r1, #7
 8001b2a:	400a      	ands	r2, r1
 8001b2c:	0092      	lsls	r2, r2, #2
 8001b2e:	210f      	movs	r1, #15
 8001b30:	4091      	lsls	r1, r2
 8001b32:	000a      	movs	r2, r1
 8001b34:	43d2      	mvns	r2, r2
 8001b36:	401a      	ands	r2, r3
 8001b38:	0011      	movs	r1, r2
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	0002      	movs	r2, r0
 8001b3e:	3208      	adds	r2, #8
 8001b40:	0092      	lsls	r2, r2, #2
 8001b42:	50d1      	str	r1, [r2, r3]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8001b44:	1cbb      	adds	r3, r7, #2
 8001b46:	881b      	ldrh	r3, [r3, #0]
 8001b48:	08db      	lsrs	r3, r3, #3
 8001b4a:	b29b      	uxth	r3, r3
 8001b4c:	001a      	movs	r2, r3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	3208      	adds	r2, #8
 8001b52:	0092      	lsls	r2, r2, #2
 8001b54:	58d2      	ldr	r2, [r2, r3]
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8001b5c:	1cbb      	adds	r3, r7, #2
 8001b5e:	881b      	ldrh	r3, [r3, #0]
 8001b60:	08db      	lsrs	r3, r3, #3
 8001b62:	b29b      	uxth	r3, r3
 8001b64:	001a      	movs	r2, r3
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	3208      	adds	r2, #8
 8001b6a:	0092      	lsls	r2, r2, #2
 8001b6c:	68b9      	ldr	r1, [r7, #8]
 8001b6e:	50d1      	str	r1, [r2, r3]
}
 8001b70:	46c0      	nop			; (mov r8, r8)
 8001b72:	46bd      	mov	sp, r7
 8001b74:	b004      	add	sp, #16
 8001b76:	bd80      	pop	{r7, pc}

08001b78 <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that
  *         contains the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b084      	sub	sp, #16
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8001b82:	2300      	movs	r3, #0
 8001b84:	60fb      	str	r3, [r7, #12]
  assert_param(IS_I2C_OWN_ADDRESS1(I2C_InitStruct->I2C_OwnAddress1));
  assert_param(IS_I2C_ACK(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

  /* Disable I2Cx Peripheral */
  I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_CR1_PE);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	4393      	bics	r3, r2
 8001b8e:	001a      	movs	r2, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx FILTERS Configuration ------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	60fb      	str	r3, [r7, #12]
  /* Clear I2Cx CR1 register */
  tmpreg &= CR1_CLEAR_MASK;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	4a27      	ldr	r2, [pc, #156]	; (8001c3c <I2C_Init+0xc4>)
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	60fb      	str	r3, [r7, #12]
  /* Configure I2Cx: analog and digital filter */
  /* Set ANFOFF bit according to I2C_AnalogFilter value */
  /* Set DFN bits according to I2C_DigitalFilter value */
  tmpreg |= (uint32_t)I2C_InitStruct->I2C_AnalogFilter |(I2C_InitStruct->I2C_DigitalFilter << 8);
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	685a      	ldr	r2, [r3, #4]
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	021b      	lsls	r3, r3, #8
 8001bac:	4313      	orrs	r3, r2
 8001bae:	68fa      	ldr	r2, [r7, #12]
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	60fb      	str	r3, [r7, #12]

  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	68fa      	ldr	r2, [r7, #12]
 8001bb8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMING Configuration -------------------*/
  /* Configure I2Cx: Timing */
  /* Set TIMINGR bits according to I2C_Timing */
  /* Write to I2Cx TIMING */
  I2Cx->TIMINGR = I2C_InitStruct->I2C_Timing & TIMING_CLEAR_MASK;
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a20      	ldr	r2, [pc, #128]	; (8001c40 <I2C_Init+0xc8>)
 8001bc0:	401a      	ands	r2, r3
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	611a      	str	r2, [r3, #16]

  /* Enable I2Cx Peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	2201      	movs	r2, #1
 8001bcc:	431a      	orrs	r2, r3
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Clear tmpreg local variable */
  tmpreg = 0;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	60fb      	str	r3, [r7, #12]
  /* Clear OAR1 register */
  I2Cx->OAR1 = (uint32_t)tmpreg;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	68fa      	ldr	r2, [r7, #12]
 8001bda:	609a      	str	r2, [r3, #8]
  /* Clear OAR2 register */
  I2Cx->OAR2 = (uint32_t)tmpreg;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	68fa      	ldr	r2, [r7, #12]
 8001be0:	60da      	str	r2, [r3, #12]
  /* Configure I2Cx: Own Address1 and acknowledged address */
  /* Set OA1MODE bit according to I2C_AcknowledgedAddress value */
  /* Set OA1 bits according to I2C_OwnAddress1 value */
  tmpreg = (uint32_t)((uint32_t)I2C_InitStruct->I2C_AcknowledgedAddress | \
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	699a      	ldr	r2, [r3, #24]
                      (uint32_t)I2C_InitStruct->I2C_OwnAddress1);
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	691b      	ldr	r3, [r3, #16]
  tmpreg = (uint32_t)((uint32_t)I2C_InitStruct->I2C_AcknowledgedAddress | \
 8001bea:	4313      	orrs	r3, r2
 8001bec:	60fb      	str	r3, [r7, #12]
  /* Write to I2Cx OAR1 */
  I2Cx->OAR1 = tmpreg;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	68fa      	ldr	r2, [r7, #12]
 8001bf2:	609a      	str	r2, [r3, #8]
  /* Enable Own Address1 acknowledgement */
  I2Cx->OAR1 |= I2C_OAR1_OA1EN;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	2280      	movs	r2, #128	; 0x80
 8001bfa:	0212      	lsls	r2, r2, #8
 8001bfc:	431a      	orrs	r2, r3
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	609a      	str	r2, [r3, #8]

  /*---------------------------- I2Cx MODE Configuration ---------------------*/
  /* Configure I2Cx: mode */
  /* Set SMBDEN and SMBHEN bits according to I2C_Mode value */
  tmpreg = I2C_InitStruct->I2C_Mode;
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	68db      	ldr	r3, [r3, #12]
 8001c06:	60fb      	str	r3, [r7, #12]
  /* Write to I2Cx CR1 */
  I2Cx->CR1 |= tmpreg;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	431a      	orrs	r2, r3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx ACK Configuration ----------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	60fb      	str	r3, [r7, #12]
  /* Clear I2Cx CR2 register */
  tmpreg &= CR2_CLEAR_MASK;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	4a09      	ldr	r2, [pc, #36]	; (8001c44 <I2C_Init+0xcc>)
 8001c1e:	4013      	ands	r3, r2
 8001c20:	60fb      	str	r3, [r7, #12]
  /* Configure I2Cx: acknowledgement */
  /* Set NACK bit according to I2C_Ack value */
  tmpreg |= I2C_InitStruct->I2C_Ack;
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	695b      	ldr	r3, [r3, #20]
 8001c26:	68fa      	ldr	r2, [r7, #12]
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	60fb      	str	r3, [r7, #12]
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	68fa      	ldr	r2, [r7, #12]
 8001c30:	605a      	str	r2, [r3, #4]
}
 8001c32:	46c0      	nop			; (mov r8, r8)
 8001c34:	46bd      	mov	sp, r7
 8001c36:	b004      	add	sp, #16
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	46c0      	nop			; (mov r8, r8)
 8001c3c:	00cfe0ff 	.word	0x00cfe0ff
 8001c40:	f0ffffff 	.word	0xf0ffffff
 8001c44:	07ff7fff 	.word	0x07ff7fff

08001c48 <I2C_Cmd>:
  * @param  NewState: new state of the I2Cx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	000a      	movs	r2, r1
 8001c52:	1cfb      	adds	r3, r7, #3
 8001c54:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001c56:	1cfb      	adds	r3, r7, #3
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d006      	beq.n	8001c6c <I2C_Cmd+0x24>
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= I2C_CR1_PE;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	2201      	movs	r2, #1
 8001c64:	431a      	orrs	r2, r3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_CR1_PE);
  }
}
 8001c6a:	e006      	b.n	8001c7a <I2C_Cmd+0x32>
    I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_CR1_PE);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	2201      	movs	r2, #1
 8001c72:	4393      	bics	r3, r2
 8001c74:	001a      	movs	r2, r3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	601a      	str	r2, [r3, #0]
}
 8001c7a:	46c0      	nop			; (mov r8, r8)
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	b002      	add	sp, #8
 8001c80:	bd80      	pop	{r7, pc}
	...

08001c84 <I2C_TransferHandling>:
  *            @arg I2C_Generate_Start_Read: Generate Restart for read request.
  *            @arg I2C_Generate_Start_Write: Generate Restart for write request.
  * @retval None
  */
void I2C_TransferHandling(I2C_TypeDef* I2Cx, uint16_t Address, uint8_t Number_Bytes, uint32_t ReloadEndMode, uint32_t StartStopMode)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b086      	sub	sp, #24
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	60f8      	str	r0, [r7, #12]
 8001c8c:	0008      	movs	r0, r1
 8001c8e:	0011      	movs	r1, r2
 8001c90:	607b      	str	r3, [r7, #4]
 8001c92:	230a      	movs	r3, #10
 8001c94:	18fb      	adds	r3, r7, r3
 8001c96:	1c02      	adds	r2, r0, #0
 8001c98:	801a      	strh	r2, [r3, #0]
 8001c9a:	2309      	movs	r3, #9
 8001c9c:	18fb      	adds	r3, r7, r3
 8001c9e:	1c0a      	adds	r2, r1, #0
 8001ca0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	617b      	str	r3, [r7, #20]
  assert_param(IS_I2C_SLAVE_ADDRESS(Address));  
  assert_param(IS_RELOAD_END_MODE(ReloadEndMode));
  assert_param(IS_START_STOP_MODE(StartStopMode));
    
  /* Get the CR2 register value */
  tmpreg = I2Cx->CR2;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	617b      	str	r3, [r7, #20]
  
  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	4a0f      	ldr	r2, [pc, #60]	; (8001cec <I2C_TransferHandling+0x68>)
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	617b      	str	r3, [r7, #20]
  
  /* update tmpreg */
  tmpreg |= (uint32_t)(((uint32_t)Address & I2C_CR2_SADD) | (((uint32_t)Number_Bytes << 16 ) & I2C_CR2_NBYTES) | \
 8001cb4:	230a      	movs	r3, #10
 8001cb6:	18fb      	adds	r3, r7, r3
 8001cb8:	881b      	ldrh	r3, [r3, #0]
 8001cba:	059b      	lsls	r3, r3, #22
 8001cbc:	0d9a      	lsrs	r2, r3, #22
 8001cbe:	2309      	movs	r3, #9
 8001cc0:	18fb      	adds	r3, r7, r3
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	0419      	lsls	r1, r3, #16
 8001cc6:	23ff      	movs	r3, #255	; 0xff
 8001cc8:	041b      	lsls	r3, r3, #16
 8001cca:	400b      	ands	r3, r1
 8001ccc:	431a      	orrs	r2, r3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	431a      	orrs	r2, r3
 8001cd2:	6a3b      	ldr	r3, [r7, #32]
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	697a      	ldr	r2, [r7, #20]
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	617b      	str	r3, [r7, #20]
            (uint32_t)ReloadEndMode | (uint32_t)StartStopMode);
  
  /* update CR2 register */
  I2Cx->CR2 = tmpreg;  
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	697a      	ldr	r2, [r7, #20]
 8001ce0:	605a      	str	r2, [r3, #4]
}
 8001ce2:	46c0      	nop			; (mov r8, r8)
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	b006      	add	sp, #24
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	46c0      	nop			; (mov r8, r8)
 8001cec:	fc009800 	.word	0xfc009800

08001cf0 <I2C_SendData>:
  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
  * @param  Data: Byte to be transmitted..
  * @retval None
  */
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	000a      	movs	r2, r1
 8001cfa:	1cfb      	adds	r3, r7, #3
 8001cfc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  
  /* Write in the DR register the data to be sent */
  I2Cx->TXDR = (uint8_t)Data;
 8001cfe:	1cfb      	adds	r3, r7, #3
 8001d00:	781a      	ldrb	r2, [r3, #0]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d06:	46c0      	nop			; (mov r8, r8)
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	b002      	add	sp, #8
 8001d0c:	bd80      	pop	{r7, pc}

08001d0e <I2C_ReceiveData>:
  * @brief  Returns the most recent received data by the I2Cx peripheral.
  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
  * @retval The value of the received data.
  */
uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)
{
 8001d0e:	b580      	push	{r7, lr}
 8001d10:	b082      	sub	sp, #8
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  
  /* Return the data in the DR register */
  return (uint8_t)I2Cx->RXDR;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d1a:	b2db      	uxtb	r3, r3
}  
 8001d1c:	0018      	movs	r0, r3
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	b002      	add	sp, #8
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <I2C_GetFlagStatus>:
  *            @arg I2C_FLAG_ALERT: SMBus Alert
  *            @arg I2C_FLAG_BUSY: Bus busy
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b084      	sub	sp, #16
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	60bb      	str	r3, [r7, #8]
  FlagStatus bitstatus = RESET;
 8001d32:	230f      	movs	r3, #15
 8001d34:	18fb      	adds	r3, r7, r3
 8001d36:	2200      	movs	r2, #0
 8001d38:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));
  
  /* Get the ISR register value */
  tmpreg = I2Cx->ISR;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	699b      	ldr	r3, [r3, #24]
 8001d3e:	60bb      	str	r3, [r7, #8]
  
  /* Get flag status */
  tmpreg &= I2C_FLAG;
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	683a      	ldr	r2, [r7, #0]
 8001d44:	4013      	ands	r3, r2
 8001d46:	60bb      	str	r3, [r7, #8]
  
  if(tmpreg != 0)
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d004      	beq.n	8001d58 <I2C_GetFlagStatus+0x34>
  {
    /* I2C_FLAG is set */
    bitstatus = SET;
 8001d4e:	230f      	movs	r3, #15
 8001d50:	18fb      	adds	r3, r7, r3
 8001d52:	2201      	movs	r2, #1
 8001d54:	701a      	strb	r2, [r3, #0]
 8001d56:	e003      	b.n	8001d60 <I2C_GetFlagStatus+0x3c>
  }
  else
  {
    /* I2C_FLAG is reset */
    bitstatus = RESET;
 8001d58:	230f      	movs	r3, #15
 8001d5a:	18fb      	adds	r3, r7, r3
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001d60:	230f      	movs	r3, #15
 8001d62:	18fb      	adds	r3, r7, r3
 8001d64:	781b      	ldrb	r3, [r3, #0]
} 
 8001d66:	0018      	movs	r0, r3
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	b004      	add	sp, #16
 8001d6c:	bd80      	pop	{r7, pc}

08001d6e <I2C_ClearFlag>:
  *            @arg I2C_FLAG_TIMEOUT: Timeout or Tlow detection flag
  *            @arg I2C_FLAG_ALERT: SMBus Alert
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
void I2C_ClearFlag(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{ 
 8001d6e:	b580      	push	{r7, lr}
 8001d70:	b082      	sub	sp, #8
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	6078      	str	r0, [r7, #4]
 8001d76:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_CLEAR_FLAG(I2C_FLAG));

  /* Clear the selected flag */
  I2Cx->ICR = I2C_FLAG;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	683a      	ldr	r2, [r7, #0]
 8001d7c:	61da      	str	r2, [r3, #28]
  }
 8001d7e:	46c0      	nop			; (mov r8, r8)
 8001d80:	46bd      	mov	sp, r7
 8001d82:	b002      	add	sp, #8
 8001d84:	bd80      	pop	{r7, pc}
	...

08001d88 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	000a      	movs	r2, r1
 8001d92:	1cfb      	adds	r3, r7, #3
 8001d94:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001d96:	1cfb      	adds	r3, r7, #3
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d006      	beq.n	8001dac <RCC_AHBPeriphClockCmd+0x24>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8001d9e:	4b09      	ldr	r3, [pc, #36]	; (8001dc4 <RCC_AHBPeriphClockCmd+0x3c>)
 8001da0:	4a08      	ldr	r2, [pc, #32]	; (8001dc4 <RCC_AHBPeriphClockCmd+0x3c>)
 8001da2:	6951      	ldr	r1, [r2, #20]
 8001da4:	687a      	ldr	r2, [r7, #4]
 8001da6:	430a      	orrs	r2, r1
 8001da8:	615a      	str	r2, [r3, #20]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 8001daa:	e006      	b.n	8001dba <RCC_AHBPeriphClockCmd+0x32>
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8001dac:	4b05      	ldr	r3, [pc, #20]	; (8001dc4 <RCC_AHBPeriphClockCmd+0x3c>)
 8001dae:	4a05      	ldr	r2, [pc, #20]	; (8001dc4 <RCC_AHBPeriphClockCmd+0x3c>)
 8001db0:	6952      	ldr	r2, [r2, #20]
 8001db2:	6879      	ldr	r1, [r7, #4]
 8001db4:	43c9      	mvns	r1, r1
 8001db6:	400a      	ands	r2, r1
 8001db8:	615a      	str	r2, [r3, #20]
}
 8001dba:	46c0      	nop			; (mov r8, r8)
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	b002      	add	sp, #8
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	46c0      	nop			; (mov r8, r8)
 8001dc4:	40021000 	.word	0x40021000

08001dc8 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	000a      	movs	r2, r1
 8001dd2:	1cfb      	adds	r3, r7, #3
 8001dd4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001dd6:	1cfb      	adds	r3, r7, #3
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d006      	beq.n	8001dec <RCC_APB1PeriphClockCmd+0x24>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8001dde:	4b09      	ldr	r3, [pc, #36]	; (8001e04 <RCC_APB1PeriphClockCmd+0x3c>)
 8001de0:	4a08      	ldr	r2, [pc, #32]	; (8001e04 <RCC_APB1PeriphClockCmd+0x3c>)
 8001de2:	69d1      	ldr	r1, [r2, #28]
 8001de4:	687a      	ldr	r2, [r7, #4]
 8001de6:	430a      	orrs	r2, r1
 8001de8:	61da      	str	r2, [r3, #28]
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8001dea:	e006      	b.n	8001dfa <RCC_APB1PeriphClockCmd+0x32>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8001dec:	4b05      	ldr	r3, [pc, #20]	; (8001e04 <RCC_APB1PeriphClockCmd+0x3c>)
 8001dee:	4a05      	ldr	r2, [pc, #20]	; (8001e04 <RCC_APB1PeriphClockCmd+0x3c>)
 8001df0:	69d2      	ldr	r2, [r2, #28]
 8001df2:	6879      	ldr	r1, [r7, #4]
 8001df4:	43c9      	mvns	r1, r1
 8001df6:	400a      	ands	r2, r1
 8001df8:	61da      	str	r2, [r3, #28]
}
 8001dfa:	46c0      	nop			; (mov r8, r8)
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	b002      	add	sp, #8
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	46c0      	nop			; (mov r8, r8)
 8001e04:	40021000 	.word	0x40021000

08001e08 <USART_SendData>:
  * @note   USART2 is not available for STM32F031 devices.  
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	000a      	movs	r2, r1
 8001e12:	1cbb      	adds	r3, r7, #2
 8001e14:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->TDR = (Data & (uint16_t)0x01FF);
 8001e16:	1cbb      	adds	r3, r7, #2
 8001e18:	881b      	ldrh	r3, [r3, #0]
 8001e1a:	05db      	lsls	r3, r3, #23
 8001e1c:	0ddb      	lsrs	r3, r3, #23
 8001e1e:	b29a      	uxth	r2, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	851a      	strh	r2, [r3, #40]	; 0x28
}
 8001e24:	46c0      	nop			; (mov r8, r8)
 8001e26:	46bd      	mov	sp, r7
 8001e28:	b002      	add	sp, #8
 8001e2a:	bd80      	pop	{r7, pc}

08001e2c <USART_ReceiveData>:
  * @note   USART3 and USART4 are available only for STM32F072 devices.
  * @note   USART2 is not available for STM32F031 devices.   
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->RDR & (uint16_t)0x01FF);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001e38:	b29b      	uxth	r3, r3
 8001e3a:	05db      	lsls	r3, r3, #23
 8001e3c:	0ddb      	lsrs	r3, r3, #23
 8001e3e:	b29b      	uxth	r3, r3
}
 8001e40:	0018      	movs	r0, r3
 8001e42:	46bd      	mov	sp, r7
 8001e44:	b002      	add	sp, #8
 8001e46:	bd80      	pop	{r7, pc}

08001e48 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint32_t USART_IT, FunctionalState NewState)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b088      	sub	sp, #32
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	60f8      	str	r0, [r7, #12]
 8001e50:	60b9      	str	r1, [r7, #8]
 8001e52:	1dfb      	adds	r3, r7, #7
 8001e54:	701a      	strb	r2, [r3, #0]
  uint32_t usartreg = 0, itpos = 0, itmask = 0;
 8001e56:	2300      	movs	r3, #0
 8001e58:	61bb      	str	r3, [r7, #24]
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	617b      	str	r3, [r7, #20]
 8001e5e:	2300      	movs	r3, #0
 8001e60:	613b      	str	r3, [r7, #16]
  uint32_t usartxbase = 0;
 8001e62:	2300      	movs	r3, #0
 8001e64:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CONFIG_IT(USART_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  usartxbase = (uint32_t)USARTx;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	61fb      	str	r3, [r7, #28]
  
  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	b29b      	uxth	r3, r3
 8001e6e:	0a1b      	lsrs	r3, r3, #8
 8001e70:	b29b      	uxth	r3, r3
 8001e72:	61bb      	str	r3, [r7, #24]
  
  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	22ff      	movs	r2, #255	; 0xff
 8001e78:	4013      	ands	r3, r2
 8001e7a:	617b      	str	r3, [r7, #20]
  itmask = (((uint32_t)0x01) << itpos);
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	409a      	lsls	r2, r3
 8001e82:	0013      	movs	r3, r2
 8001e84:	613b      	str	r3, [r7, #16]
  
  if (usartreg == 0x02) /* The IT is in CR2 register */
 8001e86:	69bb      	ldr	r3, [r7, #24]
 8001e88:	2b02      	cmp	r3, #2
 8001e8a:	d103      	bne.n	8001e94 <USART_ITConfig+0x4c>
  {
    usartxbase += 0x04;
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	3304      	adds	r3, #4
 8001e90:	61fb      	str	r3, [r7, #28]
 8001e92:	e005      	b.n	8001ea0 <USART_ITConfig+0x58>
  }
  else if (usartreg == 0x03) /* The IT is in CR3 register */
 8001e94:	69bb      	ldr	r3, [r7, #24]
 8001e96:	2b03      	cmp	r3, #3
 8001e98:	d102      	bne.n	8001ea0 <USART_ITConfig+0x58>
  {
    usartxbase += 0x08;
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	3308      	adds	r3, #8
 8001e9e:	61fb      	str	r3, [r7, #28]
  }
  else /* The IT is in CR1 register */
  {
  }
  if (NewState != DISABLE)
 8001ea0:	1dfb      	adds	r3, r7, #7
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d006      	beq.n	8001eb6 <USART_ITConfig+0x6e>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	69fa      	ldr	r2, [r7, #28]
 8001eac:	6811      	ldr	r1, [r2, #0]
 8001eae:	693a      	ldr	r2, [r7, #16]
 8001eb0:	430a      	orrs	r2, r1
 8001eb2:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8001eb4:	e006      	b.n	8001ec4 <USART_ITConfig+0x7c>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	69fa      	ldr	r2, [r7, #28]
 8001eba:	6812      	ldr	r2, [r2, #0]
 8001ebc:	6939      	ldr	r1, [r7, #16]
 8001ebe:	43c9      	mvns	r1, r1
 8001ec0:	400a      	ands	r2, r1
 8001ec2:	601a      	str	r2, [r3, #0]
}
 8001ec4:	46c0      	nop			; (mov r8, r8)
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	b008      	add	sp, #32
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <CEC_CAN_IRQHandler>:
//	}
//	//USART_WriteString("\n\r");
}

void CEC_CAN_IRQHandler(void)
{
 8001ecc:	b590      	push	{r4, r7, lr}
 8001ece:	b09d      	sub	sp, #116	; 0x74
 8001ed0:	af00      	add	r7, sp, #0
	CanRxMsg can_rx_msg;
	CanTxMsg can_tx_msg;
	uint32_t i = 0;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	66fb      	str	r3, [r7, #108]	; 0x6c
	uint8_t j = 0;
 8001ed6:	236b      	movs	r3, #107	; 0x6b
 8001ed8:	18fb      	adds	r3, r7, r3
 8001eda:	2200      	movs	r2, #0
 8001edc:	701a      	strb	r2, [r3, #0]
	uint8_t TransmitMailbox = 0;
 8001ede:	2369      	movs	r3, #105	; 0x69
 8001ee0:	18fb      	adds	r3, r7, r3
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	701a      	strb	r2, [r3, #0]
	uint8_t valid_data = 0;
 8001ee6:	236a      	movs	r3, #106	; 0x6a
 8001ee8:	18fb      	adds	r3, r7, r3
 8001eea:	2200      	movs	r2, #0
 8001eec:	701a      	strb	r2, [r3, #0]

	can_rx_msg.StdId = 0x00;
 8001eee:	2354      	movs	r3, #84	; 0x54
 8001ef0:	18fb      	adds	r3, r7, r3
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	601a      	str	r2, [r3, #0]
	can_rx_msg.IDE = CAN_ID_STD;
 8001ef6:	2354      	movs	r3, #84	; 0x54
 8001ef8:	18fb      	adds	r3, r7, r3
 8001efa:	2200      	movs	r2, #0
 8001efc:	721a      	strb	r2, [r3, #8]
	can_rx_msg.DLC = 0;
 8001efe:	2354      	movs	r3, #84	; 0x54
 8001f00:	18fb      	adds	r3, r7, r3
 8001f02:	2200      	movs	r2, #0
 8001f04:	729a      	strb	r2, [r3, #10]
	can_rx_msg.Data[0] = 0x00;
 8001f06:	2354      	movs	r3, #84	; 0x54
 8001f08:	18fb      	adds	r3, r7, r3
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	72da      	strb	r2, [r3, #11]
	can_rx_msg.Data[1] = 0x00;
 8001f0e:	2354      	movs	r3, #84	; 0x54
 8001f10:	18fb      	adds	r3, r7, r3
 8001f12:	2200      	movs	r2, #0
 8001f14:	731a      	strb	r2, [r3, #12]
	can_rx_msg.Data[2] = 0x00;
 8001f16:	2354      	movs	r3, #84	; 0x54
 8001f18:	18fb      	adds	r3, r7, r3
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	735a      	strb	r2, [r3, #13]
	can_rx_msg.Data[3] = 0x00;
 8001f1e:	2354      	movs	r3, #84	; 0x54
 8001f20:	18fb      	adds	r3, r7, r3
 8001f22:	2200      	movs	r2, #0
 8001f24:	739a      	strb	r2, [r3, #14]
	can_rx_msg.Data[4] = 0x00;
 8001f26:	2354      	movs	r3, #84	; 0x54
 8001f28:	18fb      	adds	r3, r7, r3
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	73da      	strb	r2, [r3, #15]
	can_rx_msg.Data[5] = 0x00;
 8001f2e:	2354      	movs	r3, #84	; 0x54
 8001f30:	18fb      	adds	r3, r7, r3
 8001f32:	2200      	movs	r2, #0
 8001f34:	741a      	strb	r2, [r3, #16]
	can_rx_msg.Data[6] = 0x00;
 8001f36:	2354      	movs	r3, #84	; 0x54
 8001f38:	18fb      	adds	r3, r7, r3
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	745a      	strb	r2, [r3, #17]
	can_rx_msg.Data[7] = 0x00;
 8001f3e:	2354      	movs	r3, #84	; 0x54
 8001f40:	18fb      	adds	r3, r7, r3
 8001f42:	2200      	movs	r2, #0
 8001f44:	749a      	strb	r2, [r3, #18]
	CAN_Receive(CAN, CAN_FIFO0, &can_rx_msg);
 8001f46:	2354      	movs	r3, #84	; 0x54
 8001f48:	18fb      	adds	r3, r7, r3
 8001f4a:	48a9      	ldr	r0, [pc, #676]	; (80021f0 <CEC_CAN_IRQHandler+0x324>)
 8001f4c:	001a      	movs	r2, r3
 8001f4e:	2100      	movs	r1, #0
 8001f50:	f7ff fbe4 	bl	800171c <CAN_Receive>

	can_tx_msg.StdId = 0x00;
 8001f54:	2340      	movs	r3, #64	; 0x40
 8001f56:	18fb      	adds	r3, r7, r3
 8001f58:	2200      	movs	r2, #0
 8001f5a:	601a      	str	r2, [r3, #0]
	can_tx_msg.IDE = CAN_ID_STD;
 8001f5c:	2340      	movs	r3, #64	; 0x40
 8001f5e:	18fb      	adds	r3, r7, r3
 8001f60:	2200      	movs	r2, #0
 8001f62:	721a      	strb	r2, [r3, #8]
	can_tx_msg.DLC = 0;
 8001f64:	2340      	movs	r3, #64	; 0x40
 8001f66:	18fb      	adds	r3, r7, r3
 8001f68:	2200      	movs	r2, #0
 8001f6a:	729a      	strb	r2, [r3, #10]
	can_tx_msg.Data[0] = 0x00;
 8001f6c:	2340      	movs	r3, #64	; 0x40
 8001f6e:	18fb      	adds	r3, r7, r3
 8001f70:	2200      	movs	r2, #0
 8001f72:	72da      	strb	r2, [r3, #11]
	can_tx_msg.Data[1] = 0x00;
 8001f74:	2340      	movs	r3, #64	; 0x40
 8001f76:	18fb      	adds	r3, r7, r3
 8001f78:	2200      	movs	r2, #0
 8001f7a:	731a      	strb	r2, [r3, #12]
	can_tx_msg.Data[2] = 0x00;
 8001f7c:	2340      	movs	r3, #64	; 0x40
 8001f7e:	18fb      	adds	r3, r7, r3
 8001f80:	2200      	movs	r2, #0
 8001f82:	735a      	strb	r2, [r3, #13]
	can_tx_msg.Data[3] = 0x00;
 8001f84:	2340      	movs	r3, #64	; 0x40
 8001f86:	18fb      	adds	r3, r7, r3
 8001f88:	2200      	movs	r2, #0
 8001f8a:	739a      	strb	r2, [r3, #14]
	can_tx_msg.Data[4] = 0x00;
 8001f8c:	2340      	movs	r3, #64	; 0x40
 8001f8e:	18fb      	adds	r3, r7, r3
 8001f90:	2200      	movs	r2, #0
 8001f92:	73da      	strb	r2, [r3, #15]
	can_tx_msg.Data[5] = 0x00;
 8001f94:	2340      	movs	r3, #64	; 0x40
 8001f96:	18fb      	adds	r3, r7, r3
 8001f98:	2200      	movs	r2, #0
 8001f9a:	741a      	strb	r2, [r3, #16]
	can_tx_msg.Data[6] = 0x00;
 8001f9c:	2340      	movs	r3, #64	; 0x40
 8001f9e:	18fb      	adds	r3, r7, r3
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	745a      	strb	r2, [r3, #17]
	can_tx_msg.Data[7] = 0x00;
 8001fa4:	2340      	movs	r3, #64	; 0x40
 8001fa6:	18fb      	adds	r3, r7, r3
 8001fa8:	2200      	movs	r2, #0
 8001faa:	749a      	strb	r2, [r3, #18]

	// I2C send buffer
	uint8_t i2c_tx_msg[32];
	uint8_t i2c_rx_msg[32];

	switch (can_rx_msg.StdId)
 8001fac:	2354      	movs	r3, #84	; 0x54
 8001fae:	18fb      	adds	r3, r7, r3
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d002      	beq.n	8001fbc <CEC_CAN_IRQHandler+0xf0>
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d037      	beq.n	800202a <CEC_CAN_IRQHandler+0x15e>
			{
			  i++;
			}
			break;
		default:
			break;
 8001fba:	e114      	b.n	80021e6 <CEC_CAN_IRQHandler+0x31a>
			switch (can_rx_msg.Data[1])
 8001fbc:	2354      	movs	r3, #84	; 0x54
 8001fbe:	18fb      	adds	r3, r7, r3
 8001fc0:	7b1b      	ldrb	r3, [r3, #12]
 8001fc2:	3b41      	subs	r3, #65	; 0x41
 8001fc4:	2b33      	cmp	r3, #51	; 0x33
 8001fc6:	d900      	bls.n	8001fca <CEC_CAN_IRQHandler+0xfe>
 8001fc8:	e10a      	b.n	80021e0 <CEC_CAN_IRQHandler+0x314>
 8001fca:	009a      	lsls	r2, r3, #2
 8001fcc:	4b89      	ldr	r3, [pc, #548]	; (80021f4 <CEC_CAN_IRQHandler+0x328>)
 8001fce:	18d3      	adds	r3, r2, r3
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	469f      	mov	pc, r3
					for (i = 0; i < can_rx_msg.DLC - 1; i++)
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001fd8:	e00e      	b.n	8001ff8 <CEC_CAN_IRQHandler+0x12c>
						i2c_tx_msg[i] = can_rx_msg.Data[i+1];
 8001fda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fdc:	3301      	adds	r3, #1
 8001fde:	2254      	movs	r2, #84	; 0x54
 8001fe0:	18ba      	adds	r2, r7, r2
 8001fe2:	18d3      	adds	r3, r2, r3
 8001fe4:	7ad9      	ldrb	r1, [r3, #11]
 8001fe6:	2320      	movs	r3, #32
 8001fe8:	18fa      	adds	r2, r7, r3
 8001fea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fec:	18d3      	adds	r3, r2, r3
 8001fee:	1c0a      	adds	r2, r1, #0
 8001ff0:	701a      	strb	r2, [r3, #0]
					for (i = 0; i < can_rx_msg.DLC - 1; i++)
 8001ff2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ff4:	3301      	adds	r3, #1
 8001ff6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001ff8:	2354      	movs	r3, #84	; 0x54
 8001ffa:	18fb      	adds	r3, r7, r3
 8001ffc:	7a9b      	ldrb	r3, [r3, #10]
 8001ffe:	3b01      	subs	r3, #1
 8002000:	001a      	movs	r2, r3
 8002002:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002004:	429a      	cmp	r2, r3
 8002006:	d8e8      	bhi.n	8001fda <CEC_CAN_IRQHandler+0x10e>
					I2C_WrReg(can_rx_msg.Data[0], 0x00, i2c_tx_msg, can_rx_msg.DLC - 1);
 8002008:	2354      	movs	r3, #84	; 0x54
 800200a:	18fb      	adds	r3, r7, r3
 800200c:	7ad8      	ldrb	r0, [r3, #11]
 800200e:	2354      	movs	r3, #84	; 0x54
 8002010:	18fb      	adds	r3, r7, r3
 8002012:	7a9b      	ldrb	r3, [r3, #10]
 8002014:	b29b      	uxth	r3, r3
 8002016:	3b01      	subs	r3, #1
 8002018:	b29b      	uxth	r3, r3
 800201a:	2220      	movs	r2, #32
 800201c:	18ba      	adds	r2, r7, r2
 800201e:	2100      	movs	r1, #0
 8002020:	f000 f90a 	bl	8002238 <I2C_WrReg>
					break;
 8002024:	e000      	b.n	8002028 <CEC_CAN_IRQHandler+0x15c>
					break;
 8002026:	46c0      	nop			; (mov r8, r8)
			break;
 8002028:	e0da      	b.n	80021e0 <CEC_CAN_IRQHandler+0x314>
			for (i = 0; i < can_rx_msg.DLC - 1; i++)
 800202a:	2300      	movs	r3, #0
 800202c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800202e:	e00e      	b.n	800204e <CEC_CAN_IRQHandler+0x182>
				i2c_tx_msg[i] = can_rx_msg.Data[i+1];
 8002030:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002032:	3301      	adds	r3, #1
 8002034:	2254      	movs	r2, #84	; 0x54
 8002036:	18ba      	adds	r2, r7, r2
 8002038:	18d3      	adds	r3, r2, r3
 800203a:	7ad9      	ldrb	r1, [r3, #11]
 800203c:	2320      	movs	r3, #32
 800203e:	18fa      	adds	r2, r7, r3
 8002040:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002042:	18d3      	adds	r3, r2, r3
 8002044:	1c0a      	adds	r2, r1, #0
 8002046:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < can_rx_msg.DLC - 1; i++)
 8002048:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800204a:	3301      	adds	r3, #1
 800204c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800204e:	2354      	movs	r3, #84	; 0x54
 8002050:	18fb      	adds	r3, r7, r3
 8002052:	7a9b      	ldrb	r3, [r3, #10]
 8002054:	3b01      	subs	r3, #1
 8002056:	001a      	movs	r2, r3
 8002058:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800205a:	429a      	cmp	r2, r3
 800205c:	d8e8      	bhi.n	8002030 <CEC_CAN_IRQHandler+0x164>
			i2c_tx_msg[i++] = '\r';
 800205e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002060:	1c5a      	adds	r2, r3, #1
 8002062:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002064:	2220      	movs	r2, #32
 8002066:	18ba      	adds	r2, r7, r2
 8002068:	210d      	movs	r1, #13
 800206a:	54d1      	strb	r1, [r2, r3]
			i2c_tx_msg[i] = '\n';
 800206c:	2320      	movs	r3, #32
 800206e:	18fa      	adds	r2, r7, r3
 8002070:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002072:	18d3      	adds	r3, r2, r3
 8002074:	220a      	movs	r2, #10
 8002076:	701a      	strb	r2, [r3, #0]
			I2C_WrReg(can_rx_msg.Data[0], 0x00, i2c_tx_msg, can_rx_msg.DLC + 1);
 8002078:	2354      	movs	r3, #84	; 0x54
 800207a:	18fb      	adds	r3, r7, r3
 800207c:	7ad8      	ldrb	r0, [r3, #11]
 800207e:	2354      	movs	r3, #84	; 0x54
 8002080:	18fb      	adds	r3, r7, r3
 8002082:	7a9b      	ldrb	r3, [r3, #10]
 8002084:	b29b      	uxth	r3, r3
 8002086:	3301      	adds	r3, #1
 8002088:	b29b      	uxth	r3, r3
 800208a:	2220      	movs	r2, #32
 800208c:	18ba      	adds	r2, r7, r2
 800208e:	2100      	movs	r1, #0
 8002090:	f000 f8d2 	bl	8002238 <I2C_WrReg>
			I2C_RdRegLW(can_rx_msg.Data[0], i2c_rx_msg, 16);
 8002094:	2354      	movs	r3, #84	; 0x54
 8002096:	18fb      	adds	r3, r7, r3
 8002098:	7adb      	ldrb	r3, [r3, #11]
 800209a:	0039      	movs	r1, r7
 800209c:	2210      	movs	r2, #16
 800209e:	0018      	movs	r0, r3
 80020a0:	f000 f990 	bl	80023c4 <I2C_RdRegLW>
			can_tx_msg.StdId = can_rx_msg.StdId;
 80020a4:	2354      	movs	r3, #84	; 0x54
 80020a6:	18fb      	adds	r3, r7, r3
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	2340      	movs	r3, #64	; 0x40
 80020ac:	18fb      	adds	r3, r7, r3
 80020ae:	601a      	str	r2, [r3, #0]
			can_tx_msg.Data[0] = can_rx_msg.Data[0];
 80020b0:	2354      	movs	r3, #84	; 0x54
 80020b2:	18fb      	adds	r3, r7, r3
 80020b4:	7ada      	ldrb	r2, [r3, #11]
 80020b6:	2340      	movs	r3, #64	; 0x40
 80020b8:	18fb      	adds	r3, r7, r3
 80020ba:	72da      	strb	r2, [r3, #11]
			j = 1;
 80020bc:	236b      	movs	r3, #107	; 0x6b
 80020be:	18fb      	adds	r3, r7, r3
 80020c0:	2201      	movs	r2, #1
 80020c2:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < 32; i++)
 80020c4:	2300      	movs	r3, #0
 80020c6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80020c8:	e04f      	b.n	800216a <CEC_CAN_IRQHandler+0x29e>
				if (!valid_data)
 80020ca:	236a      	movs	r3, #106	; 0x6a
 80020cc:	18fb      	adds	r3, r7, r3
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d10a      	bne.n	80020ea <CEC_CAN_IRQHandler+0x21e>
					if (i2c_rx_msg[i] == ':')
 80020d4:	003a      	movs	r2, r7
 80020d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020d8:	18d3      	adds	r3, r2, r3
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	2b3a      	cmp	r3, #58	; 0x3a
 80020de:	d141      	bne.n	8002164 <CEC_CAN_IRQHandler+0x298>
						valid_data = 1;
 80020e0:	236a      	movs	r3, #106	; 0x6a
 80020e2:	18fb      	adds	r3, r7, r3
 80020e4:	2201      	movs	r2, #1
 80020e6:	701a      	strb	r2, [r3, #0]
 80020e8:	e03c      	b.n	8002164 <CEC_CAN_IRQHandler+0x298>
					if ((i2c_rx_msg[i] >= 48 && i2c_rx_msg[i] <= 57)
 80020ea:	003a      	movs	r2, r7
 80020ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020ee:	18d3      	adds	r3, r2, r3
 80020f0:	781b      	ldrb	r3, [r3, #0]
 80020f2:	2b2f      	cmp	r3, #47	; 0x2f
 80020f4:	d905      	bls.n	8002102 <CEC_CAN_IRQHandler+0x236>
 80020f6:	003a      	movs	r2, r7
 80020f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020fa:	18d3      	adds	r3, r2, r3
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	2b39      	cmp	r3, #57	; 0x39
 8002100:	d91d      	bls.n	800213e <CEC_CAN_IRQHandler+0x272>
							|| (i2c_rx_msg[i] >= 65 && i2c_rx_msg[i] <= 90)
 8002102:	003a      	movs	r2, r7
 8002104:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002106:	18d3      	adds	r3, r2, r3
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	2b40      	cmp	r3, #64	; 0x40
 800210c:	d905      	bls.n	800211a <CEC_CAN_IRQHandler+0x24e>
 800210e:	003a      	movs	r2, r7
 8002110:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002112:	18d3      	adds	r3, r2, r3
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	2b5a      	cmp	r3, #90	; 0x5a
 8002118:	d911      	bls.n	800213e <CEC_CAN_IRQHandler+0x272>
							|| (i2c_rx_msg[i] >= 97 && i2c_rx_msg[i] <= 122)
 800211a:	003a      	movs	r2, r7
 800211c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800211e:	18d3      	adds	r3, r2, r3
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	2b60      	cmp	r3, #96	; 0x60
 8002124:	d905      	bls.n	8002132 <CEC_CAN_IRQHandler+0x266>
 8002126:	003a      	movs	r2, r7
 8002128:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800212a:	18d3      	adds	r3, r2, r3
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	2b7a      	cmp	r3, #122	; 0x7a
 8002130:	d905      	bls.n	800213e <CEC_CAN_IRQHandler+0x272>
							|| i2c_rx_msg[i] == 46)
 8002132:	003a      	movs	r2, r7
 8002134:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002136:	18d3      	adds	r3, r2, r3
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	2b2e      	cmp	r3, #46	; 0x2e
 800213c:	d118      	bne.n	8002170 <CEC_CAN_IRQHandler+0x2a4>
						can_tx_msg.Data[j] = i2c_rx_msg[i];
 800213e:	236b      	movs	r3, #107	; 0x6b
 8002140:	18fb      	adds	r3, r7, r3
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	0039      	movs	r1, r7
 8002146:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002148:	188a      	adds	r2, r1, r2
 800214a:	7811      	ldrb	r1, [r2, #0]
 800214c:	2240      	movs	r2, #64	; 0x40
 800214e:	18ba      	adds	r2, r7, r2
 8002150:	18d3      	adds	r3, r2, r3
 8002152:	1c0a      	adds	r2, r1, #0
 8002154:	72da      	strb	r2, [r3, #11]
						j++;
 8002156:	236b      	movs	r3, #107	; 0x6b
 8002158:	18fb      	adds	r3, r7, r3
 800215a:	781a      	ldrb	r2, [r3, #0]
 800215c:	236b      	movs	r3, #107	; 0x6b
 800215e:	18fb      	adds	r3, r7, r3
 8002160:	3201      	adds	r2, #1
 8002162:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < 32; i++)
 8002164:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002166:	3301      	adds	r3, #1
 8002168:	66fb      	str	r3, [r7, #108]	; 0x6c
 800216a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800216c:	2b1f      	cmp	r3, #31
 800216e:	d9ac      	bls.n	80020ca <CEC_CAN_IRQHandler+0x1fe>
			can_tx_msg.DLC = j;
 8002170:	2340      	movs	r3, #64	; 0x40
 8002172:	18fb      	adds	r3, r7, r3
 8002174:	226b      	movs	r2, #107	; 0x6b
 8002176:	18ba      	adds	r2, r7, r2
 8002178:	7812      	ldrb	r2, [r2, #0]
 800217a:	729a      	strb	r2, [r3, #10]
			TransmitMailbox = CAN_Transmit(CAN, &can_tx_msg);
 800217c:	2369      	movs	r3, #105	; 0x69
 800217e:	18fc      	adds	r4, r7, r3
 8002180:	2340      	movs	r3, #64	; 0x40
 8002182:	18fb      	adds	r3, r7, r3
 8002184:	4a1a      	ldr	r2, [pc, #104]	; (80021f0 <CEC_CAN_IRQHandler+0x324>)
 8002186:	0019      	movs	r1, r3
 8002188:	0010      	movs	r0, r2
 800218a:	f7ff f963 	bl	8001454 <CAN_Transmit>
 800218e:	0003      	movs	r3, r0
 8002190:	7023      	strb	r3, [r4, #0]
			i = 0;
 8002192:	2300      	movs	r3, #0
 8002194:	66fb      	str	r3, [r7, #108]	; 0x6c
			while((CAN_TransmitStatus(CAN, TransmitMailbox)  !=  CANTXOK) && (i  <=  0xFFFF))
 8002196:	e002      	b.n	800219e <CEC_CAN_IRQHandler+0x2d2>
			  i++;
 8002198:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800219a:	3301      	adds	r3, #1
 800219c:	66fb      	str	r3, [r7, #108]	; 0x6c
			while((CAN_TransmitStatus(CAN, TransmitMailbox)  !=  CANTXOK) && (i  <=  0xFFFF))
 800219e:	2369      	movs	r3, #105	; 0x69
 80021a0:	18fb      	adds	r3, r7, r3
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	4a12      	ldr	r2, [pc, #72]	; (80021f0 <CEC_CAN_IRQHandler+0x324>)
 80021a6:	0019      	movs	r1, r3
 80021a8:	0010      	movs	r0, r2
 80021aa:	f7ff fa4d 	bl	8001648 <CAN_TransmitStatus>
 80021ae:	0003      	movs	r3, r0
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d003      	beq.n	80021bc <CEC_CAN_IRQHandler+0x2f0>
 80021b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021b6:	4a10      	ldr	r2, [pc, #64]	; (80021f8 <CEC_CAN_IRQHandler+0x32c>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d9ed      	bls.n	8002198 <CEC_CAN_IRQHandler+0x2cc>
			i = 0;
 80021bc:	2300      	movs	r3, #0
 80021be:	66fb      	str	r3, [r7, #108]	; 0x6c
			while((CAN_MessagePending(CAN, CAN_FIFO0) < 1) && (i  <=  0xFFFF))
 80021c0:	e002      	b.n	80021c8 <CEC_CAN_IRQHandler+0x2fc>
			  i++;
 80021c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021c4:	3301      	adds	r3, #1
 80021c6:	66fb      	str	r3, [r7, #108]	; 0x6c
			while((CAN_MessagePending(CAN, CAN_FIFO0) < 1) && (i  <=  0xFFFF))
 80021c8:	4b09      	ldr	r3, [pc, #36]	; (80021f0 <CEC_CAN_IRQHandler+0x324>)
 80021ca:	2100      	movs	r1, #0
 80021cc:	0018      	movs	r0, r3
 80021ce:	f7ff fb85 	bl	80018dc <CAN_MessagePending>
 80021d2:	1e03      	subs	r3, r0, #0
 80021d4:	d106      	bne.n	80021e4 <CEC_CAN_IRQHandler+0x318>
 80021d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021d8:	4a07      	ldr	r2, [pc, #28]	; (80021f8 <CEC_CAN_IRQHandler+0x32c>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d9f1      	bls.n	80021c2 <CEC_CAN_IRQHandler+0x2f6>
			break;
 80021de:	e001      	b.n	80021e4 <CEC_CAN_IRQHandler+0x318>
			break;
 80021e0:	46c0      	nop			; (mov r8, r8)
 80021e2:	e000      	b.n	80021e6 <CEC_CAN_IRQHandler+0x31a>
			break;
 80021e4:	46c0      	nop			; (mov r8, r8)
	}
}
 80021e6:	46c0      	nop			; (mov r8, r8)
 80021e8:	46bd      	mov	sp, r7
 80021ea:	b01d      	add	sp, #116	; 0x74
 80021ec:	bd90      	pop	{r4, r7, pc}
 80021ee:	46c0      	nop			; (mov r8, r8)
 80021f0:	40006400 	.word	0x40006400
 80021f4:	0800495c 	.word	0x0800495c
 80021f8:	0000ffff 	.word	0x0000ffff

080021fc <chipReset>:
#include "rcc.h"
#include <stdio.h>

enum errorState errorState;

void chipReset() {
 80021fc:	b580      	push	{r7, lr}
 80021fe:	af00      	add	r7, sp, #0
	GPIO_SetBits(GPIOA, GPIO_Pin_1);
 8002200:	2390      	movs	r3, #144	; 0x90
 8002202:	05db      	lsls	r3, r3, #23
 8002204:	2102      	movs	r1, #2
 8002206:	0018      	movs	r0, r3
 8002208:	f7ff fc46 	bl	8001a98 <GPIO_SetBits>
	DelayMil(1);
 800220c:	2001      	movs	r0, #1
 800220e:	f000 fb37 	bl	8002880 <DelayMil>
	GPIO_ResetBits(GPIOA, GPIO_Pin_1);
 8002212:	2390      	movs	r3, #144	; 0x90
 8002214:	05db      	lsls	r3, r3, #23
 8002216:	2102      	movs	r1, #2
 8002218:	0018      	movs	r0, r3
 800221a:	f7ff fc4c 	bl	8001ab6 <GPIO_ResetBits>
	DelayMil(1);
 800221e:	2001      	movs	r0, #1
 8002220:	f000 fb2e 	bl	8002880 <DelayMil>
	GPIO_SetBits(GPIOA, GPIO_Pin_1);
 8002224:	2390      	movs	r3, #144	; 0x90
 8002226:	05db      	lsls	r3, r3, #23
 8002228:	2102      	movs	r1, #2
 800222a:	0018      	movs	r0, r3
 800222c:	f7ff fc34 	bl	8001a98 <GPIO_SetBits>
}
 8002230:	46c0      	nop			; (mov r8, r8)
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
	...

08002238 <I2C_WrReg>:
uint8_t i2c_rd_byte(uint8_t Addr, uint8_t Reg) {
	I2C_RdReg(Addr, Reg, i2cData.rx_values, 1, 0);
	return i2cData.rx_values[0];
}

uint16_t I2C_WrReg(uint8_t Addr, uint8_t Reg, const uint8_t *Data, uint16_t DCnt) {
 8002238:	b590      	push	{r4, r7, lr}
 800223a:	b087      	sub	sp, #28
 800223c:	af02      	add	r7, sp, #8
 800223e:	0004      	movs	r4, r0
 8002240:	0008      	movs	r0, r1
 8002242:	603a      	str	r2, [r7, #0]
 8002244:	0019      	movs	r1, r3
 8002246:	1dfb      	adds	r3, r7, #7
 8002248:	1c22      	adds	r2, r4, #0
 800224a:	701a      	strb	r2, [r3, #0]
 800224c:	1dbb      	adds	r3, r7, #6
 800224e:	1c02      	adds	r2, r0, #0
 8002250:	701a      	strb	r2, [r3, #0]
 8002252:	1d3b      	adds	r3, r7, #4
 8002254:	1c0a      	adds	r2, r1, #0
 8002256:	801a      	strh	r2, [r3, #0]
	Addr = (Addr<<1);
 8002258:	1dfa      	adds	r2, r7, #7
 800225a:	1dfb      	adds	r3, r7, #7
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	18db      	adds	r3, r3, r3
 8002260:	7013      	strb	r3, [r2, #0]
	uint16_t Cnt = 0;
 8002262:	230e      	movs	r3, #14
 8002264:	18fb      	adds	r3, r7, r3
 8002266:	2200      	movs	r2, #0
 8002268:	801a      	strh	r2, [r3, #0]
	uint16_t i = 0;
 800226a:	230c      	movs	r3, #12
 800226c:	18fb      	adds	r3, r7, r3
 800226e:	2200      	movs	r2, #0
 8002270:	801a      	strh	r2, [r3, #0]

	while(I2C_GetFlagStatus(EP9351_I2C, I2C_FLAG_BUSY) == SET);
 8002272:	46c0      	nop			; (mov r8, r8)
 8002274:	2380      	movs	r3, #128	; 0x80
 8002276:	021b      	lsls	r3, r3, #8
 8002278:	4a50      	ldr	r2, [pc, #320]	; (80023bc <I2C_WrReg+0x184>)
 800227a:	0019      	movs	r1, r3
 800227c:	0010      	movs	r0, r2
 800227e:	f7ff fd51 	bl	8001d24 <I2C_GetFlagStatus>
 8002282:	0003      	movs	r3, r0
 8002284:	2b01      	cmp	r3, #1
 8002286:	d0f5      	beq.n	8002274 <I2C_WrReg+0x3c>
	I2C_TransferHandling(EP9351_I2C, Addr, 1, I2C_Reload_Mode, I2C_Generate_Start_Write);
 8002288:	1dfb      	adds	r3, r7, #7
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	b299      	uxth	r1, r3
 800228e:	2380      	movs	r3, #128	; 0x80
 8002290:	045a      	lsls	r2, r3, #17
 8002292:	484a      	ldr	r0, [pc, #296]	; (80023bc <I2C_WrReg+0x184>)
 8002294:	2380      	movs	r3, #128	; 0x80
 8002296:	019b      	lsls	r3, r3, #6
 8002298:	9300      	str	r3, [sp, #0]
 800229a:	0013      	movs	r3, r2
 800229c:	2201      	movs	r2, #1
 800229e:	f7ff fcf1 	bl	8001c84 <I2C_TransferHandling>
	while(I2C_GetFlagStatus(EP9351_I2C, I2C_FLAG_TXIS) == RESET) {
 80022a2:	e012      	b.n	80022ca <I2C_WrReg+0x92>
		i++;
 80022a4:	230c      	movs	r3, #12
 80022a6:	18fb      	adds	r3, r7, r3
 80022a8:	881a      	ldrh	r2, [r3, #0]
 80022aa:	230c      	movs	r3, #12
 80022ac:	18fb      	adds	r3, r7, r3
 80022ae:	3201      	adds	r2, #1
 80022b0:	801a      	strh	r2, [r3, #0]
		if(i == I2C_TIMEOUT) {
 80022b2:	230c      	movs	r3, #12
 80022b4:	18fb      	adds	r3, r7, r3
 80022b6:	881a      	ldrh	r2, [r3, #0]
 80022b8:	23fa      	movs	r3, #250	; 0xfa
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	429a      	cmp	r2, r3
 80022be:	d104      	bne.n	80022ca <I2C_WrReg+0x92>
			return errorState = BAD_DEV_ADDR;
 80022c0:	4b3f      	ldr	r3, [pc, #252]	; (80023c0 <I2C_WrReg+0x188>)
 80022c2:	2204      	movs	r2, #4
 80022c4:	701a      	strb	r2, [r3, #0]
 80022c6:	2304      	movs	r3, #4
 80022c8:	e073      	b.n	80023b2 <I2C_WrReg+0x17a>
	while(I2C_GetFlagStatus(EP9351_I2C, I2C_FLAG_TXIS) == RESET) {
 80022ca:	4b3c      	ldr	r3, [pc, #240]	; (80023bc <I2C_WrReg+0x184>)
 80022cc:	2102      	movs	r1, #2
 80022ce:	0018      	movs	r0, r3
 80022d0:	f7ff fd28 	bl	8001d24 <I2C_GetFlagStatus>
 80022d4:	1e03      	subs	r3, r0, #0
 80022d6:	d0e5      	beq.n	80022a4 <I2C_WrReg+0x6c>
		}
	}
	I2C_SendData(EP9351_I2C, Reg);
 80022d8:	1dbb      	adds	r3, r7, #6
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	4a37      	ldr	r2, [pc, #220]	; (80023bc <I2C_WrReg+0x184>)
 80022de:	0019      	movs	r1, r3
 80022e0:	0010      	movs	r0, r2
 80022e2:	f7ff fd05 	bl	8001cf0 <I2C_SendData>
	while(I2C_GetFlagStatus(EP9351_I2C, I2C_FLAG_TCR) == RESET);
 80022e6:	46c0      	nop			; (mov r8, r8)
 80022e8:	4b34      	ldr	r3, [pc, #208]	; (80023bc <I2C_WrReg+0x184>)
 80022ea:	2180      	movs	r1, #128	; 0x80
 80022ec:	0018      	movs	r0, r3
 80022ee:	f7ff fd19 	bl	8001d24 <I2C_GetFlagStatus>
 80022f2:	1e03      	subs	r3, r0, #0
 80022f4:	d0f8      	beq.n	80022e8 <I2C_WrReg+0xb0>
	I2C_TransferHandling(EP9351_I2C, Addr, DCnt, I2C_AutoEnd_Mode, I2C_No_StartStop);
 80022f6:	1dfb      	adds	r3, r7, #7
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	b299      	uxth	r1, r3
 80022fc:	1d3b      	adds	r3, r7, #4
 80022fe:	881b      	ldrh	r3, [r3, #0]
 8002300:	b2da      	uxtb	r2, r3
 8002302:	2380      	movs	r3, #128	; 0x80
 8002304:	0498      	lsls	r0, r3, #18
 8002306:	4c2d      	ldr	r4, [pc, #180]	; (80023bc <I2C_WrReg+0x184>)
 8002308:	2300      	movs	r3, #0
 800230a:	9300      	str	r3, [sp, #0]
 800230c:	0003      	movs	r3, r0
 800230e:	0020      	movs	r0, r4
 8002310:	f7ff fcb8 	bl	8001c84 <I2C_TransferHandling>
	while(I2C_GetFlagStatus(EP9351_I2C, I2C_FLAG_TXIS) == RESET) {
 8002314:	e012      	b.n	800233c <I2C_WrReg+0x104>
		i++;
 8002316:	230c      	movs	r3, #12
 8002318:	18fb      	adds	r3, r7, r3
 800231a:	881a      	ldrh	r2, [r3, #0]
 800231c:	230c      	movs	r3, #12
 800231e:	18fb      	adds	r3, r7, r3
 8002320:	3201      	adds	r2, #1
 8002322:	801a      	strh	r2, [r3, #0]
		if(i == I2C_TIMEOUT) {
 8002324:	230c      	movs	r3, #12
 8002326:	18fb      	adds	r3, r7, r3
 8002328:	881a      	ldrh	r2, [r3, #0]
 800232a:	23fa      	movs	r3, #250	; 0xfa
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	429a      	cmp	r2, r3
 8002330:	d104      	bne.n	800233c <I2C_WrReg+0x104>
			return errorState = BAD_VALUE;
 8002332:	4b23      	ldr	r3, [pc, #140]	; (80023c0 <I2C_WrReg+0x188>)
 8002334:	2202      	movs	r2, #2
 8002336:	701a      	strb	r2, [r3, #0]
 8002338:	2302      	movs	r3, #2
 800233a:	e03a      	b.n	80023b2 <I2C_WrReg+0x17a>
	while(I2C_GetFlagStatus(EP9351_I2C, I2C_FLAG_TXIS) == RESET) {
 800233c:	4b1f      	ldr	r3, [pc, #124]	; (80023bc <I2C_WrReg+0x184>)
 800233e:	2102      	movs	r1, #2
 8002340:	0018      	movs	r0, r3
 8002342:	f7ff fcef 	bl	8001d24 <I2C_GetFlagStatus>
 8002346:	1e03      	subs	r3, r0, #0
 8002348:	d0e5      	beq.n	8002316 <I2C_WrReg+0xde>
		}
	} // missing Data
	for(Cnt = 0; Cnt<DCnt; Cnt++){
 800234a:	230e      	movs	r3, #14
 800234c:	18fb      	adds	r3, r7, r3
 800234e:	2200      	movs	r2, #0
 8002350:	801a      	strh	r2, [r3, #0]
 8002352:	e019      	b.n	8002388 <I2C_WrReg+0x150>
//		snprintf(usartStr, 30, "Data[%d] = %X\n\r", Cnt ,Data[Cnt]);
//		//USART_WriteString(usartStr);
		while(I2C_GetFlagStatus(EP9351_I2C, I2C_FLAG_TXE) == RESET);
 8002354:	46c0      	nop			; (mov r8, r8)
 8002356:	4b19      	ldr	r3, [pc, #100]	; (80023bc <I2C_WrReg+0x184>)
 8002358:	2101      	movs	r1, #1
 800235a:	0018      	movs	r0, r3
 800235c:	f7ff fce2 	bl	8001d24 <I2C_GetFlagStatus>
 8002360:	1e03      	subs	r3, r0, #0
 8002362:	d0f8      	beq.n	8002356 <I2C_WrReg+0x11e>
		I2C_SendData(EP9351_I2C, Data[Cnt]);
 8002364:	230e      	movs	r3, #14
 8002366:	18fb      	adds	r3, r7, r3
 8002368:	881b      	ldrh	r3, [r3, #0]
 800236a:	683a      	ldr	r2, [r7, #0]
 800236c:	18d3      	adds	r3, r2, r3
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	4a12      	ldr	r2, [pc, #72]	; (80023bc <I2C_WrReg+0x184>)
 8002372:	0019      	movs	r1, r3
 8002374:	0010      	movs	r0, r2
 8002376:	f7ff fcbb 	bl	8001cf0 <I2C_SendData>
	for(Cnt = 0; Cnt<DCnt; Cnt++){
 800237a:	230e      	movs	r3, #14
 800237c:	18fb      	adds	r3, r7, r3
 800237e:	881a      	ldrh	r2, [r3, #0]
 8002380:	230e      	movs	r3, #14
 8002382:	18fb      	adds	r3, r7, r3
 8002384:	3201      	adds	r2, #1
 8002386:	801a      	strh	r2, [r3, #0]
 8002388:	230e      	movs	r3, #14
 800238a:	18fa      	adds	r2, r7, r3
 800238c:	1d3b      	adds	r3, r7, #4
 800238e:	8812      	ldrh	r2, [r2, #0]
 8002390:	881b      	ldrh	r3, [r3, #0]
 8002392:	429a      	cmp	r2, r3
 8002394:	d3de      	bcc.n	8002354 <I2C_WrReg+0x11c>
	}
	while(I2C_GetFlagStatus(EP9351_I2C, I2C_FLAG_STOPF) == RESET);
 8002396:	46c0      	nop			; (mov r8, r8)
 8002398:	4b08      	ldr	r3, [pc, #32]	; (80023bc <I2C_WrReg+0x184>)
 800239a:	2120      	movs	r1, #32
 800239c:	0018      	movs	r0, r3
 800239e:	f7ff fcc1 	bl	8001d24 <I2C_GetFlagStatus>
 80023a2:	1e03      	subs	r3, r0, #0
 80023a4:	d0f8      	beq.n	8002398 <I2C_WrReg+0x160>
	I2C_ClearFlag(EP9351_I2C, I2C_FLAG_STOPF);
 80023a6:	4b05      	ldr	r3, [pc, #20]	; (80023bc <I2C_WrReg+0x184>)
 80023a8:	2120      	movs	r1, #32
 80023aa:	0018      	movs	r0, r3
 80023ac:	f7ff fcdf 	bl	8001d6e <I2C_ClearFlag>

	return 0;
 80023b0:	2300      	movs	r3, #0
}
 80023b2:	0018      	movs	r0, r3
 80023b4:	46bd      	mov	sp, r7
 80023b6:	b005      	add	sp, #20
 80023b8:	bd90      	pop	{r4, r7, pc}
 80023ba:	46c0      	nop			; (mov r8, r8)
 80023bc:	40005400 	.word	0x40005400
 80023c0:	200000a8 	.word	0x200000a8

080023c4 <I2C_RdRegLW>:
	return ret;
}

// Code for reading LW20 for its special timing, Auvidea
uint16_t I2C_RdRegLW(uint8_t Addr, uint8_t *Data, uint8_t DCnt)
{
 80023c4:	b590      	push	{r4, r7, lr}
 80023c6:	b087      	sub	sp, #28
 80023c8:	af02      	add	r7, sp, #8
 80023ca:	6039      	str	r1, [r7, #0]
 80023cc:	0011      	movs	r1, r2
 80023ce:	1dfb      	adds	r3, r7, #7
 80023d0:	1c02      	adds	r2, r0, #0
 80023d2:	701a      	strb	r2, [r3, #0]
 80023d4:	1dbb      	adds	r3, r7, #6
 80023d6:	1c0a      	adds	r2, r1, #0
 80023d8:	701a      	strb	r2, [r3, #0]
	Addr = ((Addr<<1)+1);
 80023da:	1dfb      	adds	r3, r7, #7
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	18db      	adds	r3, r3, r3
 80023e0:	b2da      	uxtb	r2, r3
 80023e2:	1dfb      	adds	r3, r7, #7
 80023e4:	3201      	adds	r2, #1
 80023e6:	701a      	strb	r2, [r3, #0]
	uint16_t ret = 0;
 80023e8:	230a      	movs	r3, #10
 80023ea:	18fb      	adds	r3, r7, r3
 80023ec:	2200      	movs	r2, #0
 80023ee:	801a      	strh	r2, [r3, #0]
	int Cnt = 0;
 80023f0:	2300      	movs	r3, #0
 80023f2:	60fb      	str	r3, [r7, #12]

	while(I2C_GetFlagStatus(EP9351_I2C, I2C_FLAG_BUSY) == SET) ;
 80023f4:	46c0      	nop			; (mov r8, r8)
 80023f6:	2380      	movs	r3, #128	; 0x80
 80023f8:	021b      	lsls	r3, r3, #8
 80023fa:	4a26      	ldr	r2, [pc, #152]	; (8002494 <I2C_RdRegLW+0xd0>)
 80023fc:	0019      	movs	r1, r3
 80023fe:	0010      	movs	r0, r2
 8002400:	f7ff fc90 	bl	8001d24 <I2C_GetFlagStatus>
 8002404:	0003      	movs	r3, r0
 8002406:	2b01      	cmp	r3, #1
 8002408:	d0f5      	beq.n	80023f6 <I2C_RdRegLW+0x32>
	I2C_TransferHandling(EP9351_I2C, Addr, DCnt, I2C_AutoEnd_Mode, I2C_Generate_Start_Read);
 800240a:	1dfb      	adds	r3, r7, #7
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	b299      	uxth	r1, r3
 8002410:	2380      	movs	r3, #128	; 0x80
 8002412:	0498      	lsls	r0, r3, #18
 8002414:	1dbb      	adds	r3, r7, #6
 8002416:	781a      	ldrb	r2, [r3, #0]
 8002418:	4c1e      	ldr	r4, [pc, #120]	; (8002494 <I2C_RdRegLW+0xd0>)
 800241a:	2390      	movs	r3, #144	; 0x90
 800241c:	019b      	lsls	r3, r3, #6
 800241e:	9300      	str	r3, [sp, #0]
 8002420:	0003      	movs	r3, r0
 8002422:	0020      	movs	r0, r4
 8002424:	f7ff fc2e 	bl	8001c84 <I2C_TransferHandling>
	for(Cnt = 0; Cnt<DCnt; Cnt++)
 8002428:	2300      	movs	r3, #0
 800242a:	60fb      	str	r3, [r7, #12]
 800242c:	e013      	b.n	8002456 <I2C_RdRegLW+0x92>
	{
		while(I2C_GetFlagStatus(EP9351_I2C, I2C_FLAG_RXNE) == RESET) ;
 800242e:	46c0      	nop			; (mov r8, r8)
 8002430:	4b18      	ldr	r3, [pc, #96]	; (8002494 <I2C_RdRegLW+0xd0>)
 8002432:	2104      	movs	r1, #4
 8002434:	0018      	movs	r0, r3
 8002436:	f7ff fc75 	bl	8001d24 <I2C_GetFlagStatus>
 800243a:	1e03      	subs	r3, r0, #0
 800243c:	d0f8      	beq.n	8002430 <I2C_RdRegLW+0x6c>
		Data[Cnt] = I2C_ReceiveData(EP9351_I2C);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	683a      	ldr	r2, [r7, #0]
 8002442:	18d4      	adds	r4, r2, r3
 8002444:	4b13      	ldr	r3, [pc, #76]	; (8002494 <I2C_RdRegLW+0xd0>)
 8002446:	0018      	movs	r0, r3
 8002448:	f7ff fc61 	bl	8001d0e <I2C_ReceiveData>
 800244c:	0003      	movs	r3, r0
 800244e:	7023      	strb	r3, [r4, #0]
	for(Cnt = 0; Cnt<DCnt; Cnt++)
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	3301      	adds	r3, #1
 8002454:	60fb      	str	r3, [r7, #12]
 8002456:	1dbb      	adds	r3, r7, #6
 8002458:	781a      	ldrb	r2, [r3, #0]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	429a      	cmp	r2, r3
 800245e:	dce6      	bgt.n	800242e <I2C_RdRegLW+0x6a>
	}
	while(I2C_GetFlagStatus(EP9351_I2C, I2C_FLAG_STOPF) == RESET) ;
 8002460:	46c0      	nop			; (mov r8, r8)
 8002462:	4b0c      	ldr	r3, [pc, #48]	; (8002494 <I2C_RdRegLW+0xd0>)
 8002464:	2120      	movs	r1, #32
 8002466:	0018      	movs	r0, r3
 8002468:	f7ff fc5c 	bl	8001d24 <I2C_GetFlagStatus>
 800246c:	1e03      	subs	r3, r0, #0
 800246e:	d0f8      	beq.n	8002462 <I2C_RdRegLW+0x9e>
	I2C_ClearFlag(EP9351_I2C, I2C_FLAG_STOPF);
 8002470:	4b08      	ldr	r3, [pc, #32]	; (8002494 <I2C_RdRegLW+0xd0>)
 8002472:	2120      	movs	r1, #32
 8002474:	0018      	movs	r0, r3
 8002476:	f7ff fc7a 	bl	8001d6e <I2C_ClearFlag>
	ret = Data[0];
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	781a      	ldrb	r2, [r3, #0]
 800247e:	230a      	movs	r3, #10
 8002480:	18fb      	adds	r3, r7, r3
 8002482:	801a      	strh	r2, [r3, #0]
	return ret;
 8002484:	230a      	movs	r3, #10
 8002486:	18fb      	adds	r3, r7, r3
 8002488:	881b      	ldrh	r3, [r3, #0]
}
 800248a:	0018      	movs	r0, r3
 800248c:	46bd      	mov	sp, r7
 800248e:	b005      	add	sp, #20
 8002490:	bd90      	pop	{r4, r7, pc}
 8002492:	46c0      	nop			; (mov r8, r8)
 8002494:	40005400 	.word	0x40005400

08002498 <i2cInit>:
	I2C_ClearFlag(EP9351_I2C, I2C_FLAG_STOPF);
	return 0;
}

//void i2cInit(uint8_t periph) {
void i2cInit(void) {
 8002498:	b580      	push	{r7, lr}
 800249a:	b08a      	sub	sp, #40	; 0x28
 800249c:	af00      	add	r7, sp, #0
		//SysTick_Config(SystemCoreClock/1000);
		//Enable GPIOB clock, required for the I2C output
		//RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE); //todo already enabled in rcc.c
		//Enable the I2C peripheral clock

		RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE); // STM32F042
 800249e:	2380      	movs	r3, #128	; 0x80
 80024a0:	039b      	lsls	r3, r3, #14
 80024a2:	2101      	movs	r1, #1
 80024a4:	0018      	movs	r0, r3
 80024a6:	f7ff fc8f 	bl	8001dc8 <RCC_APB1PeriphClockCmd>
//		RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C2, ENABLE); // STM32F072

//	    RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
	    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_8 | GPIO_Pin_1 | GPIO_Pin_0;
 80024aa:	2320      	movs	r3, #32
 80024ac:	18fb      	adds	r3, r7, r3
 80024ae:	2204      	movs	r2, #4
 80024b0:	32ff      	adds	r2, #255	; 0xff
 80024b2:	601a      	str	r2, [r3, #0]
	    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80024b4:	2320      	movs	r3, #32
 80024b6:	18fb      	adds	r3, r7, r3
 80024b8:	2203      	movs	r2, #3
 80024ba:	715a      	strb	r2, [r3, #5]
	    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 80024bc:	2320      	movs	r3, #32
 80024be:	18fb      	adds	r3, r7, r3
 80024c0:	2201      	movs	r2, #1
 80024c2:	711a      	strb	r2, [r3, #4]
	    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80024c4:	2320      	movs	r3, #32
 80024c6:	18fb      	adds	r3, r7, r3
 80024c8:	2200      	movs	r2, #0
 80024ca:	719a      	strb	r2, [r3, #6]
	    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 80024cc:	2320      	movs	r3, #32
 80024ce:	18fb      	adds	r3, r7, r3
 80024d0:	2201      	movs	r2, #1
 80024d2:	71da      	strb	r2, [r3, #7]
	    GPIO_Init(GPIOA, &GPIO_InitStructure);
 80024d4:	2320      	movs	r3, #32
 80024d6:	18fa      	adds	r2, r7, r3
 80024d8:	2390      	movs	r3, #144	; 0x90
 80024da:	05db      	lsls	r3, r3, #23
 80024dc:	0011      	movs	r1, r2
 80024de:	0018      	movs	r0, r3
 80024e0:	f7ff fa2c 	bl	800193c <GPIO_Init>

	    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_4;
 80024e4:	2320      	movs	r3, #32
 80024e6:	18fb      	adds	r3, r7, r3
 80024e8:	2210      	movs	r2, #16
 80024ea:	601a      	str	r2, [r3, #0]
	    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80024ec:	2320      	movs	r3, #32
 80024ee:	18fb      	adds	r3, r7, r3
 80024f0:	2203      	movs	r2, #3
 80024f2:	715a      	strb	r2, [r3, #5]
	    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 80024f4:	2320      	movs	r3, #32
 80024f6:	18fb      	adds	r3, r7, r3
 80024f8:	2200      	movs	r2, #0
 80024fa:	711a      	strb	r2, [r3, #4]
//	    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
//	    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
	    GPIO_Init(GPIOA, &GPIO_InitStructure);
 80024fc:	2320      	movs	r3, #32
 80024fe:	18fa      	adds	r2, r7, r3
 8002500:	2390      	movs	r3, #144	; 0x90
 8002502:	05db      	lsls	r3, r3, #23
 8002504:	0011      	movs	r1, r2
 8002506:	0018      	movs	r0, r3
 8002508:	f7ff fa18 	bl	800193c <GPIO_Init>

	    //Set the pin pb5 as output
		GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5;
 800250c:	2320      	movs	r3, #32
 800250e:	18fb      	adds	r3, r7, r3
 8002510:	2220      	movs	r2, #32
 8002512:	601a      	str	r2, [r3, #0]
		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002514:	2320      	movs	r3, #32
 8002516:	18fb      	adds	r3, r7, r3
 8002518:	2203      	movs	r2, #3
 800251a:	715a      	strb	r2, [r3, #5]
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 800251c:	2320      	movs	r3, #32
 800251e:	18fb      	adds	r3, r7, r3
 8002520:	2201      	movs	r2, #1
 8002522:	711a      	strb	r2, [r3, #4]
		GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8002524:	2320      	movs	r3, #32
 8002526:	18fb      	adds	r3, r7, r3
 8002528:	2200      	movs	r2, #0
 800252a:	719a      	strb	r2, [r3, #6]
		GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 800252c:	2320      	movs	r3, #32
 800252e:	18fb      	adds	r3, r7, r3
 8002530:	2201      	movs	r2, #1
 8002532:	71da      	strb	r2, [r3, #7]
		GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002534:	2320      	movs	r3, #32
 8002536:	18fb      	adds	r3, r7, r3
 8002538:	4a26      	ldr	r2, [pc, #152]	; (80025d4 <i2cInit+0x13c>)
 800253a:	0019      	movs	r1, r3
 800253c:	0010      	movs	r0, r2
 800253e:	f7ff f9fd 	bl	800193c <GPIO_Init>

		//Set the pins EP9351_SDA and EP9351_SCL as alternate function GPIO pins
		GPIO_InitStructure.GPIO_Pin = EP9351_SDA | EP9351_SCL;
 8002542:	2320      	movs	r3, #32
 8002544:	18fb      	adds	r3, r7, r3
 8002546:	22c0      	movs	r2, #192	; 0xc0
 8002548:	0112      	lsls	r2, r2, #4
 800254a:	601a      	str	r2, [r3, #0]
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 800254c:	2320      	movs	r3, #32
 800254e:	18fb      	adds	r3, r7, r3
 8002550:	2202      	movs	r2, #2
 8002552:	711a      	strb	r2, [r3, #4]
		GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 8002554:	2320      	movs	r3, #32
 8002556:	18fb      	adds	r3, r7, r3
 8002558:	2201      	movs	r2, #1
 800255a:	719a      	strb	r2, [r3, #6]
		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_Level_3;
 800255c:	2320      	movs	r3, #32
 800255e:	18fb      	adds	r3, r7, r3
 8002560:	2203      	movs	r2, #3
 8002562:	715a      	strb	r2, [r3, #5]
		GPIO_Init(EP9351_GPIO, &GPIO_InitStructure);
 8002564:	2320      	movs	r3, #32
 8002566:	18fb      	adds	r3, r7, r3
 8002568:	4a1a      	ldr	r2, [pc, #104]	; (80025d4 <i2cInit+0x13c>)
 800256a:	0019      	movs	r1, r3
 800256c:	0010      	movs	r0, r2
 800256e:	f7ff f9e5 	bl	800193c <GPIO_Init>

		//Configure the pins to the I2C AF
		GPIO_PinAFConfig(EP9351_GPIO, EP9351_SDA_PS, EP9351_PIN_AF);
 8002572:	4b18      	ldr	r3, [pc, #96]	; (80025d4 <i2cInit+0x13c>)
 8002574:	2201      	movs	r2, #1
 8002576:	210b      	movs	r1, #11
 8002578:	0018      	movs	r0, r3
 800257a:	f7ff faab 	bl	8001ad4 <GPIO_PinAFConfig>
		GPIO_PinAFConfig(EP9351_GPIO, EP9351_SCL_PS, EP9351_PIN_AF);
 800257e:	4b15      	ldr	r3, [pc, #84]	; (80025d4 <i2cInit+0x13c>)
 8002580:	2201      	movs	r2, #1
 8002582:	210a      	movs	r1, #10
 8002584:	0018      	movs	r0, r3
 8002586:	f7ff faa5 	bl	8001ad4 <GPIO_PinAFConfig>

		I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
 800258a:	1d3b      	adds	r3, r7, #4
 800258c:	2200      	movs	r2, #0
 800258e:	615a      	str	r2, [r3, #20]
		I2C_InitStructure.I2C_AnalogFilter = I2C_AnalogFilter_Enable;
 8002590:	1d3b      	adds	r3, r7, #4
 8002592:	2200      	movs	r2, #0
 8002594:	605a      	str	r2, [r3, #4]
		I2C_InitStructure.I2C_DigitalFilter = 0;
 8002596:	1d3b      	adds	r3, r7, #4
 8002598:	2200      	movs	r2, #0
 800259a:	609a      	str	r2, [r3, #8]
		I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
 800259c:	1d3b      	adds	r3, r7, #4
 800259e:	2200      	movs	r2, #0
 80025a0:	60da      	str	r2, [r3, #12]
		I2C_InitStructure.I2C_OwnAddress1 = 0xAB;
 80025a2:	1d3b      	adds	r3, r7, #4
 80025a4:	22ab      	movs	r2, #171	; 0xab
 80025a6:	611a      	str	r2, [r3, #16]
		I2C_InitStructure.I2C_Timing = 0x10805E89;
 80025a8:	1d3b      	adds	r3, r7, #4
 80025aa:	4a0b      	ldr	r2, [pc, #44]	; (80025d8 <i2cInit+0x140>)
 80025ac:	601a      	str	r2, [r3, #0]
		I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 80025ae:	1d3b      	adds	r3, r7, #4
 80025b0:	2200      	movs	r2, #0
 80025b2:	619a      	str	r2, [r3, #24]
		I2C_Init(EP9351_I2C, &I2C_InitStructure);
 80025b4:	1d3b      	adds	r3, r7, #4
 80025b6:	4a09      	ldr	r2, [pc, #36]	; (80025dc <i2cInit+0x144>)
 80025b8:	0019      	movs	r1, r3
 80025ba:	0010      	movs	r0, r2
 80025bc:	f7ff fadc 	bl	8001b78 <I2C_Init>
		I2C_Cmd(EP9351_I2C, ENABLE);
 80025c0:	4b06      	ldr	r3, [pc, #24]	; (80025dc <i2cInit+0x144>)
 80025c2:	2101      	movs	r1, #1
 80025c4:	0018      	movs	r0, r3
 80025c6:	f7ff fb3f 	bl	8001c48 <I2C_Cmd>
}
 80025ca:	46c0      	nop			; (mov r8, r8)
 80025cc:	46bd      	mov	sp, r7
 80025ce:	b00a      	add	sp, #40	; 0x28
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	46c0      	nop			; (mov r8, r8)
 80025d4:	48000400 	.word	0x48000400
 80025d8:	10805e89 	.word	0x10805e89
 80025dc:	40005400 	.word	0x40005400

080025e0 <main>:

    return Status;
}

int main(void)
{
 80025e0:	b590      	push	{r4, r7, lr}
 80025e2:	b0e5      	sub	sp, #404	; 0x194
 80025e4:	af00      	add	r7, sp, #0
	rccConfiguration();
 80025e6:	f000 f8d5 	bl	8002794 <rccConfiguration>
	DelayMil(10);
 80025ea:	200a      	movs	r0, #10
 80025ec:	f000 f948 	bl	8002880 <DelayMil>
	i2cInit();
 80025f0:	f7ff ff52 	bl	8002498 <i2cInit>
	//canInit();
    chipReset();
 80025f4:	f7ff fe02 	bl	80021fc <chipReset>
	//flsdelay = 2000;
	//flashspeed = 1500;
	//ledflash = 1;

	DelaySec(1);	// Adjust this delay to the start of J130, it cannot initialize the CAN bus
 80025f8:	2001      	movs	r0, #1
 80025fa:	f000 f957 	bl	80028ac <DelaySec>
	I2C_WrReg(0x66, 0x00, i2cData.tx_values, 5);
	I2C_RdRegLW(0x66, i2cData.rx_values, 16);*/

	//int32_t status_int;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80025fe:	2390      	movs	r3, #144	; 0x90
 8002600:	33ff      	adds	r3, #255	; 0xff
 8002602:	18fb      	adds	r3, r7, r3
 8002604:	2200      	movs	r2, #0
 8002606:	701a      	strb	r2, [r3, #0]
	VL53L0X_Dev_t MyDevice;
	VL53L0X_Dev_t *pMyDevice = &MyDevice;
 8002608:	2320      	movs	r3, #32
 800260a:	18fb      	adds	r3, r7, r3
 800260c:	22c4      	movs	r2, #196	; 0xc4
 800260e:	0052      	lsls	r2, r2, #1
 8002610:	18ba      	adds	r2, r7, r2
 8002612:	6013      	str	r3, [r2, #0]
	//VL53L0X_Version_t *pVersion   = &Version;
	//VL53L0X_DeviceInfo_t DeviceInfo;
    VL53L0X_RangingMeasurementData_t RangingMeasurementData;

	// Initialize I2C address
	uint32_t addr = 0x29;
 8002614:	2329      	movs	r3, #41	; 0x29
 8002616:	22c2      	movs	r2, #194	; 0xc2
 8002618:	0052      	lsls	r2, r2, #1
 800261a:	18ba      	adds	r2, r7, r2
 800261c:	6013      	str	r3, [r2, #0]
	pMyDevice->I2cDevAddr = addr;
 800261e:	23c2      	movs	r3, #194	; 0xc2
 8002620:	005b      	lsls	r3, r3, #1
 8002622:	18fb      	adds	r3, r7, r3
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	b2d9      	uxtb	r1, r3
 8002628:	23c4      	movs	r3, #196	; 0xc4
 800262a:	005b      	lsls	r3, r3, #1
 800262c:	18fb      	adds	r3, r7, r3
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	23ae      	movs	r3, #174	; 0xae
 8002632:	005b      	lsls	r3, r3, #1
 8002634:	54d1      	strb	r1, [r2, r3]

	if(Status == VL53L0X_ERROR_NONE)
 8002636:	2390      	movs	r3, #144	; 0x90
 8002638:	33ff      	adds	r3, #255	; 0xff
 800263a:	18fb      	adds	r3, r7, r3
 800263c:	781b      	ldrb	r3, [r3, #0]
 800263e:	b25b      	sxtb	r3, r3
 8002640:	2b00      	cmp	r3, #0
 8002642:	d109      	bne.n	8002658 <main+0x78>
	{
		Status = VL53L0X_DataInit(&MyDevice); // Data initialization
 8002644:	2390      	movs	r3, #144	; 0x90
 8002646:	33ff      	adds	r3, #255	; 0xff
 8002648:	18fc      	adds	r4, r7, r3
 800264a:	2320      	movs	r3, #32
 800264c:	18fb      	adds	r3, r7, r3
 800264e:	0018      	movs	r0, r3
 8002650:	f000 fcde 	bl	8003010 <VL53L0X_DataInit>
 8002654:	0003      	movs	r3, r0
 8002656:	7023      	strb	r3, [r4, #0]
	}
	printf("hello");
 8002658:	4b04      	ldr	r3, [pc, #16]	; (800266c <main+0x8c>)
 800265a:	0018      	movs	r0, r3
 800265c:	f000 fbe0 	bl	8002e20 <iprintf>

		}

	}*/

	return 0;
 8002660:	2300      	movs	r3, #0
}
 8002662:	0018      	movs	r0, r3
 8002664:	46bd      	mov	sp, r7
 8002666:	b065      	add	sp, #404	; 0x194
 8002668:	bd90      	pop	{r4, r7, pc}
 800266a:	46c0      	nop			; (mov r8, r8)
 800266c:	08004914 	.word	0x08004914

08002670 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002670:	b5b0      	push	{r4, r5, r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0
 8002676:	0002      	movs	r2, r0
 8002678:	6039      	str	r1, [r7, #0]
 800267a:	1dfb      	adds	r3, r7, #7
 800267c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 800267e:	1dfb      	adds	r3, r7, #7
 8002680:	781b      	ldrb	r3, [r3, #0]
 8002682:	2b7f      	cmp	r3, #127	; 0x7f
 8002684:	d932      	bls.n	80026ec <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002686:	4c2f      	ldr	r4, [pc, #188]	; (8002744 <NVIC_SetPriority+0xd4>)
 8002688:	1dfb      	adds	r3, r7, #7
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	001a      	movs	r2, r3
 800268e:	230f      	movs	r3, #15
 8002690:	4013      	ands	r3, r2
 8002692:	3b08      	subs	r3, #8
 8002694:	0899      	lsrs	r1, r3, #2
 8002696:	4a2b      	ldr	r2, [pc, #172]	; (8002744 <NVIC_SetPriority+0xd4>)
 8002698:	1dfb      	adds	r3, r7, #7
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	0018      	movs	r0, r3
 800269e:	230f      	movs	r3, #15
 80026a0:	4003      	ands	r3, r0
 80026a2:	3b08      	subs	r3, #8
 80026a4:	089b      	lsrs	r3, r3, #2
 80026a6:	3306      	adds	r3, #6
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	18d3      	adds	r3, r2, r3
 80026ac:	3304      	adds	r3, #4
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	1dfa      	adds	r2, r7, #7
 80026b2:	7812      	ldrb	r2, [r2, #0]
 80026b4:	0010      	movs	r0, r2
 80026b6:	2203      	movs	r2, #3
 80026b8:	4002      	ands	r2, r0
 80026ba:	00d2      	lsls	r2, r2, #3
 80026bc:	20ff      	movs	r0, #255	; 0xff
 80026be:	4090      	lsls	r0, r2
 80026c0:	0002      	movs	r2, r0
 80026c2:	43d2      	mvns	r2, r2
 80026c4:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	019b      	lsls	r3, r3, #6
 80026ca:	20ff      	movs	r0, #255	; 0xff
 80026cc:	4018      	ands	r0, r3
 80026ce:	1dfb      	adds	r3, r7, #7
 80026d0:	781b      	ldrb	r3, [r3, #0]
 80026d2:	001d      	movs	r5, r3
 80026d4:	2303      	movs	r3, #3
 80026d6:	402b      	ands	r3, r5
 80026d8:	00db      	lsls	r3, r3, #3
 80026da:	4098      	lsls	r0, r3
 80026dc:	0003      	movs	r3, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80026de:	431a      	orrs	r2, r3
 80026e0:	1d8b      	adds	r3, r1, #6
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	18e3      	adds	r3, r4, r3
 80026e6:	3304      	adds	r3, #4
 80026e8:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80026ea:	e027      	b.n	800273c <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80026ec:	4c16      	ldr	r4, [pc, #88]	; (8002748 <NVIC_SetPriority+0xd8>)
 80026ee:	1dfb      	adds	r3, r7, #7
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	b25b      	sxtb	r3, r3
 80026f4:	089b      	lsrs	r3, r3, #2
 80026f6:	4914      	ldr	r1, [pc, #80]	; (8002748 <NVIC_SetPriority+0xd8>)
 80026f8:	1dfa      	adds	r2, r7, #7
 80026fa:	7812      	ldrb	r2, [r2, #0]
 80026fc:	b252      	sxtb	r2, r2
 80026fe:	0892      	lsrs	r2, r2, #2
 8002700:	32c0      	adds	r2, #192	; 0xc0
 8002702:	0092      	lsls	r2, r2, #2
 8002704:	5852      	ldr	r2, [r2, r1]
 8002706:	1df9      	adds	r1, r7, #7
 8002708:	7809      	ldrb	r1, [r1, #0]
 800270a:	0008      	movs	r0, r1
 800270c:	2103      	movs	r1, #3
 800270e:	4001      	ands	r1, r0
 8002710:	00c9      	lsls	r1, r1, #3
 8002712:	20ff      	movs	r0, #255	; 0xff
 8002714:	4088      	lsls	r0, r1
 8002716:	0001      	movs	r1, r0
 8002718:	43c9      	mvns	r1, r1
 800271a:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800271c:	683a      	ldr	r2, [r7, #0]
 800271e:	0192      	lsls	r2, r2, #6
 8002720:	20ff      	movs	r0, #255	; 0xff
 8002722:	4010      	ands	r0, r2
 8002724:	1dfa      	adds	r2, r7, #7
 8002726:	7812      	ldrb	r2, [r2, #0]
 8002728:	0015      	movs	r5, r2
 800272a:	2203      	movs	r2, #3
 800272c:	402a      	ands	r2, r5
 800272e:	00d2      	lsls	r2, r2, #3
 8002730:	4090      	lsls	r0, r2
 8002732:	0002      	movs	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002734:	430a      	orrs	r2, r1
 8002736:	33c0      	adds	r3, #192	; 0xc0
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	511a      	str	r2, [r3, r4]
}
 800273c:	46c0      	nop			; (mov r8, r8)
 800273e:	46bd      	mov	sp, r7
 8002740:	b002      	add	sp, #8
 8002742:	bdb0      	pop	{r4, r5, r7, pc}
 8002744:	e000ed00 	.word	0xe000ed00
 8002748:	e000e100 	.word	0xe000e100

0800274c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b082      	sub	sp, #8
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	3b01      	subs	r3, #1
 8002758:	4a0c      	ldr	r2, [pc, #48]	; (800278c <SysTick_Config+0x40>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d901      	bls.n	8002762 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800275e:	2301      	movs	r3, #1
 8002760:	e010      	b.n	8002784 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002762:	4b0b      	ldr	r3, [pc, #44]	; (8002790 <SysTick_Config+0x44>)
 8002764:	687a      	ldr	r2, [r7, #4]
 8002766:	3a01      	subs	r2, #1
 8002768:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800276a:	2301      	movs	r3, #1
 800276c:	425b      	negs	r3, r3
 800276e:	2103      	movs	r1, #3
 8002770:	0018      	movs	r0, r3
 8002772:	f7ff ff7d 	bl	8002670 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002776:	4b06      	ldr	r3, [pc, #24]	; (8002790 <SysTick_Config+0x44>)
 8002778:	2200      	movs	r2, #0
 800277a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800277c:	4b04      	ldr	r3, [pc, #16]	; (8002790 <SysTick_Config+0x44>)
 800277e:	2207      	movs	r2, #7
 8002780:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002782:	2300      	movs	r3, #0
}
 8002784:	0018      	movs	r0, r3
 8002786:	46bd      	mov	sp, r7
 8002788:	b002      	add	sp, #8
 800278a:	bd80      	pop	{r7, pc}
 800278c:	00ffffff 	.word	0x00ffffff
 8002790:	e000e010 	.word	0xe000e010

08002794 <rccConfiguration>:
RCC_ClocksTypeDef rccClocks;
volatile uint32_t Milliseconds = 0;
volatile uint32_t Seconds = 0;
uint16_t PrescalerValue = 0;

void rccConfiguration(void) {
 8002794:	b590      	push	{r4, r7, lr}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0

	SystemInit(); //Ensure CPU is running at correctly set clock speed
 800279a:	f000 f8e9 	bl	8002970 <SystemInit>
	SystemCoreClockUpdate(); //Update SystemCoreClock variable to current clock speed
 800279e:	f000 f92d 	bl	80029fc <SystemCoreClockUpdate>
	SysTick_Config(SystemCoreClock/MillisecondsIT); //Set up a systick interrupt every millisecond
 80027a2:	4b20      	ldr	r3, [pc, #128]	; (8002824 <rccConfiguration+0x90>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	0018      	movs	r0, r3
 80027a8:	f7fe fcc0 	bl	800112c <__aeabi_ui2d>
 80027ac:	2200      	movs	r2, #0
 80027ae:	4b1e      	ldr	r3, [pc, #120]	; (8002828 <rccConfiguration+0x94>)
 80027b0:	f7fd fe3e 	bl	8000430 <__aeabi_ddiv>
 80027b4:	0003      	movs	r3, r0
 80027b6:	000c      	movs	r4, r1
 80027b8:	0018      	movs	r0, r3
 80027ba:	0021      	movs	r1, r4
 80027bc:	f7fd fe1a 	bl	80003f4 <__aeabi_d2uiz>
 80027c0:	0003      	movs	r3, r0
 80027c2:	0018      	movs	r0, r3
 80027c4:	f7ff ffc2 	bl	800274c <SysTick_Config>

	GPIO_InitTypeDef GPIO_InitStructure;

    RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA | RCC_AHBPeriph_GPIOB, ENABLE); //| RCC_AHBPeriph_GPIOC | RCC_AHBPeriph_GPIOD | RCC_AHBPeriph_GPIOE, ENABLE);
 80027c8:	23c0      	movs	r3, #192	; 0xc0
 80027ca:	02db      	lsls	r3, r3, #11
 80027cc:	2101      	movs	r1, #1
 80027ce:	0018      	movs	r0, r3
 80027d0:	f7ff fada 	bl	8001d88 <RCC_AHBPeriphClockCmd>
    GPIO_StructInit(&GPIO_InitStructure);
 80027d4:	003b      	movs	r3, r7
 80027d6:	0018      	movs	r0, r3
 80027d8:	f7ff f944 	bl	8001a64 <GPIO_StructInit>

    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_All;
 80027dc:	003b      	movs	r3, r7
 80027de:	4a13      	ldr	r2, [pc, #76]	; (800282c <rccConfiguration+0x98>)
 80027e0:	601a      	str	r2, [r3, #0]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 80027e2:	003b      	movs	r3, r7
 80027e4:	2200      	movs	r2, #0
 80027e6:	711a      	strb	r2, [r3, #4]
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 80027e8:	003b      	movs	r3, r7
 80027ea:	2200      	movs	r2, #0
 80027ec:	71da      	strb	r2, [r3, #7]

    GPIO_Init(GPIOB, &GPIO_InitStructure);
 80027ee:	003b      	movs	r3, r7
 80027f0:	4a0f      	ldr	r2, [pc, #60]	; (8002830 <rccConfiguration+0x9c>)
 80027f2:	0019      	movs	r1, r3
 80027f4:	0010      	movs	r0, r2
 80027f6:	f7ff f8a1 	bl	800193c <GPIO_Init>
    GPIO_Init(GPIOC, &GPIO_InitStructure);
 80027fa:	003b      	movs	r3, r7
 80027fc:	4a0d      	ldr	r2, [pc, #52]	; (8002834 <rccConfiguration+0xa0>)
 80027fe:	0019      	movs	r1, r3
 8002800:	0010      	movs	r0, r2
 8002802:	f7ff f89b 	bl	800193c <GPIO_Init>

    // exclude PA13 & PA14 for SWD
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_All & ~(GPIO_Pin_13 | GPIO_Pin_14);
 8002806:	003b      	movs	r3, r7
 8002808:	4a0b      	ldr	r2, [pc, #44]	; (8002838 <rccConfiguration+0xa4>)
 800280a:	601a      	str	r2, [r3, #0]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
 800280c:	003a      	movs	r2, r7
 800280e:	2390      	movs	r3, #144	; 0x90
 8002810:	05db      	lsls	r3, r3, #23
 8002812:	0011      	movs	r1, r2
 8002814:	0018      	movs	r0, r3
 8002816:	f7ff f891 	bl	800193c <GPIO_Init>

}
 800281a:	46c0      	nop			; (mov r8, r8)
 800281c:	46bd      	mov	sp, r7
 800281e:	b003      	add	sp, #12
 8002820:	bd90      	pop	{r4, r7, pc}
 8002822:	46c0      	nop			; (mov r8, r8)
 8002824:	20000000 	.word	0x20000000
 8002828:	408f4000 	.word	0x408f4000
 800282c:	0000ffff 	.word	0x0000ffff
 8002830:	48000400 	.word	0x48000400
 8002834:	48000800 	.word	0x48000800
 8002838:	00009fff 	.word	0x00009fff

0800283c <SysTick_Handler>:

void SysTick_Handler(void) {
 800283c:	b580      	push	{r7, lr}
 800283e:	af00      	add	r7, sp, #0
    Milliseconds++; 				//Increment millisecond variable
 8002840:	4b0c      	ldr	r3, [pc, #48]	; (8002874 <SysTick_Handler+0x38>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	1c5a      	adds	r2, r3, #1
 8002846:	4b0b      	ldr	r3, [pc, #44]	; (8002874 <SysTick_Handler+0x38>)
 8002848:	601a      	str	r2, [r3, #0]
    if(Milliseconds%1000 == 999){ 	//If 1000 milliseconds have passed, increment seconds
 800284a:	4b0a      	ldr	r3, [pc, #40]	; (8002874 <SysTick_Handler+0x38>)
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	23fa      	movs	r3, #250	; 0xfa
 8002850:	0099      	lsls	r1, r3, #2
 8002852:	0010      	movs	r0, r2
 8002854:	f7fd fcde 	bl	8000214 <__aeabi_uidivmod>
 8002858:	000b      	movs	r3, r1
 800285a:	001a      	movs	r2, r3
 800285c:	4b06      	ldr	r3, [pc, #24]	; (8002878 <SysTick_Handler+0x3c>)
 800285e:	429a      	cmp	r2, r3
 8002860:	d104      	bne.n	800286c <SysTick_Handler+0x30>
        Seconds++;
 8002862:	4b06      	ldr	r3, [pc, #24]	; (800287c <SysTick_Handler+0x40>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	1c5a      	adds	r2, r3, #1
 8002868:	4b04      	ldr	r3, [pc, #16]	; (800287c <SysTick_Handler+0x40>)
 800286a:	601a      	str	r2, [r3, #0]
    }
}
 800286c:	46c0      	nop			; (mov r8, r8)
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	46c0      	nop			; (mov r8, r8)
 8002874:	20000094 	.word	0x20000094
 8002878:	000003e7 	.word	0x000003e7
 800287c:	20000098 	.word	0x20000098

08002880 <DelayMil>:

//Delay function for millisecond delay
void DelayMil(uint32_t MilS) {
 8002880:	b580      	push	{r7, lr}
 8002882:	b084      	sub	sp, #16
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
      volatile uint32_t MSStart = Milliseconds;
 8002888:	4b07      	ldr	r3, [pc, #28]	; (80028a8 <DelayMil+0x28>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	60fb      	str	r3, [r7, #12]
      while ((Milliseconds - MSStart) < MilS)
 800288e:	e000      	b.n	8002892 <DelayMil+0x12>
    	  asm volatile("nop");
 8002890:	46c0      	nop			; (mov r8, r8)
      while ((Milliseconds - MSStart) < MilS)
 8002892:	4b05      	ldr	r3, [pc, #20]	; (80028a8 <DelayMil+0x28>)
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	1ad2      	subs	r2, r2, r3
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	429a      	cmp	r2, r3
 800289e:	d3f7      	bcc.n	8002890 <DelayMil+0x10>
}
 80028a0:	46c0      	nop			; (mov r8, r8)
 80028a2:	46bd      	mov	sp, r7
 80028a4:	b004      	add	sp, #16
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	20000094 	.word	0x20000094

080028ac <DelaySec>:

//Delay function for second delay
void DelaySec(uint32_t S) {
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b084      	sub	sp, #16
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
      volatile uint32_t Ss = Seconds;
 80028b4:	4b07      	ldr	r3, [pc, #28]	; (80028d4 <DelaySec+0x28>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	60fb      	str	r3, [r7, #12]
      while	((Seconds - Ss) < S)
 80028ba:	e000      	b.n	80028be <DelaySec+0x12>
    	  asm volatile("nop");
 80028bc:	46c0      	nop			; (mov r8, r8)
      while	((Seconds - Ss) < S)
 80028be:	4b05      	ldr	r3, [pc, #20]	; (80028d4 <DelaySec+0x28>)
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	1ad2      	subs	r2, r2, r3
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d3f7      	bcc.n	80028bc <DelaySec+0x10>
}
 80028cc:	46c0      	nop			; (mov r8, r8)
 80028ce:	46bd      	mov	sp, r7
 80028d0:	b004      	add	sp, #16
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	20000098 	.word	0x20000098

080028d8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80028d8:	4813      	ldr	r0, [pc, #76]	; (8002928 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80028da:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 80028dc:	2004      	movs	r0, #4
    LDR R1, [R0]
 80028de:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 80028e0:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 80028e2:	221f      	movs	r2, #31
    CMP R1, R2
 80028e4:	4291      	cmp	r1, r2
    BNE ApplicationStart
 80028e6:	d105      	bne.n	80028f4 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 80028e8:	4810      	ldr	r0, [pc, #64]	; (800292c <LoopForever+0x6>)
    LDR R1,=0x00000001
 80028ea:	2101      	movs	r1, #1
    STR R1, [R0]
 80028ec:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 80028ee:	4810      	ldr	r0, [pc, #64]	; (8002930 <LoopForever+0xa>)
    LDR R1,=0x00000000
 80028f0:	2100      	movs	r1, #0
    STR R1, [R0]
 80028f2:	6001      	str	r1, [r0, #0]

080028f4 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80028f4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80028f6:	e003      	b.n	8002900 <LoopCopyDataInit>

080028f8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80028f8:	4b0e      	ldr	r3, [pc, #56]	; (8002934 <LoopForever+0xe>)
  ldr r3, [r3, r1]
 80028fa:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80028fc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80028fe:	3104      	adds	r1, #4

08002900 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002900:	480d      	ldr	r0, [pc, #52]	; (8002938 <LoopForever+0x12>)
  ldr r3, =_edata
 8002902:	4b0e      	ldr	r3, [pc, #56]	; (800293c <LoopForever+0x16>)
  adds r2, r0, r1
 8002904:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002906:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002908:	d3f6      	bcc.n	80028f8 <CopyDataInit>
  ldr r2, =_sbss
 800290a:	4a0d      	ldr	r2, [pc, #52]	; (8002940 <LoopForever+0x1a>)
  b LoopFillZerobss
 800290c:	e002      	b.n	8002914 <LoopFillZerobss>

0800290e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800290e:	2300      	movs	r3, #0
  str  r3, [r2]
 8002910:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002912:	3204      	adds	r2, #4

08002914 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8002914:	4b0b      	ldr	r3, [pc, #44]	; (8002944 <LoopForever+0x1e>)
  cmp r2, r3
 8002916:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002918:	d3f9      	bcc.n	800290e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800291a:	f000 f829 	bl	8002970 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800291e:	f001 fed7 	bl	80046d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002922:	f7ff fe5d 	bl	80025e0 <main>

08002926 <LoopForever>:

LoopForever:
    b LoopForever
 8002926:	e7fe      	b.n	8002926 <LoopForever>
  ldr   r0, =_estack
 8002928:	20001800 	.word	0x20001800
    LDR R0,=0x40021018
 800292c:	40021018 	.word	0x40021018
    LDR R0,=0x40010000
 8002930:	40010000 	.word	0x40010000
  ldr r3, =_sidata
 8002934:	08004b14 	.word	0x08004b14
  ldr r0, =_sdata
 8002938:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800293c:	20000078 	.word	0x20000078
  ldr r2, =_sbss
 8002940:	20000078 	.word	0x20000078
  ldr r3, = _ebss
 8002944:	20000d30 	.word	0x20000d30

08002948 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002948:	e7fe      	b.n	8002948 <ADC1_IRQHandler>

0800294a <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800294a:	b580      	push	{r7, lr}
 800294c:	af00      	add	r7, sp, #0
}
 800294e:	46c0      	nop			; (mov r8, r8)
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}

08002954 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8002958:	e7fe      	b.n	8002958 <HardFault_Handler+0x4>

0800295a <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 800295a:	b580      	push	{r7, lr}
 800295c:	af00      	add	r7, sp, #0
}
 800295e:	46c0      	nop			; (mov r8, r8)
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}

08002964 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	af00      	add	r7, sp, #0
}
 8002968:	46c0      	nop			; (mov r8, r8)
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
	...

08002970 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{    
 8002970:	b580      	push	{r7, lr}
 8002972:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002974:	4b1b      	ldr	r3, [pc, #108]	; (80029e4 <SystemInit+0x74>)
 8002976:	4a1b      	ldr	r2, [pc, #108]	; (80029e4 <SystemInit+0x74>)
 8002978:	6812      	ldr	r2, [r2, #0]
 800297a:	2101      	movs	r1, #1
 800297c:	430a      	orrs	r2, r1
 800297e:	601a      	str	r2, [r3, #0]
#if defined(STM32F051)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80C;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80C;
 8002980:	4b18      	ldr	r3, [pc, #96]	; (80029e4 <SystemInit+0x74>)
 8002982:	4a18      	ldr	r2, [pc, #96]	; (80029e4 <SystemInit+0x74>)
 8002984:	6852      	ldr	r2, [r2, #4]
 8002986:	4918      	ldr	r1, [pc, #96]	; (80029e8 <SystemInit+0x78>)
 8002988:	400a      	ands	r2, r1
 800298a:	605a      	str	r2, [r3, #4]
#endif /* STM32F051 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800298c:	4b15      	ldr	r3, [pc, #84]	; (80029e4 <SystemInit+0x74>)
 800298e:	4a15      	ldr	r2, [pc, #84]	; (80029e4 <SystemInit+0x74>)
 8002990:	6812      	ldr	r2, [r2, #0]
 8002992:	4916      	ldr	r1, [pc, #88]	; (80029ec <SystemInit+0x7c>)
 8002994:	400a      	ands	r2, r1
 8002996:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002998:	4b12      	ldr	r3, [pc, #72]	; (80029e4 <SystemInit+0x74>)
 800299a:	4a12      	ldr	r2, [pc, #72]	; (80029e4 <SystemInit+0x74>)
 800299c:	6812      	ldr	r2, [r2, #0]
 800299e:	4914      	ldr	r1, [pc, #80]	; (80029f0 <SystemInit+0x80>)
 80029a0:	400a      	ands	r2, r1
 80029a2:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 80029a4:	4b0f      	ldr	r3, [pc, #60]	; (80029e4 <SystemInit+0x74>)
 80029a6:	4a0f      	ldr	r2, [pc, #60]	; (80029e4 <SystemInit+0x74>)
 80029a8:	6852      	ldr	r2, [r2, #4]
 80029aa:	4912      	ldr	r1, [pc, #72]	; (80029f4 <SystemInit+0x84>)
 80029ac:	400a      	ands	r2, r1
 80029ae:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 80029b0:	4b0c      	ldr	r3, [pc, #48]	; (80029e4 <SystemInit+0x74>)
 80029b2:	4a0c      	ldr	r2, [pc, #48]	; (80029e4 <SystemInit+0x74>)
 80029b4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80029b6:	210f      	movs	r1, #15
 80029b8:	438a      	bics	r2, r1
 80029ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEAC;
 80029bc:	4b09      	ldr	r3, [pc, #36]	; (80029e4 <SystemInit+0x74>)
 80029be:	4a09      	ldr	r2, [pc, #36]	; (80029e4 <SystemInit+0x74>)
 80029c0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80029c2:	490d      	ldr	r1, [pc, #52]	; (80029f8 <SystemInit+0x88>)
 80029c4:	400a      	ands	r2, r1
 80029c6:	631a      	str	r2, [r3, #48]	; 0x30

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 80029c8:	4b06      	ldr	r3, [pc, #24]	; (80029e4 <SystemInit+0x74>)
 80029ca:	4a06      	ldr	r2, [pc, #24]	; (80029e4 <SystemInit+0x74>)
 80029cc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80029ce:	2101      	movs	r1, #1
 80029d0:	438a      	bics	r2, r1
 80029d2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80029d4:	4b03      	ldr	r3, [pc, #12]	; (80029e4 <SystemInit+0x74>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	609a      	str	r2, [r3, #8]

  /* Configure the System clock frequency, AHB/APBx prescalers and Flash settings */
  SetSysClock();
 80029da:	f000 f87b 	bl	8002ad4 <SetSysClock>
}
 80029de:	46c0      	nop			; (mov r8, r8)
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	40021000 	.word	0x40021000
 80029e8:	08ffb80c 	.word	0x08ffb80c
 80029ec:	fef6ffff 	.word	0xfef6ffff
 80029f0:	fffbffff 	.word	0xfffbffff
 80029f4:	ffc0ffff 	.word	0xffc0ffff
 80029f8:	fffffeac 	.word	0xfffffeac

080029fc <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b084      	sub	sp, #16
 8002a00:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0;
 8002a02:	2300      	movs	r3, #0
 8002a04:	60fb      	str	r3, [r7, #12]
 8002a06:	2300      	movs	r3, #0
 8002a08:	60bb      	str	r3, [r7, #8]
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	607b      	str	r3, [r7, #4]
 8002a0e:	2300      	movs	r3, #0
 8002a10:	603b      	str	r3, [r7, #0]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8002a12:	4b2a      	ldr	r3, [pc, #168]	; (8002abc <SystemCoreClockUpdate+0xc0>)
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	220c      	movs	r2, #12
 8002a18:	4013      	ands	r3, r2
 8002a1a:	60fb      	str	r3, [r7, #12]
  
  switch (tmp)
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2b04      	cmp	r3, #4
 8002a20:	d007      	beq.n	8002a32 <SystemCoreClockUpdate+0x36>
 8002a22:	2b08      	cmp	r3, #8
 8002a24:	d009      	beq.n	8002a3a <SystemCoreClockUpdate+0x3e>
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d131      	bne.n	8002a8e <SystemCoreClockUpdate+0x92>
  {
    case 0x00:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 8002a2a:	4b25      	ldr	r3, [pc, #148]	; (8002ac0 <SystemCoreClockUpdate+0xc4>)
 8002a2c:	4a25      	ldr	r2, [pc, #148]	; (8002ac4 <SystemCoreClockUpdate+0xc8>)
 8002a2e:	601a      	str	r2, [r3, #0]
      break;
 8002a30:	e031      	b.n	8002a96 <SystemCoreClockUpdate+0x9a>
    case 0x04:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 8002a32:	4b23      	ldr	r3, [pc, #140]	; (8002ac0 <SystemCoreClockUpdate+0xc4>)
 8002a34:	4a24      	ldr	r2, [pc, #144]	; (8002ac8 <SystemCoreClockUpdate+0xcc>)
 8002a36:	601a      	str	r2, [r3, #0]
      break;
 8002a38:	e02d      	b.n	8002a96 <SystemCoreClockUpdate+0x9a>
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8002a3a:	4b20      	ldr	r3, [pc, #128]	; (8002abc <SystemCoreClockUpdate+0xc0>)
 8002a3c:	685a      	ldr	r2, [r3, #4]
 8002a3e:	23f0      	movs	r3, #240	; 0xf0
 8002a40:	039b      	lsls	r3, r3, #14
 8002a42:	4013      	ands	r3, r2
 8002a44:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8002a46:	4b1d      	ldr	r3, [pc, #116]	; (8002abc <SystemCoreClockUpdate+0xc0>)
 8002a48:	685a      	ldr	r2, [r3, #4]
 8002a4a:	23c0      	movs	r3, #192	; 0xc0
 8002a4c:	025b      	lsls	r3, r3, #9
 8002a4e:	4013      	ands	r3, r2
 8002a50:	607b      	str	r3, [r7, #4]
      pllmull = ( pllmull >> 18) + 2;
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	0c9b      	lsrs	r3, r3, #18
 8002a56:	3302      	adds	r3, #2
 8002a58:	60bb      	str	r3, [r7, #8]
      
      if (pllsource == 0x00)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d105      	bne.n	8002a6c <SystemCoreClockUpdate+0x70>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	4a1a      	ldr	r2, [pc, #104]	; (8002acc <SystemCoreClockUpdate+0xd0>)
 8002a64:	435a      	muls	r2, r3
 8002a66:	4b16      	ldr	r3, [pc, #88]	; (8002ac0 <SystemCoreClockUpdate+0xc4>)
 8002a68:	601a      	str	r2, [r3, #0]
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull; 
      }      
      break;
 8002a6a:	e014      	b.n	8002a96 <SystemCoreClockUpdate+0x9a>
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 8002a6c:	4b13      	ldr	r3, [pc, #76]	; (8002abc <SystemCoreClockUpdate+0xc0>)
 8002a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a70:	220f      	movs	r2, #15
 8002a72:	4013      	ands	r3, r2
 8002a74:	3301      	adds	r3, #1
 8002a76:	603b      	str	r3, [r7, #0]
        SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull; 
 8002a78:	6839      	ldr	r1, [r7, #0]
 8002a7a:	4813      	ldr	r0, [pc, #76]	; (8002ac8 <SystemCoreClockUpdate+0xcc>)
 8002a7c:	f7fd fb44 	bl	8000108 <__udivsi3>
 8002a80:	0003      	movs	r3, r0
 8002a82:	001a      	movs	r2, r3
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	435a      	muls	r2, r3
 8002a88:	4b0d      	ldr	r3, [pc, #52]	; (8002ac0 <SystemCoreClockUpdate+0xc4>)
 8002a8a:	601a      	str	r2, [r3, #0]
      break;
 8002a8c:	e003      	b.n	8002a96 <SystemCoreClockUpdate+0x9a>
    default: /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 8002a8e:	4b0c      	ldr	r3, [pc, #48]	; (8002ac0 <SystemCoreClockUpdate+0xc4>)
 8002a90:	4a0c      	ldr	r2, [pc, #48]	; (8002ac4 <SystemCoreClockUpdate+0xc8>)
 8002a92:	601a      	str	r2, [r3, #0]
      break;
 8002a94:	46c0      	nop			; (mov r8, r8)
  }
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8002a96:	4b09      	ldr	r3, [pc, #36]	; (8002abc <SystemCoreClockUpdate+0xc0>)
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	091b      	lsrs	r3, r3, #4
 8002a9c:	220f      	movs	r2, #15
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	4a0b      	ldr	r2, [pc, #44]	; (8002ad0 <SystemCoreClockUpdate+0xd4>)
 8002aa2:	5cd3      	ldrb	r3, [r2, r3]
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
 8002aa8:	4b05      	ldr	r3, [pc, #20]	; (8002ac0 <SystemCoreClockUpdate+0xc4>)
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	40da      	lsrs	r2, r3
 8002ab0:	4b03      	ldr	r3, [pc, #12]	; (8002ac0 <SystemCoreClockUpdate+0xc4>)
 8002ab2:	601a      	str	r2, [r3, #0]
}
 8002ab4:	46c0      	nop			; (mov r8, r8)
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	b004      	add	sp, #16
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	40021000 	.word	0x40021000
 8002ac0:	20000000 	.word	0x20000000
 8002ac4:	007a1200 	.word	0x007a1200
 8002ac8:	016e3600 	.word	0x016e3600
 8002acc:	003d0900 	.word	0x003d0900
 8002ad0:	20000004 	.word	0x20000004

08002ad4 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b082      	sub	sp, #8
 8002ad8:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8002ada:	2300      	movs	r3, #0
 8002adc:	607b      	str	r3, [r7, #4]
 8002ade:	2300      	movs	r3, #0
 8002ae0:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK configuration ----------------------------------------*/
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8002ae2:	4b31      	ldr	r3, [pc, #196]	; (8002ba8 <SetSysClock+0xd4>)
 8002ae4:	4a30      	ldr	r2, [pc, #192]	; (8002ba8 <SetSysClock+0xd4>)
 8002ae6:	6812      	ldr	r2, [r2, #0]
 8002ae8:	2180      	movs	r1, #128	; 0x80
 8002aea:	0249      	lsls	r1, r1, #9
 8002aec:	430a      	orrs	r2, r1
 8002aee:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8002af0:	4b2d      	ldr	r3, [pc, #180]	; (8002ba8 <SetSysClock+0xd4>)
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	2380      	movs	r3, #128	; 0x80
 8002af6:	029b      	lsls	r3, r3, #10
 8002af8:	4013      	ands	r3, r2
 8002afa:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	3301      	adds	r3, #1
 8002b00:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d104      	bne.n	8002b12 <SetSysClock+0x3e>
 8002b08:	687a      	ldr	r2, [r7, #4]
 8002b0a:	23a0      	movs	r3, #160	; 0xa0
 8002b0c:	01db      	lsls	r3, r3, #7
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d1ee      	bne.n	8002af0 <SetSysClock+0x1c>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8002b12:	4b25      	ldr	r3, [pc, #148]	; (8002ba8 <SetSysClock+0xd4>)
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	2380      	movs	r3, #128	; 0x80
 8002b18:	029b      	lsls	r3, r3, #10
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	d002      	beq.n	8002b24 <SetSysClock+0x50>
  {
    HSEStatus = (uint32_t)0x01;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	603b      	str	r3, [r7, #0]
 8002b22:	e001      	b.n	8002b28 <SetSysClock+0x54>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8002b24:	2300      	movs	r3, #0
 8002b26:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d138      	bne.n	8002ba0 <SetSysClock+0xcc>
  {
    /* Enable Prefetch Buffer and set Flash Latency */
    FLASH->ACR = FLASH_ACR_PRFTBE | FLASH_ACR_LATENCY;
 8002b2e:	4b1f      	ldr	r3, [pc, #124]	; (8002bac <SetSysClock+0xd8>)
 8002b30:	2211      	movs	r2, #17
 8002b32:	601a      	str	r2, [r3, #0]
 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8002b34:	4b1c      	ldr	r3, [pc, #112]	; (8002ba8 <SetSysClock+0xd4>)
 8002b36:	4a1c      	ldr	r2, [pc, #112]	; (8002ba8 <SetSysClock+0xd4>)
 8002b38:	6852      	ldr	r2, [r2, #4]
 8002b3a:	605a      	str	r2, [r3, #4]
      
    /* PCLK = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE_DIV1;
 8002b3c:	4b1a      	ldr	r3, [pc, #104]	; (8002ba8 <SetSysClock+0xd4>)
 8002b3e:	4a1a      	ldr	r2, [pc, #104]	; (8002ba8 <SetSysClock+0xd4>)
 8002b40:	6852      	ldr	r2, [r2, #4]
 8002b42:	605a      	str	r2, [r3, #4]

    /* PLL configuration = HSE * 6 = 48 MHz */
    /* DW: HSE (24 MHz) * 2 = 48 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 8002b44:	4b18      	ldr	r3, [pc, #96]	; (8002ba8 <SetSysClock+0xd4>)
 8002b46:	4a18      	ldr	r2, [pc, #96]	; (8002ba8 <SetSysClock+0xd4>)
 8002b48:	6852      	ldr	r2, [r2, #4]
 8002b4a:	4919      	ldr	r1, [pc, #100]	; (8002bb0 <SetSysClock+0xdc>)
 8002b4c:	400a      	ands	r2, r1
 8002b4e:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_PREDIV1 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL2);
 8002b50:	4b15      	ldr	r3, [pc, #84]	; (8002ba8 <SetSysClock+0xd4>)
 8002b52:	4a15      	ldr	r2, [pc, #84]	; (8002ba8 <SetSysClock+0xd4>)
 8002b54:	6852      	ldr	r2, [r2, #4]
 8002b56:	2180      	movs	r1, #128	; 0x80
 8002b58:	0249      	lsls	r1, r1, #9
 8002b5a:	430a      	orrs	r2, r1
 8002b5c:	605a      	str	r2, [r3, #4]
            
    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8002b5e:	4b12      	ldr	r3, [pc, #72]	; (8002ba8 <SetSysClock+0xd4>)
 8002b60:	4a11      	ldr	r2, [pc, #68]	; (8002ba8 <SetSysClock+0xd4>)
 8002b62:	6812      	ldr	r2, [r2, #0]
 8002b64:	2180      	movs	r1, #128	; 0x80
 8002b66:	0449      	lsls	r1, r1, #17
 8002b68:	430a      	orrs	r2, r1
 8002b6a:	601a      	str	r2, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8002b6c:	46c0      	nop			; (mov r8, r8)
 8002b6e:	4b0e      	ldr	r3, [pc, #56]	; (8002ba8 <SetSysClock+0xd4>)
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	2380      	movs	r3, #128	; 0x80
 8002b74:	049b      	lsls	r3, r3, #18
 8002b76:	4013      	ands	r3, r2
 8002b78:	d0f9      	beq.n	8002b6e <SetSysClock+0x9a>
    {
    }

    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8002b7a:	4b0b      	ldr	r3, [pc, #44]	; (8002ba8 <SetSysClock+0xd4>)
 8002b7c:	4a0a      	ldr	r2, [pc, #40]	; (8002ba8 <SetSysClock+0xd4>)
 8002b7e:	6852      	ldr	r2, [r2, #4]
 8002b80:	2103      	movs	r1, #3
 8002b82:	438a      	bics	r2, r1
 8002b84:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8002b86:	4b08      	ldr	r3, [pc, #32]	; (8002ba8 <SetSysClock+0xd4>)
 8002b88:	4a07      	ldr	r2, [pc, #28]	; (8002ba8 <SetSysClock+0xd4>)
 8002b8a:	6852      	ldr	r2, [r2, #4]
 8002b8c:	2102      	movs	r1, #2
 8002b8e:	430a      	orrs	r2, r1
 8002b90:	605a      	str	r2, [r3, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 8002b92:	46c0      	nop			; (mov r8, r8)
 8002b94:	4b04      	ldr	r3, [pc, #16]	; (8002ba8 <SetSysClock+0xd4>)
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	220c      	movs	r2, #12
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	2b08      	cmp	r3, #8
 8002b9e:	d1f9      	bne.n	8002b94 <SetSysClock+0xc0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }  
}
 8002ba0:	46c0      	nop			; (mov r8, r8)
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	b002      	add	sp, #8
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	40021000 	.word	0x40021000
 8002bac:	40022000 	.word	0x40022000
 8002bb0:	ffc07fff 	.word	0xffc07fff

08002bb4 <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b086      	sub	sp, #24
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	60f8      	str	r0, [r7, #12]
 8002bbc:	60b9      	str	r1, [r7, #8]
 8002bbe:	607a      	str	r2, [r7, #4]
	int div = 1;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8002bc4:	e003      	b.n	8002bce <ts_itoa+0x1a>
		div *= base;
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	4353      	muls	r3, r2
 8002bcc:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	0019      	movs	r1, r3
 8002bd2:	68b8      	ldr	r0, [r7, #8]
 8002bd4:	f7fd fa98 	bl	8000108 <__udivsi3>
 8002bd8:	0003      	movs	r3, r0
 8002bda:	001a      	movs	r2, r3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d2f1      	bcs.n	8002bc6 <ts_itoa+0x12>

	while (div != 0)
 8002be2:	e02c      	b.n	8002c3e <ts_itoa+0x8a>
	{
		int num = d/div;
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	0019      	movs	r1, r3
 8002be8:	68b8      	ldr	r0, [r7, #8]
 8002bea:	f7fd fa8d 	bl	8000108 <__udivsi3>
 8002bee:	0003      	movs	r3, r0
 8002bf0:	613b      	str	r3, [r7, #16]
		d = d%div;
 8002bf2:	697a      	ldr	r2, [r7, #20]
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	0011      	movs	r1, r2
 8002bf8:	0018      	movs	r0, r3
 8002bfa:	f7fd fb0b 	bl	8000214 <__aeabi_uidivmod>
 8002bfe:	000b      	movs	r3, r1
 8002c00:	60bb      	str	r3, [r7, #8]
		div /= base;
 8002c02:	6879      	ldr	r1, [r7, #4]
 8002c04:	6978      	ldr	r0, [r7, #20]
 8002c06:	f7fd fb09 	bl	800021c <__divsi3>
 8002c0a:	0003      	movs	r3, r0
 8002c0c:	617b      	str	r3, [r7, #20]
		if (num > 9)
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	2b09      	cmp	r3, #9
 8002c12:	dd0a      	ble.n	8002c2a <ts_itoa+0x76>
			*((*buf)++) = (num-10) + 'A';
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	1c59      	adds	r1, r3, #1
 8002c1a:	68fa      	ldr	r2, [r7, #12]
 8002c1c:	6011      	str	r1, [r2, #0]
 8002c1e:	693a      	ldr	r2, [r7, #16]
 8002c20:	b2d2      	uxtb	r2, r2
 8002c22:	3237      	adds	r2, #55	; 0x37
 8002c24:	b2d2      	uxtb	r2, r2
 8002c26:	701a      	strb	r2, [r3, #0]
 8002c28:	e009      	b.n	8002c3e <ts_itoa+0x8a>
		else
			*((*buf)++) = num + '0';
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	1c59      	adds	r1, r3, #1
 8002c30:	68fa      	ldr	r2, [r7, #12]
 8002c32:	6011      	str	r1, [r2, #0]
 8002c34:	693a      	ldr	r2, [r7, #16]
 8002c36:	b2d2      	uxtb	r2, r2
 8002c38:	3230      	adds	r2, #48	; 0x30
 8002c3a:	b2d2      	uxtb	r2, r2
 8002c3c:	701a      	strb	r2, [r3, #0]
	while (div != 0)
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d1cf      	bne.n	8002be4 <ts_itoa+0x30>
	}
}
 8002c44:	46c0      	nop			; (mov r8, r8)
 8002c46:	46bd      	mov	sp, r7
 8002c48:	b006      	add	sp, #24
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b088      	sub	sp, #32
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	60f8      	str	r0, [r7, #12]
 8002c54:	60b9      	str	r1, [r7, #8]
 8002c56:	607a      	str	r2, [r7, #4]
	char *start_buf = buf;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	617b      	str	r3, [r7, #20]
	while(*fmt)
 8002c5c:	e07c      	b.n	8002d58 <ts_formatstring+0x10c>
	{
		/* Character needs formating? */
		if (*fmt == '%')
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	2b25      	cmp	r3, #37	; 0x25
 8002c64:	d000      	beq.n	8002c68 <ts_formatstring+0x1c>
 8002c66:	e06f      	b.n	8002d48 <ts_formatstring+0xfc>
		{
			switch (*(++fmt))
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	3301      	adds	r3, #1
 8002c6c:	60bb      	str	r3, [r7, #8]
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	2b64      	cmp	r3, #100	; 0x64
 8002c74:	d01c      	beq.n	8002cb0 <ts_formatstring+0x64>
 8002c76:	dc06      	bgt.n	8002c86 <ts_formatstring+0x3a>
 8002c78:	2b58      	cmp	r3, #88	; 0x58
 8002c7a:	d04f      	beq.n	8002d1c <ts_formatstring+0xd0>
 8002c7c:	2b63      	cmp	r3, #99	; 0x63
 8002c7e:	d00d      	beq.n	8002c9c <ts_formatstring+0x50>
 8002c80:	2b25      	cmp	r3, #37	; 0x25
 8002c82:	d057      	beq.n	8002d34 <ts_formatstring+0xe8>
 8002c84:	e05c      	b.n	8002d40 <ts_formatstring+0xf4>
 8002c86:	2b73      	cmp	r3, #115	; 0x73
 8002c88:	d02a      	beq.n	8002ce0 <ts_formatstring+0x94>
 8002c8a:	dc02      	bgt.n	8002c92 <ts_formatstring+0x46>
 8002c8c:	2b69      	cmp	r3, #105	; 0x69
 8002c8e:	d00f      	beq.n	8002cb0 <ts_formatstring+0x64>
 8002c90:	e056      	b.n	8002d40 <ts_formatstring+0xf4>
 8002c92:	2b75      	cmp	r3, #117	; 0x75
 8002c94:	d037      	beq.n	8002d06 <ts_formatstring+0xba>
 8002c96:	2b78      	cmp	r3, #120	; 0x78
 8002c98:	d040      	beq.n	8002d1c <ts_formatstring+0xd0>
 8002c9a:	e051      	b.n	8002d40 <ts_formatstring+0xf4>
			{
			  case 'c':
				*buf++ = va_arg(va, int);
 8002c9c:	68fa      	ldr	r2, [r7, #12]
 8002c9e:	1c53      	adds	r3, r2, #1
 8002ca0:	60fb      	str	r3, [r7, #12]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	1d19      	adds	r1, r3, #4
 8002ca6:	6079      	str	r1, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	b2db      	uxtb	r3, r3
 8002cac:	7013      	strb	r3, [r2, #0]
				break;
 8002cae:	e047      	b.n	8002d40 <ts_formatstring+0xf4>
			  case 'd':
			  case 'i':
				{
					signed int val = va_arg(va, signed int);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	1d1a      	adds	r2, r3, #4
 8002cb4:	607a      	str	r2, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	61fb      	str	r3, [r7, #28]
					if (val < 0)
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	da07      	bge.n	8002cd0 <ts_formatstring+0x84>
					{
						val *= -1;
 8002cc0:	69fb      	ldr	r3, [r7, #28]
 8002cc2:	425b      	negs	r3, r3
 8002cc4:	61fb      	str	r3, [r7, #28]
						*buf++ = '-';
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	1c5a      	adds	r2, r3, #1
 8002cca:	60fa      	str	r2, [r7, #12]
 8002ccc:	222d      	movs	r2, #45	; 0x2d
 8002cce:	701a      	strb	r2, [r3, #0]
					}
					ts_itoa(&buf, val, 10);
 8002cd0:	69f9      	ldr	r1, [r7, #28]
 8002cd2:	230c      	movs	r3, #12
 8002cd4:	18fb      	adds	r3, r7, r3
 8002cd6:	220a      	movs	r2, #10
 8002cd8:	0018      	movs	r0, r3
 8002cda:	f7ff ff6b 	bl	8002bb4 <ts_itoa>
				}
				break;
 8002cde:	e02f      	b.n	8002d40 <ts_formatstring+0xf4>
			  case 's':
				{
					char * arg = va_arg(va, char *);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	1d1a      	adds	r2, r3, #4
 8002ce4:	607a      	str	r2, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	61bb      	str	r3, [r7, #24]
					while (*arg)
 8002cea:	e007      	b.n	8002cfc <ts_formatstring+0xb0>
					{
						*buf++ = *arg++;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	1c5a      	adds	r2, r3, #1
 8002cf0:	60fa      	str	r2, [r7, #12]
 8002cf2:	69ba      	ldr	r2, [r7, #24]
 8002cf4:	1c51      	adds	r1, r2, #1
 8002cf6:	61b9      	str	r1, [r7, #24]
 8002cf8:	7812      	ldrb	r2, [r2, #0]
 8002cfa:	701a      	strb	r2, [r3, #0]
					while (*arg)
 8002cfc:	69bb      	ldr	r3, [r7, #24]
 8002cfe:	781b      	ldrb	r3, [r3, #0]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d1f3      	bne.n	8002cec <ts_formatstring+0xa0>
					}
				}
				break;
 8002d04:	e01c      	b.n	8002d40 <ts_formatstring+0xf4>
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	1d1a      	adds	r2, r3, #4
 8002d0a:	607a      	str	r2, [r7, #4]
 8002d0c:	6819      	ldr	r1, [r3, #0]
 8002d0e:	230c      	movs	r3, #12
 8002d10:	18fb      	adds	r3, r7, r3
 8002d12:	220a      	movs	r2, #10
 8002d14:	0018      	movs	r0, r3
 8002d16:	f7ff ff4d 	bl	8002bb4 <ts_itoa>
				break;
 8002d1a:	e011      	b.n	8002d40 <ts_formatstring+0xf4>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	1d1a      	adds	r2, r3, #4
 8002d20:	607a      	str	r2, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	0019      	movs	r1, r3
 8002d26:	230c      	movs	r3, #12
 8002d28:	18fb      	adds	r3, r7, r3
 8002d2a:	2210      	movs	r2, #16
 8002d2c:	0018      	movs	r0, r3
 8002d2e:	f7ff ff41 	bl	8002bb4 <ts_itoa>
				break;
 8002d32:	e005      	b.n	8002d40 <ts_formatstring+0xf4>
			  case '%':
				  *buf++ = '%';
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	1c5a      	adds	r2, r3, #1
 8002d38:	60fa      	str	r2, [r7, #12]
 8002d3a:	2225      	movs	r2, #37	; 0x25
 8002d3c:	701a      	strb	r2, [r3, #0]
				  break;
 8002d3e:	46c0      	nop			; (mov r8, r8)
			}
			fmt++;
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	3301      	adds	r3, #1
 8002d44:	60bb      	str	r3, [r7, #8]
 8002d46:	e007      	b.n	8002d58 <ts_formatstring+0x10c>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	1c5a      	adds	r2, r3, #1
 8002d4c:	60fa      	str	r2, [r7, #12]
 8002d4e:	68ba      	ldr	r2, [r7, #8]
 8002d50:	1c51      	adds	r1, r2, #1
 8002d52:	60b9      	str	r1, [r7, #8]
 8002d54:	7812      	ldrb	r2, [r2, #0]
 8002d56:	701a      	strb	r2, [r3, #0]
	while(*fmt)
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	781b      	ldrb	r3, [r3, #0]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d000      	beq.n	8002d62 <ts_formatstring+0x116>
 8002d60:	e77d      	b.n	8002c5e <ts_formatstring+0x12>
		}
	}
	*buf = 0;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2200      	movs	r2, #0
 8002d66:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	001a      	movs	r2, r3
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	1ad3      	subs	r3, r2, r3
}
 8002d70:	0018      	movs	r0, r3
 8002d72:	46bd      	mov	sp, r7
 8002d74:	b008      	add	sp, #32
 8002d76:	bd80      	pop	{r7, pc}

08002d78 <ts_formatlength>:
**            format string and va_list va
**  Returns:  Maximum length
**---------------------------------------------------------------------------
*/
int ts_formatlength(const char *fmt, va_list va)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b084      	sub	sp, #16
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
 8002d80:	6039      	str	r1, [r7, #0]
	int length = 0;
 8002d82:	2300      	movs	r3, #0
 8002d84:	60fb      	str	r3, [r7, #12]
	while (*fmt)
 8002d86:	e040      	b.n	8002e0a <ts_formatlength+0x92>
	{
		if (*fmt == '%')
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	2b25      	cmp	r3, #37	; 0x25
 8002d8e:	d136      	bne.n	8002dfe <ts_formatlength+0x86>
		{
			++fmt;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	3301      	adds	r3, #1
 8002d94:	607b      	str	r3, [r7, #4]
			switch (*fmt)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	3b58      	subs	r3, #88	; 0x58
 8002d9c:	2b20      	cmp	r3, #32
 8002d9e:	d829      	bhi.n	8002df4 <ts_formatlength+0x7c>
 8002da0:	009a      	lsls	r2, r3, #2
 8002da2:	4b1e      	ldr	r3, [pc, #120]	; (8002e1c <ts_formatlength+0xa4>)
 8002da4:	18d3      	adds	r3, r2, r3
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	469f      	mov	pc, r3
			{
			  case 'c':
		  		  va_arg(va, int);
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	3304      	adds	r3, #4
 8002dae:	603b      	str	r3, [r7, #0]
				  ++length;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	3301      	adds	r3, #1
 8002db4:	60fb      	str	r3, [r7, #12]
				  break;
 8002db6:	e025      	b.n	8002e04 <ts_formatlength+0x8c>
			  case 'd':
			  case 'i':
			  case 'u':
				  /* 32 bits integer is max 11 characters with minus sign */
				  length += 11;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	330b      	adds	r3, #11
 8002dbc:	60fb      	str	r3, [r7, #12]
				  va_arg(va, int);
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	3304      	adds	r3, #4
 8002dc2:	603b      	str	r3, [r7, #0]
				  break;
 8002dc4:	e01e      	b.n	8002e04 <ts_formatlength+0x8c>
			  case 's':
			  	  {
			  		  char * str = va_arg(va, char *);
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	1d1a      	adds	r2, r3, #4
 8002dca:	603a      	str	r2, [r7, #0]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	60bb      	str	r3, [r7, #8]
			  		  while (*str++)
 8002dd0:	e002      	b.n	8002dd8 <ts_formatlength+0x60>
			  			  ++length;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	3301      	adds	r3, #1
 8002dd6:	60fb      	str	r3, [r7, #12]
			  		  while (*str++)
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	1c5a      	adds	r2, r3, #1
 8002ddc:	60ba      	str	r2, [r7, #8]
 8002dde:	781b      	ldrb	r3, [r3, #0]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d1f6      	bne.n	8002dd2 <ts_formatlength+0x5a>
			  	  }
				  break;
 8002de4:	e00e      	b.n	8002e04 <ts_formatlength+0x8c>
			  case 'x':
			  case 'X':
				  /* 32 bits integer as hex is max 8 characters */
				  length += 8;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	3308      	adds	r3, #8
 8002dea:	60fb      	str	r3, [r7, #12]
				  va_arg(va, unsigned int);
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	3304      	adds	r3, #4
 8002df0:	603b      	str	r3, [r7, #0]
				  break;
 8002df2:	e007      	b.n	8002e04 <ts_formatlength+0x8c>
			  default:
				  ++length;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	3301      	adds	r3, #1
 8002df8:	60fb      	str	r3, [r7, #12]
				  break;
 8002dfa:	46c0      	nop			; (mov r8, r8)
 8002dfc:	e002      	b.n	8002e04 <ts_formatlength+0x8c>
			}
		}
		else
		{
			++length;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	3301      	adds	r3, #1
 8002e02:	60fb      	str	r3, [r7, #12]
		}
		++fmt;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	3301      	adds	r3, #1
 8002e08:	607b      	str	r3, [r7, #4]
	while (*fmt)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	781b      	ldrb	r3, [r3, #0]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d1ba      	bne.n	8002d88 <ts_formatlength+0x10>
	}
	return length;
 8002e12:	68fb      	ldr	r3, [r7, #12]
}
 8002e14:	0018      	movs	r0, r3
 8002e16:	46bd      	mov	sp, r7
 8002e18:	b004      	add	sp, #16
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	08004a2c 	.word	0x08004a2c

08002e20 <iprintf>:
**  Returns:  Number of bytes written
**
**===========================================================================
*/
int iprintf(const char *fmt, ...)
{
 8002e20:	b40f      	push	{r0, r1, r2, r3}
 8002e22:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e24:	b08d      	sub	sp, #52	; 0x34
 8002e26:	af00      	add	r7, sp, #0
	int length = 0;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
	va_list va;
	va_start(va, fmt);
 8002e2c:	232c      	movs	r3, #44	; 0x2c
 8002e2e:	2220      	movs	r2, #32
 8002e30:	4694      	mov	ip, r2
 8002e32:	44bc      	add	ip, r7
 8002e34:	4463      	add	r3, ip
 8002e36:	623b      	str	r3, [r7, #32]
	length = ts_formatlength(fmt, va);
 8002e38:	6a3a      	ldr	r2, [r7, #32]
 8002e3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e3c:	0011      	movs	r1, r2
 8002e3e:	0018      	movs	r0, r3
 8002e40:	f7ff ff9a 	bl	8002d78 <ts_formatlength>
 8002e44:	0003      	movs	r3, r0
 8002e46:	62fb      	str	r3, [r7, #44]	; 0x2c
	va_end(va);
	{
 8002e48:	466b      	mov	r3, sp
 8002e4a:	607b      	str	r3, [r7, #4]
		char buf[length];
 8002e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e4e:	1e5a      	subs	r2, r3, #1
 8002e50:	62ba      	str	r2, [r7, #40]	; 0x28
 8002e52:	001a      	movs	r2, r3
 8002e54:	613a      	str	r2, [r7, #16]
 8002e56:	2200      	movs	r2, #0
 8002e58:	617a      	str	r2, [r7, #20]
 8002e5a:	6938      	ldr	r0, [r7, #16]
 8002e5c:	6979      	ldr	r1, [r7, #20]
 8002e5e:	0002      	movs	r2, r0
 8002e60:	0f52      	lsrs	r2, r2, #29
 8002e62:	000e      	movs	r6, r1
 8002e64:	00f6      	lsls	r6, r6, #3
 8002e66:	61fe      	str	r6, [r7, #28]
 8002e68:	69fe      	ldr	r6, [r7, #28]
 8002e6a:	4316      	orrs	r6, r2
 8002e6c:	61fe      	str	r6, [r7, #28]
 8002e6e:	0002      	movs	r2, r0
 8002e70:	00d2      	lsls	r2, r2, #3
 8002e72:	61ba      	str	r2, [r7, #24]
 8002e74:	001a      	movs	r2, r3
 8002e76:	60ba      	str	r2, [r7, #8]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	60fa      	str	r2, [r7, #12]
 8002e7c:	68b8      	ldr	r0, [r7, #8]
 8002e7e:	68f9      	ldr	r1, [r7, #12]
 8002e80:	0002      	movs	r2, r0
 8002e82:	0f52      	lsrs	r2, r2, #29
 8002e84:	000e      	movs	r6, r1
 8002e86:	00f5      	lsls	r5, r6, #3
 8002e88:	4315      	orrs	r5, r2
 8002e8a:	0002      	movs	r2, r0
 8002e8c:	00d4      	lsls	r4, r2, #3
 8002e8e:	3307      	adds	r3, #7
 8002e90:	08db      	lsrs	r3, r3, #3
 8002e92:	00db      	lsls	r3, r3, #3
 8002e94:	466a      	mov	r2, sp
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	469d      	mov	sp, r3
 8002e9a:	466b      	mov	r3, sp
 8002e9c:	3300      	adds	r3, #0
 8002e9e:	627b      	str	r3, [r7, #36]	; 0x24
		va_start(va, fmt);
 8002ea0:	232c      	movs	r3, #44	; 0x2c
 8002ea2:	2220      	movs	r2, #32
 8002ea4:	4694      	mov	ip, r2
 8002ea6:	44bc      	add	ip, r7
 8002ea8:	4463      	add	r3, ip
 8002eaa:	623b      	str	r3, [r7, #32]
		length = ts_formatstring(buf, fmt, va);
 8002eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eae:	6a3a      	ldr	r2, [r7, #32]
 8002eb0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002eb2:	0018      	movs	r0, r3
 8002eb4:	f7ff feca 	bl	8002c4c <ts_formatstring>
 8002eb8:	0003      	movs	r3, r0
 8002eba:	62fb      	str	r3, [r7, #44]	; 0x2c
		length = _write(1, buf, length);
 8002ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ebe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ec0:	0019      	movs	r1, r3
 8002ec2:	2001      	movs	r0, #1
 8002ec4:	f001 fd12 	bl	80048ec <_write>
 8002ec8:	0003      	movs	r3, r0
 8002eca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	469d      	mov	sp, r3
		va_end(va);
	}
	return length;
 8002ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8002ed2:	0018      	movs	r0, r3
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	b00d      	add	sp, #52	; 0x34
 8002ed8:	bcf0      	pop	{r4, r5, r6, r7}
 8002eda:	bc08      	pop	{r3}
 8002edc:	b004      	add	sp, #16
 8002ede:	4718      	bx	r3

08002ee0 <USART1_IRQHandler>:
    USART_Cmd(USART1, ENABLE);
    echo = YES;
}

void USART1_IRQHandler(void)
{
 8002ee0:	b5b0      	push	{r4, r5, r7, lr}
 8002ee2:	af00      	add	r7, sp, #0
	if ((USART1->ISR & USART_FLAG_RXNE) != (uint16_t)RESET) {
 8002ee4:	4b38      	ldr	r3, [pc, #224]	; (8002fc8 <USART1_IRQHandler+0xe8>)
 8002ee6:	69db      	ldr	r3, [r3, #28]
 8002ee8:	2220      	movs	r2, #32
 8002eea:	4013      	ands	r3, r2
 8002eec:	d01f      	beq.n	8002f2e <USART1_IRQHandler+0x4e>
		commData.uartRX[commData.rxHead] = USART_ReceiveData(USART1);
 8002eee:	4a37      	ldr	r2, [pc, #220]	; (8002fcc <USART1_IRQHandler+0xec>)
 8002ef0:	2392      	movs	r3, #146	; 0x92
 8002ef2:	005b      	lsls	r3, r3, #1
 8002ef4:	5cd3      	ldrb	r3, [r2, r3]
 8002ef6:	001c      	movs	r4, r3
 8002ef8:	4b33      	ldr	r3, [pc, #204]	; (8002fc8 <USART1_IRQHandler+0xe8>)
 8002efa:	0018      	movs	r0, r3
 8002efc:	f7fe ff96 	bl	8001e2c <USART_ReceiveData>
 8002f00:	0003      	movs	r3, r0
 8002f02:	b2da      	uxtb	r2, r3
 8002f04:	4b31      	ldr	r3, [pc, #196]	; (8002fcc <USART1_IRQHandler+0xec>)
 8002f06:	191b      	adds	r3, r3, r4
 8002f08:	771a      	strb	r2, [r3, #28]
		commData.rxHead = (commData.rxHead + 1) % USART1_BUF_SIZE;
 8002f0a:	4a30      	ldr	r2, [pc, #192]	; (8002fcc <USART1_IRQHandler+0xec>)
 8002f0c:	2392      	movs	r3, #146	; 0x92
 8002f0e:	005b      	lsls	r3, r3, #1
 8002f10:	5cd3      	ldrb	r3, [r2, r3]
 8002f12:	3301      	adds	r3, #1
 8002f14:	4a2e      	ldr	r2, [pc, #184]	; (8002fd0 <USART1_IRQHandler+0xf0>)
 8002f16:	4013      	ands	r3, r2
 8002f18:	d504      	bpl.n	8002f24 <USART1_IRQHandler+0x44>
 8002f1a:	3b01      	subs	r3, #1
 8002f1c:	2280      	movs	r2, #128	; 0x80
 8002f1e:	4252      	negs	r2, r2
 8002f20:	4313      	orrs	r3, r2
 8002f22:	3301      	adds	r3, #1
 8002f24:	b2d9      	uxtb	r1, r3
 8002f26:	4a29      	ldr	r2, [pc, #164]	; (8002fcc <USART1_IRQHandler+0xec>)
 8002f28:	2392      	movs	r3, #146	; 0x92
 8002f2a:	005b      	lsls	r3, r3, #1
 8002f2c:	54d1      	strb	r1, [r2, r3]
	}
	if ((USART1->ISR & USART_FLAG_TXE) != (uint16_t)RESET)   {
 8002f2e:	4b26      	ldr	r3, [pc, #152]	; (8002fc8 <USART1_IRQHandler+0xe8>)
 8002f30:	69db      	ldr	r3, [r3, #28]
 8002f32:	2280      	movs	r2, #128	; 0x80
 8002f34:	4013      	ands	r3, r2
 8002f36:	d043      	beq.n	8002fc0 <USART1_IRQHandler+0xe0>
    	if ( commData.txTail != commData.txHead ) {
 8002f38:	4a24      	ldr	r2, [pc, #144]	; (8002fcc <USART1_IRQHandler+0xec>)
 8002f3a:	2328      	movs	r3, #40	; 0x28
 8002f3c:	33ff      	adds	r3, #255	; 0xff
 8002f3e:	5cd2      	ldrb	r2, [r2, r3]
 8002f40:	4922      	ldr	r1, [pc, #136]	; (8002fcc <USART1_IRQHandler+0xec>)
 8002f42:	2393      	movs	r3, #147	; 0x93
 8002f44:	005b      	lsls	r3, r3, #1
 8002f46:	5ccb      	ldrb	r3, [r1, r3]
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d033      	beq.n	8002fb4 <USART1_IRQHandler+0xd4>
			USART_SendData(USART1, commData.txBuf[commData.txTail]);
 8002f4c:	4a1f      	ldr	r2, [pc, #124]	; (8002fcc <USART1_IRQHandler+0xec>)
 8002f4e:	2328      	movs	r3, #40	; 0x28
 8002f50:	33ff      	adds	r3, #255	; 0xff
 8002f52:	5cd3      	ldrb	r3, [r2, r3]
 8002f54:	0019      	movs	r1, r3
 8002f56:	4b1d      	ldr	r3, [pc, #116]	; (8002fcc <USART1_IRQHandler+0xec>)
 8002f58:	22a4      	movs	r2, #164	; 0xa4
 8002f5a:	185b      	adds	r3, r3, r1
 8002f5c:	189b      	adds	r3, r3, r2
 8002f5e:	781b      	ldrb	r3, [r3, #0]
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	b29b      	uxth	r3, r3
 8002f64:	4a18      	ldr	r2, [pc, #96]	; (8002fc8 <USART1_IRQHandler+0xe8>)
 8002f66:	0019      	movs	r1, r3
 8002f68:	0010      	movs	r0, r2
 8002f6a:	f7fe ff4d 	bl	8001e08 <USART_SendData>
			commData.txTail = (commData.txTail + 1) % USART1_BUF_SIZE;
 8002f6e:	4a17      	ldr	r2, [pc, #92]	; (8002fcc <USART1_IRQHandler+0xec>)
 8002f70:	2328      	movs	r3, #40	; 0x28
 8002f72:	33ff      	adds	r3, #255	; 0xff
 8002f74:	5cd3      	ldrb	r3, [r2, r3]
 8002f76:	3301      	adds	r3, #1
 8002f78:	4a15      	ldr	r2, [pc, #84]	; (8002fd0 <USART1_IRQHandler+0xf0>)
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	d504      	bpl.n	8002f88 <USART1_IRQHandler+0xa8>
 8002f7e:	3b01      	subs	r3, #1
 8002f80:	2280      	movs	r2, #128	; 0x80
 8002f82:	4252      	negs	r2, r2
 8002f84:	4313      	orrs	r3, r2
 8002f86:	3301      	adds	r3, #1
 8002f88:	b2d9      	uxtb	r1, r3
 8002f8a:	4a10      	ldr	r2, [pc, #64]	; (8002fcc <USART1_IRQHandler+0xec>)
 8002f8c:	2328      	movs	r3, #40	; 0x28
 8002f8e:	33ff      	adds	r3, #255	; 0xff
 8002f90:	54d1      	strb	r1, [r2, r3]
			if ( commData.txTail == commData.txHead)
 8002f92:	4a0e      	ldr	r2, [pc, #56]	; (8002fcc <USART1_IRQHandler+0xec>)
 8002f94:	2328      	movs	r3, #40	; 0x28
 8002f96:	33ff      	adds	r3, #255	; 0xff
 8002f98:	5cd2      	ldrb	r2, [r2, r3]
 8002f9a:	490c      	ldr	r1, [pc, #48]	; (8002fcc <USART1_IRQHandler+0xec>)
 8002f9c:	2393      	movs	r3, #147	; 0x93
 8002f9e:	005b      	lsls	r3, r3, #1
 8002fa0:	5ccb      	ldrb	r3, [r1, r3]
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d10c      	bne.n	8002fc0 <USART1_IRQHandler+0xe0>
				USART_ITConfig(USART1, USART_IT_TXE, DISABLE);
 8002fa6:	490b      	ldr	r1, [pc, #44]	; (8002fd4 <USART1_IRQHandler+0xf4>)
 8002fa8:	4b07      	ldr	r3, [pc, #28]	; (8002fc8 <USART1_IRQHandler+0xe8>)
 8002faa:	2200      	movs	r2, #0
 8002fac:	0018      	movs	r0, r3
 8002fae:	f7fe ff4b 	bl	8001e48 <USART_ITConfig>
    	}
		else {
			USART_ITConfig(USART1, USART_IT_TXE, DISABLE); //disable Transmit Data Register empty interrupt
		}
    }
}
 8002fb2:	e005      	b.n	8002fc0 <USART1_IRQHandler+0xe0>
			USART_ITConfig(USART1, USART_IT_TXE, DISABLE); //disable Transmit Data Register empty interrupt
 8002fb4:	4907      	ldr	r1, [pc, #28]	; (8002fd4 <USART1_IRQHandler+0xf4>)
 8002fb6:	4b04      	ldr	r3, [pc, #16]	; (8002fc8 <USART1_IRQHandler+0xe8>)
 8002fb8:	2200      	movs	r2, #0
 8002fba:	0018      	movs	r0, r3
 8002fbc:	f7fe ff44 	bl	8001e48 <USART_ITConfig>
}
 8002fc0:	46c0      	nop			; (mov r8, r8)
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bdb0      	pop	{r4, r5, r7, pc}
 8002fc6:	46c0      	nop			; (mov r8, r8)
 8002fc8:	40013800 	.word	0x40013800
 8002fcc:	200007e0 	.word	0x200007e0
 8002fd0:	8000007f 	.word	0x8000007f
 8002fd4:	00070107 	.word	0x00070107

08002fd8 <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 8002fd8:	b590      	push	{r4, r7, lr}
 8002fda:	b085      	sub	sp, #20
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
 8002fe0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002fe2:	230f      	movs	r3, #15
 8002fe4:	18fb      	adds	r3, r7, r3
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	701a      	strb	r2, [r3, #0]
	////LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 8002fea:	230f      	movs	r3, #15
 8002fec:	18fc      	adds	r4, r7, r3
 8002fee:	683a      	ldr	r2, [r7, #0]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	0011      	movs	r1, r2
 8002ff4:	0018      	movs	r0, r3
 8002ff6:	f000 fea1 	bl	8003d3c <VL53L0X_get_offset_calibration_data_micro_meter>
 8002ffa:	0003      	movs	r3, r0
 8002ffc:	7023      	strb	r3, [r4, #0]
		pOffsetCalibrationDataMicroMeter);

	////LOG_FUNCTION_END(Status);
	return Status;
 8002ffe:	230f      	movs	r3, #15
 8003000:	18fb      	adds	r3, r7, r3
 8003002:	781b      	ldrb	r3, [r3, #0]
 8003004:	b25b      	sxtb	r3, r3
}
 8003006:	0018      	movs	r0, r3
 8003008:	46bd      	mov	sp, r7
 800300a:	b005      	add	sp, #20
 800300c:	bd90      	pop	{r4, r7, pc}
	...

08003010 <VL53L0X_DataInit>:
	////LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 8003010:	b590      	push	{r4, r7, lr}
 8003012:	b097      	sub	sp, #92	; 0x5c
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003018:	2357      	movs	r3, #87	; 0x57
 800301a:	18fb      	adds	r3, r7, r3
 800301c:	2200      	movs	r2, #0
 800301e:	701a      	strb	r2, [r3, #0]
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 8003020:	2357      	movs	r3, #87	; 0x57
 8003022:	18fb      	adds	r3, r7, r3
 8003024:	781b      	ldrb	r3, [r3, #0]
 8003026:	b25b      	sxtb	r3, r3
 8003028:	2b00      	cmp	r3, #0
 800302a:	d109      	bne.n	8003040 <VL53L0X_DataInit+0x30>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 800302c:	2357      	movs	r3, #87	; 0x57
 800302e:	18fc      	adds	r4, r7, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2200      	movs	r2, #0
 8003034:	2188      	movs	r1, #136	; 0x88
 8003036:	0018      	movs	r0, r3
 8003038:	f001 fa1b 	bl	8004472 <VL53L0X_WrByte>
 800303c:	0003      	movs	r3, r0
 800303e:	7023      	strb	r3, [r4, #0]

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	22f0      	movs	r2, #240	; 0xf0
 8003044:	2100      	movs	r1, #0
 8003046:	5499      	strb	r1, [r3, r2]
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 8003048:	687a      	ldr	r2, [r7, #4]
 800304a:	23a9      	movs	r3, #169	; 0xa9
 800304c:	005b      	lsls	r3, r3, #1
 800304e:	21fa      	movs	r1, #250	; 0xfa
 8003050:	0089      	lsls	r1, r1, #2
 8003052:	52d1      	strh	r1, [r2, r3]

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 8003054:	687a      	ldr	r2, [r7, #4]
 8003056:	23aa      	movs	r3, #170	; 0xaa
 8003058:	005b      	lsls	r3, r3, #1
 800305a:	21c8      	movs	r1, #200	; 0xc8
 800305c:	0049      	lsls	r1, r1, #1
 800305e:	52d1      	strh	r1, [r2, r3]
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	23ac      	movs	r3, #172	; 0xac
 8003064:	005b      	lsls	r3, r3, #1
 8003066:	49c4      	ldr	r1, [pc, #784]	; (8003378 <VL53L0X_DataInit+0x368>)
 8003068:	50d1      	str	r1, [r2, r3]
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	22d4      	movs	r2, #212	; 0xd4
 800306e:	49c3      	ldr	r1, [pc, #780]	; (800337c <VL53L0X_DataInit+0x36c>)
 8003070:	5099      	str	r1, [r3, r2]

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8003078:	2357      	movs	r3, #87	; 0x57
 800307a:	18fc      	adds	r4, r7, r3
 800307c:	2310      	movs	r3, #16
 800307e:	18fa      	adds	r2, r7, r3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	0011      	movs	r1, r2
 8003084:	0018      	movs	r0, r3
 8003086:	f000 f97b 	bl	8003380 <VL53L0X_GetDeviceParameters>
 800308a:	0003      	movs	r3, r0
 800308c:	7023      	strb	r3, [r4, #0]
	if (Status == VL53L0X_ERROR_NONE) {
 800308e:	2357      	movs	r3, #87	; 0x57
 8003090:	18fb      	adds	r3, r7, r3
 8003092:	781b      	ldrb	r3, [r3, #0]
 8003094:	b25b      	sxtb	r3, r3
 8003096:	2b00      	cmp	r3, #0
 8003098:	d110      	bne.n	80030bc <VL53L0X_DataInit+0xac>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 800309a:	2310      	movs	r3, #16
 800309c:	18fb      	adds	r3, r7, r3
 800309e:	2200      	movs	r2, #0
 80030a0:	701a      	strb	r2, [r3, #0]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 80030a2:	2310      	movs	r3, #16
 80030a4:	18fb      	adds	r3, r7, r3
 80030a6:	2200      	movs	r2, #0
 80030a8:	705a      	strb	r2, [r3, #1]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2210      	movs	r2, #16
 80030ae:	18ba      	adds	r2, r7, r2
 80030b0:	3310      	adds	r3, #16
 80030b2:	0011      	movs	r1, r2
 80030b4:	2240      	movs	r2, #64	; 0x40
 80030b6:	0018      	movs	r0, r3
 80030b8:	f001 fb42 	bl	8004740 <memcpy>
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 80030bc:	687a      	ldr	r2, [r7, #4]
 80030be:	239a      	movs	r3, #154	; 0x9a
 80030c0:	005b      	lsls	r3, r3, #1
 80030c2:	2164      	movs	r1, #100	; 0x64
 80030c4:	52d1      	strh	r1, [r2, r3]
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	239b      	movs	r3, #155	; 0x9b
 80030ca:	005b      	lsls	r3, r3, #1
 80030cc:	21e1      	movs	r1, #225	; 0xe1
 80030ce:	0089      	lsls	r1, r1, #2
 80030d0:	52d1      	strh	r1, [r2, r3]
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	239c      	movs	r3, #156	; 0x9c
 80030d6:	005b      	lsls	r3, r3, #1
 80030d8:	21fa      	movs	r1, #250	; 0xfa
 80030da:	0049      	lsls	r1, r1, #1
 80030dc:	52d1      	strh	r1, [r2, r3]
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	239e      	movs	r3, #158	; 0x9e
 80030e2:	005b      	lsls	r3, r3, #1
 80030e4:	21a0      	movs	r1, #160	; 0xa0
 80030e6:	0109      	lsls	r1, r1, #4
 80030e8:	52d1      	strh	r1, [r2, r3]

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	23a8      	movs	r3, #168	; 0xa8
 80030ee:	005b      	lsls	r3, r3, #1
 80030f0:	2101      	movs	r1, #1
 80030f2:	54d1      	strb	r1, [r2, r3]

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2201      	movs	r2, #1
 80030f8:	2180      	movs	r1, #128	; 0x80
 80030fa:	0018      	movs	r0, r3
 80030fc:	f001 f9b9 	bl	8004472 <VL53L0X_WrByte>
 8003100:	0003      	movs	r3, r0
 8003102:	0019      	movs	r1, r3
 8003104:	2357      	movs	r3, #87	; 0x57
 8003106:	18fb      	adds	r3, r7, r3
 8003108:	2257      	movs	r2, #87	; 0x57
 800310a:	18ba      	adds	r2, r7, r2
 800310c:	7812      	ldrb	r2, [r2, #0]
 800310e:	430a      	orrs	r2, r1
 8003110:	701a      	strb	r2, [r3, #0]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2201      	movs	r2, #1
 8003116:	21ff      	movs	r1, #255	; 0xff
 8003118:	0018      	movs	r0, r3
 800311a:	f001 f9aa 	bl	8004472 <VL53L0X_WrByte>
 800311e:	0003      	movs	r3, r0
 8003120:	0019      	movs	r1, r3
 8003122:	2357      	movs	r3, #87	; 0x57
 8003124:	18fb      	adds	r3, r7, r3
 8003126:	2257      	movs	r2, #87	; 0x57
 8003128:	18ba      	adds	r2, r7, r2
 800312a:	7812      	ldrb	r2, [r2, #0]
 800312c:	430a      	orrs	r2, r1
 800312e:	701a      	strb	r2, [r3, #0]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	2100      	movs	r1, #0
 8003136:	0018      	movs	r0, r3
 8003138:	f001 f99b 	bl	8004472 <VL53L0X_WrByte>
 800313c:	0003      	movs	r3, r0
 800313e:	0019      	movs	r1, r3
 8003140:	2357      	movs	r3, #87	; 0x57
 8003142:	18fb      	adds	r3, r7, r3
 8003144:	2257      	movs	r2, #87	; 0x57
 8003146:	18ba      	adds	r2, r7, r2
 8003148:	7812      	ldrb	r2, [r2, #0]
 800314a:	430a      	orrs	r2, r1
 800314c:	701a      	strb	r2, [r3, #0]
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 800314e:	230f      	movs	r3, #15
 8003150:	18fa      	adds	r2, r7, r3
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2191      	movs	r1, #145	; 0x91
 8003156:	0018      	movs	r0, r3
 8003158:	f001 fa14 	bl	8004584 <VL53L0X_RdByte>
 800315c:	0003      	movs	r3, r0
 800315e:	0019      	movs	r1, r3
 8003160:	2357      	movs	r3, #87	; 0x57
 8003162:	18fb      	adds	r3, r7, r3
 8003164:	2257      	movs	r2, #87	; 0x57
 8003166:	18ba      	adds	r2, r7, r2
 8003168:	7812      	ldrb	r2, [r2, #0]
 800316a:	430a      	orrs	r2, r1
 800316c:	701a      	strb	r2, [r3, #0]
	PALDevDataSet(Dev, StopVariable, StopVariable);
 800316e:	230f      	movs	r3, #15
 8003170:	18fb      	adds	r3, r7, r3
 8003172:	7819      	ldrb	r1, [r3, #0]
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	239d      	movs	r3, #157	; 0x9d
 8003178:	005b      	lsls	r3, r3, #1
 800317a:	54d1      	strb	r1, [r2, r3]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2201      	movs	r2, #1
 8003180:	2100      	movs	r1, #0
 8003182:	0018      	movs	r0, r3
 8003184:	f001 f975 	bl	8004472 <VL53L0X_WrByte>
 8003188:	0003      	movs	r3, r0
 800318a:	0019      	movs	r1, r3
 800318c:	2357      	movs	r3, #87	; 0x57
 800318e:	18fb      	adds	r3, r7, r3
 8003190:	2257      	movs	r2, #87	; 0x57
 8003192:	18ba      	adds	r2, r7, r2
 8003194:	7812      	ldrb	r2, [r2, #0]
 8003196:	430a      	orrs	r2, r1
 8003198:	701a      	strb	r2, [r3, #0]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2200      	movs	r2, #0
 800319e:	21ff      	movs	r1, #255	; 0xff
 80031a0:	0018      	movs	r0, r3
 80031a2:	f001 f966 	bl	8004472 <VL53L0X_WrByte>
 80031a6:	0003      	movs	r3, r0
 80031a8:	0019      	movs	r1, r3
 80031aa:	2357      	movs	r3, #87	; 0x57
 80031ac:	18fb      	adds	r3, r7, r3
 80031ae:	2257      	movs	r2, #87	; 0x57
 80031b0:	18ba      	adds	r2, r7, r2
 80031b2:	7812      	ldrb	r2, [r2, #0]
 80031b4:	430a      	orrs	r2, r1
 80031b6:	701a      	strb	r2, [r3, #0]
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2200      	movs	r2, #0
 80031bc:	2180      	movs	r1, #128	; 0x80
 80031be:	0018      	movs	r0, r3
 80031c0:	f001 f957 	bl	8004472 <VL53L0X_WrByte>
 80031c4:	0003      	movs	r3, r0
 80031c6:	0019      	movs	r1, r3
 80031c8:	2357      	movs	r3, #87	; 0x57
 80031ca:	18fb      	adds	r3, r7, r3
 80031cc:	2257      	movs	r2, #87	; 0x57
 80031ce:	18ba      	adds	r2, r7, r2
 80031d0:	7812      	ldrb	r2, [r2, #0]
 80031d2:	430a      	orrs	r2, r1
 80031d4:	701a      	strb	r2, [r3, #0]

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80031d6:	2300      	movs	r3, #0
 80031d8:	653b      	str	r3, [r7, #80]	; 0x50
 80031da:	e018      	b.n	800320e <VL53L0X_DataInit+0x1fe>
		if (Status == VL53L0X_ERROR_NONE)
 80031dc:	2357      	movs	r3, #87	; 0x57
 80031de:	18fb      	adds	r3, r7, r3
 80031e0:	781b      	ldrb	r3, [r3, #0]
 80031e2:	b25b      	sxtb	r3, r3
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d116      	bne.n	8003216 <VL53L0X_DataInit+0x206>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 80031e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031ea:	b299      	uxth	r1, r3
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2201      	movs	r2, #1
 80031f0:	0018      	movs	r0, r3
 80031f2:	f000 fb43 	bl	800387c <VL53L0X_SetLimitCheckEnable>
 80031f6:	0003      	movs	r3, r0
 80031f8:	0019      	movs	r1, r3
 80031fa:	2357      	movs	r3, #87	; 0x57
 80031fc:	18fb      	adds	r3, r7, r3
 80031fe:	2257      	movs	r2, #87	; 0x57
 8003200:	18ba      	adds	r2, r7, r2
 8003202:	7812      	ldrb	r2, [r2, #0]
 8003204:	430a      	orrs	r2, r1
 8003206:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8003208:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800320a:	3301      	adds	r3, #1
 800320c:	653b      	str	r3, [r7, #80]	; 0x50
 800320e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003210:	2b05      	cmp	r3, #5
 8003212:	dde3      	ble.n	80031dc <VL53L0X_DataInit+0x1cc>
 8003214:	e000      	b.n	8003218 <VL53L0X_DataInit+0x208>
		else
			break;
 8003216:	46c0      	nop			; (mov r8, r8)

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 8003218:	2357      	movs	r3, #87	; 0x57
 800321a:	18fb      	adds	r3, r7, r3
 800321c:	781b      	ldrb	r3, [r3, #0]
 800321e:	b25b      	sxtb	r3, r3
 8003220:	2b00      	cmp	r3, #0
 8003222:	d109      	bne.n	8003238 <VL53L0X_DataInit+0x228>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8003224:	2357      	movs	r3, #87	; 0x57
 8003226:	18fc      	adds	r4, r7, r3
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2200      	movs	r2, #0
 800322c:	2102      	movs	r1, #2
 800322e:	0018      	movs	r0, r3
 8003230:	f000 fb24 	bl	800387c <VL53L0X_SetLimitCheckEnable>
 8003234:	0003      	movs	r3, r0
 8003236:	7023      	strb	r3, [r4, #0]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8003238:	2357      	movs	r3, #87	; 0x57
 800323a:	18fb      	adds	r3, r7, r3
 800323c:	781b      	ldrb	r3, [r3, #0]
 800323e:	b25b      	sxtb	r3, r3
 8003240:	2b00      	cmp	r3, #0
 8003242:	d109      	bne.n	8003258 <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8003244:	2357      	movs	r3, #87	; 0x57
 8003246:	18fc      	adds	r4, r7, r3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2200      	movs	r2, #0
 800324c:	2103      	movs	r1, #3
 800324e:	0018      	movs	r0, r3
 8003250:	f000 fb14 	bl	800387c <VL53L0X_SetLimitCheckEnable>
 8003254:	0003      	movs	r3, r0
 8003256:	7023      	strb	r3, [r4, #0]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8003258:	2357      	movs	r3, #87	; 0x57
 800325a:	18fb      	adds	r3, r7, r3
 800325c:	781b      	ldrb	r3, [r3, #0]
 800325e:	b25b      	sxtb	r3, r3
 8003260:	2b00      	cmp	r3, #0
 8003262:	d109      	bne.n	8003278 <VL53L0X_DataInit+0x268>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8003264:	2357      	movs	r3, #87	; 0x57
 8003266:	18fc      	adds	r4, r7, r3
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	2104      	movs	r1, #4
 800326e:	0018      	movs	r0, r3
 8003270:	f000 fb04 	bl	800387c <VL53L0X_SetLimitCheckEnable>
 8003274:	0003      	movs	r3, r0
 8003276:	7023      	strb	r3, [r4, #0]
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8003278:	2357      	movs	r3, #87	; 0x57
 800327a:	18fb      	adds	r3, r7, r3
 800327c:	781b      	ldrb	r3, [r3, #0]
 800327e:	b25b      	sxtb	r3, r3
 8003280:	2b00      	cmp	r3, #0
 8003282:	d109      	bne.n	8003298 <VL53L0X_DataInit+0x288>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8003284:	2357      	movs	r3, #87	; 0x57
 8003286:	18fc      	adds	r4, r7, r3
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2200      	movs	r2, #0
 800328c:	2105      	movs	r1, #5
 800328e:	0018      	movs	r0, r3
 8003290:	f000 faf4 	bl	800387c <VL53L0X_SetLimitCheckEnable>
 8003294:	0003      	movs	r3, r0
 8003296:	7023      	strb	r3, [r4, #0]
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 8003298:	2357      	movs	r3, #87	; 0x57
 800329a:	18fb      	adds	r3, r7, r3
 800329c:	781b      	ldrb	r3, [r3, #0]
 800329e:	b25b      	sxtb	r3, r3
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d10a      	bne.n	80032ba <VL53L0X_DataInit+0x2aa>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 80032a4:	2357      	movs	r3, #87	; 0x57
 80032a6:	18fc      	adds	r4, r7, r3
 80032a8:	2390      	movs	r3, #144	; 0x90
 80032aa:	035a      	lsls	r2, r3, #13
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2100      	movs	r1, #0
 80032b0:	0018      	movs	r0, r3
 80032b2:	f000 fbd5 	bl	8003a60 <VL53L0X_SetLimitCheckValue>
 80032b6:	0003      	movs	r3, r0
 80032b8:	7023      	strb	r3, [r4, #0]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80032ba:	2357      	movs	r3, #87	; 0x57
 80032bc:	18fb      	adds	r3, r7, r3
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	b25b      	sxtb	r3, r3
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d10a      	bne.n	80032dc <VL53L0X_DataInit+0x2cc>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 80032c6:	2357      	movs	r3, #87	; 0x57
 80032c8:	18fc      	adds	r4, r7, r3
 80032ca:	2380      	movs	r3, #128	; 0x80
 80032cc:	01da      	lsls	r2, r3, #7
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2101      	movs	r1, #1
 80032d2:	0018      	movs	r0, r3
 80032d4:	f000 fbc4 	bl	8003a60 <VL53L0X_SetLimitCheckValue>
 80032d8:	0003      	movs	r3, r0
 80032da:	7023      	strb	r3, [r4, #0]
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80032dc:	2357      	movs	r3, #87	; 0x57
 80032de:	18fb      	adds	r3, r7, r3
 80032e0:	781b      	ldrb	r3, [r3, #0]
 80032e2:	b25b      	sxtb	r3, r3
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d10a      	bne.n	80032fe <VL53L0X_DataInit+0x2ee>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 80032e8:	2357      	movs	r3, #87	; 0x57
 80032ea:	18fc      	adds	r4, r7, r3
 80032ec:	238c      	movs	r3, #140	; 0x8c
 80032ee:	039a      	lsls	r2, r3, #14
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2102      	movs	r1, #2
 80032f4:	0018      	movs	r0, r3
 80032f6:	f000 fbb3 	bl	8003a60 <VL53L0X_SetLimitCheckValue>
 80032fa:	0003      	movs	r3, r0
 80032fc:	7023      	strb	r3, [r4, #0]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80032fe:	2357      	movs	r3, #87	; 0x57
 8003300:	18fb      	adds	r3, r7, r3
 8003302:	781b      	ldrb	r3, [r3, #0]
 8003304:	b25b      	sxtb	r3, r3
 8003306:	2b00      	cmp	r3, #0
 8003308:	d109      	bne.n	800331e <VL53L0X_DataInit+0x30e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800330a:	2357      	movs	r3, #87	; 0x57
 800330c:	18fc      	adds	r4, r7, r3
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	2103      	movs	r1, #3
 8003314:	0018      	movs	r0, r3
 8003316:	f000 fba3 	bl	8003a60 <VL53L0X_SetLimitCheckValue>
 800331a:	0003      	movs	r3, r0
 800331c:	7023      	strb	r3, [r4, #0]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800331e:	2357      	movs	r3, #87	; 0x57
 8003320:	18fb      	adds	r3, r7, r3
 8003322:	781b      	ldrb	r3, [r3, #0]
 8003324:	b25b      	sxtb	r3, r3
 8003326:	2b00      	cmp	r3, #0
 8003328:	d113      	bne.n	8003352 <VL53L0X_DataInit+0x342>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	2398      	movs	r3, #152	; 0x98
 800332e:	005b      	lsls	r3, r3, #1
 8003330:	21ff      	movs	r1, #255	; 0xff
 8003332:	54d1      	strb	r1, [r2, r3]
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8003334:	2357      	movs	r3, #87	; 0x57
 8003336:	18fc      	adds	r4, r7, r3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	22ff      	movs	r2, #255	; 0xff
 800333c:	2101      	movs	r1, #1
 800333e:	0018      	movs	r0, r3
 8003340:	f001 f897 	bl	8004472 <VL53L0X_WrByte>
 8003344:	0003      	movs	r3, r0
 8003346:	7023      	strb	r3, [r4, #0]
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 8003348:	687a      	ldr	r2, [r7, #4]
 800334a:	2399      	movs	r3, #153	; 0x99
 800334c:	005b      	lsls	r3, r3, #1
 800334e:	2101      	movs	r1, #1
 8003350:	54d1      	strb	r1, [r2, r3]
	}

	if (Status == VL53L0X_ERROR_NONE)
 8003352:	2357      	movs	r3, #87	; 0x57
 8003354:	18fb      	adds	r3, r7, r3
 8003356:	781b      	ldrb	r3, [r3, #0]
 8003358:	b25b      	sxtb	r3, r3
 800335a:	2b00      	cmp	r3, #0
 800335c:	d104      	bne.n	8003368 <VL53L0X_DataInit+0x358>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 800335e:	687a      	ldr	r2, [r7, #4]
 8003360:	2316      	movs	r3, #22
 8003362:	33ff      	adds	r3, #255	; 0xff
 8003364:	2100      	movs	r1, #0
 8003366:	54d1      	strb	r1, [r2, r3]


	////LOG_FUNCTION_END(Status);
	return Status;
 8003368:	2357      	movs	r3, #87	; 0x57
 800336a:	18fb      	adds	r3, r7, r3
 800336c:	781b      	ldrb	r3, [r3, #0]
 800336e:	b25b      	sxtb	r3, r3
}
 8003370:	0018      	movs	r0, r3
 8003372:	46bd      	mov	sp, r7
 8003374:	b017      	add	sp, #92	; 0x5c
 8003376:	bd90      	pop	{r4, r7, pc}
 8003378:	00016b85 	.word	0x00016b85
 800337c:	000970a4 	.word	0x000970a4

08003380 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 8003380:	b590      	push	{r4, r7, lr}
 8003382:	b085      	sub	sp, #20
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800338a:	230f      	movs	r3, #15
 800338c:	18fb      	adds	r3, r7, r3
 800338e:	2200      	movs	r2, #0
 8003390:	701a      	strb	r2, [r3, #0]
	int i;

	////LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 8003392:	683a      	ldr	r2, [r7, #0]
 8003394:	230f      	movs	r3, #15
 8003396:	18fc      	adds	r4, r7, r3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	0011      	movs	r1, r2
 800339c:	0018      	movs	r0, r3
 800339e:	f000 f8b3 	bl	8003508 <VL53L0X_GetDeviceMode>
 80033a2:	0003      	movs	r3, r0
 80033a4:	7023      	strb	r3, [r4, #0]

	if (Status == VL53L0X_ERROR_NONE)
 80033a6:	230f      	movs	r3, #15
 80033a8:	18fb      	adds	r3, r7, r3
 80033aa:	781b      	ldrb	r3, [r3, #0]
 80033ac:	b25b      	sxtb	r3, r3
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d10b      	bne.n	80033ca <VL53L0X_GetDeviceParameters+0x4a>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	3308      	adds	r3, #8
 80033b6:	001a      	movs	r2, r3
 80033b8:	230f      	movs	r3, #15
 80033ba:	18fc      	adds	r4, r7, r3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	0011      	movs	r1, r2
 80033c0:	0018      	movs	r0, r3
 80033c2:	f000 f9d3 	bl	800376c <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 80033c6:	0003      	movs	r3, r0
 80033c8:	7023      	strb	r3, [r4, #0]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 80033ca:	230f      	movs	r3, #15
 80033cc:	18fb      	adds	r3, r7, r3
 80033ce:	781b      	ldrb	r3, [r3, #0]
 80033d0:	b25b      	sxtb	r3, r3
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d102      	bne.n	80033dc <VL53L0X_GetDeviceParameters+0x5c>
		pDeviceParameters->XTalkCompensationEnable = 0;
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	2200      	movs	r2, #0
 80033da:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 80033dc:	230f      	movs	r3, #15
 80033de:	18fb      	adds	r3, r7, r3
 80033e0:	781b      	ldrb	r3, [r3, #0]
 80033e2:	b25b      	sxtb	r3, r3
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d10b      	bne.n	8003400 <VL53L0X_GetDeviceParameters+0x80>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	3310      	adds	r3, #16
 80033ec:	001a      	movs	r2, r3
 80033ee:	230f      	movs	r3, #15
 80033f0:	18fc      	adds	r4, r7, r3
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	0011      	movs	r1, r2
 80033f6:	0018      	movs	r0, r3
 80033f8:	f000 fa00 	bl	80037fc <VL53L0X_GetXTalkCompensationRateMegaCps>
 80033fc:	0003      	movs	r3, r0
 80033fe:	7023      	strb	r3, [r4, #0]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 8003400:	230f      	movs	r3, #15
 8003402:	18fb      	adds	r3, r7, r3
 8003404:	781b      	ldrb	r3, [r3, #0]
 8003406:	b25b      	sxtb	r3, r3
 8003408:	2b00      	cmp	r3, #0
 800340a:	d10b      	bne.n	8003424 <VL53L0X_GetDeviceParameters+0xa4>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	3314      	adds	r3, #20
 8003410:	001a      	movs	r2, r3
 8003412:	230f      	movs	r3, #15
 8003414:	18fc      	adds	r4, r7, r3
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	0011      	movs	r1, r2
 800341a:	0018      	movs	r0, r3
 800341c:	f7ff fddc 	bl	8002fd8 <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 8003420:	0003      	movs	r3, r0
 8003422:	7023      	strb	r3, [r4, #0]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 8003424:	230f      	movs	r3, #15
 8003426:	18fb      	adds	r3, r7, r3
 8003428:	781b      	ldrb	r3, [r3, #0]
 800342a:	b25b      	sxtb	r3, r3
 800342c:	2b00      	cmp	r3, #0
 800342e:	d140      	bne.n	80034b2 <VL53L0X_GetDeviceParameters+0x132>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8003430:	2300      	movs	r3, #0
 8003432:	60bb      	str	r3, [r7, #8]
 8003434:	e036      	b.n	80034a4 <VL53L0X_GetDeviceParameters+0x124>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8003436:	230f      	movs	r3, #15
 8003438:	18fb      	adds	r3, r7, r3
 800343a:	781b      	ldrb	r3, [r3, #0]
 800343c:	b25b      	sxtb	r3, r3
 800343e:	2b00      	cmp	r3, #0
 8003440:	d134      	bne.n	80034ac <VL53L0X_GetDeviceParameters+0x12c>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	b299      	uxth	r1, r3
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	3308      	adds	r3, #8
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	683a      	ldr	r2, [r7, #0]
 800344e:	18d3      	adds	r3, r2, r3
 8003450:	1d1a      	adds	r2, r3, #4
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	0018      	movs	r0, r3
 8003456:	f000 fb79 	bl	8003b4c <VL53L0X_GetLimitCheckValue>
 800345a:	0003      	movs	r3, r0
 800345c:	0019      	movs	r1, r3
 800345e:	230f      	movs	r3, #15
 8003460:	18fb      	adds	r3, r7, r3
 8003462:	220f      	movs	r2, #15
 8003464:	18ba      	adds	r2, r7, r2
 8003466:	7812      	ldrb	r2, [r2, #0]
 8003468:	430a      	orrs	r2, r1
 800346a:	701a      	strb	r2, [r3, #0]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800346c:	230f      	movs	r3, #15
 800346e:	18fb      	adds	r3, r7, r3
 8003470:	781b      	ldrb	r3, [r3, #0]
 8003472:	b25b      	sxtb	r3, r3
 8003474:	2b00      	cmp	r3, #0
 8003476:	d11b      	bne.n	80034b0 <VL53L0X_GetDeviceParameters+0x130>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	b299      	uxth	r1, r3
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	3318      	adds	r3, #24
 8003480:	683a      	ldr	r2, [r7, #0]
 8003482:	18d2      	adds	r2, r2, r3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	0018      	movs	r0, r3
 8003488:	f000 fab8 	bl	80039fc <VL53L0X_GetLimitCheckEnable>
 800348c:	0003      	movs	r3, r0
 800348e:	0019      	movs	r1, r3
 8003490:	230f      	movs	r3, #15
 8003492:	18fb      	adds	r3, r7, r3
 8003494:	220f      	movs	r2, #15
 8003496:	18ba      	adds	r2, r7, r2
 8003498:	7812      	ldrb	r2, [r2, #0]
 800349a:	430a      	orrs	r2, r1
 800349c:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	3301      	adds	r3, #1
 80034a2:	60bb      	str	r3, [r7, #8]
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	2b05      	cmp	r3, #5
 80034a8:	ddc5      	ble.n	8003436 <VL53L0X_GetDeviceParameters+0xb6>
 80034aa:	e002      	b.n	80034b2 <VL53L0X_GetDeviceParameters+0x132>
				break;
 80034ac:	46c0      	nop			; (mov r8, r8)
 80034ae:	e000      	b.n	80034b2 <VL53L0X_GetDeviceParameters+0x132>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 80034b0:	46c0      	nop			; (mov r8, r8)
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80034b2:	230f      	movs	r3, #15
 80034b4:	18fb      	adds	r3, r7, r3
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	b25b      	sxtb	r3, r3
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d10b      	bne.n	80034d6 <VL53L0X_GetDeviceParameters+0x156>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	333c      	adds	r3, #60	; 0x3c
 80034c2:	001a      	movs	r2, r3
 80034c4:	230f      	movs	r3, #15
 80034c6:	18fc      	adds	r4, r7, r3
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	0011      	movs	r1, r2
 80034cc:	0018      	movs	r0, r3
 80034ce:	f000 fbf3 	bl	8003cb8 <VL53L0X_GetWrapAroundCheckEnable>
 80034d2:	0003      	movs	r3, r0
 80034d4:	7023      	strb	r3, [r4, #0]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 80034d6:	230f      	movs	r3, #15
 80034d8:	18fb      	adds	r3, r7, r3
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	b25b      	sxtb	r3, r3
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d10a      	bne.n	80034f8 <VL53L0X_GetDeviceParameters+0x178>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	1d1a      	adds	r2, r3, #4
 80034e6:	230f      	movs	r3, #15
 80034e8:	18fc      	adds	r4, r7, r3
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	0011      	movs	r1, r2
 80034ee:	0018      	movs	r0, r3
 80034f0:	f000 f81f 	bl	8003532 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 80034f4:	0003      	movs	r3, r0
 80034f6:	7023      	strb	r3, [r4, #0]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	////LOG_FUNCTION_END(Status);
	return Status;
 80034f8:	230f      	movs	r3, #15
 80034fa:	18fb      	adds	r3, r7, r3
 80034fc:	781b      	ldrb	r3, [r3, #0]
 80034fe:	b25b      	sxtb	r3, r3
}
 8003500:	0018      	movs	r0, r3
 8003502:	46bd      	mov	sp, r7
 8003504:	b005      	add	sp, #20
 8003506:	bd90      	pop	{r4, r7, pc}

08003508 <VL53L0X_GetDeviceMode>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b084      	sub	sp, #16
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003512:	230f      	movs	r3, #15
 8003514:	18fb      	adds	r3, r7, r3
 8003516:	2200      	movs	r2, #0
 8003518:	701a      	strb	r2, [r3, #0]
	////LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	7c1a      	ldrb	r2, [r3, #16]
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	701a      	strb	r2, [r3, #0]

	////LOG_FUNCTION_END(Status);
	return Status;
 8003522:	230f      	movs	r3, #15
 8003524:	18fb      	adds	r3, r7, r3
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	b25b      	sxtb	r3, r3
}
 800352a:	0018      	movs	r0, r3
 800352c:	46bd      	mov	sp, r7
 800352e:	b004      	add	sp, #16
 8003530:	bd80      	pop	{r7, pc}

08003532 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8003532:	b590      	push	{r4, r7, lr}
 8003534:	b085      	sub	sp, #20
 8003536:	af00      	add	r7, sp, #0
 8003538:	6078      	str	r0, [r7, #4]
 800353a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800353c:	230f      	movs	r3, #15
 800353e:	18fb      	adds	r3, r7, r3
 8003540:	2200      	movs	r2, #0
 8003542:	701a      	strb	r2, [r3, #0]
	////LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 8003544:	230f      	movs	r3, #15
 8003546:	18fc      	adds	r4, r7, r3
 8003548:	683a      	ldr	r2, [r7, #0]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	0011      	movs	r1, r2
 800354e:	0018      	movs	r0, r3
 8003550:	f000 fe4a 	bl	80041e8 <VL53L0X_get_measurement_timing_budget_micro_seconds>
 8003554:	0003      	movs	r3, r0
 8003556:	7023      	strb	r3, [r4, #0]
		pMeasurementTimingBudgetMicroSeconds);

	////LOG_FUNCTION_END(Status);
	return Status;
 8003558:	230f      	movs	r3, #15
 800355a:	18fb      	adds	r3, r7, r3
 800355c:	781b      	ldrb	r3, [r3, #0]
 800355e:	b25b      	sxtb	r3, r3
}
 8003560:	0018      	movs	r0, r3
 8003562:	46bd      	mov	sp, r7
 8003564:	b005      	add	sp, #20
 8003566:	bd90      	pop	{r4, r7, pc}

08003568 <VL53L0X_GetVcselPulsePeriod>:
	return Status;
}

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8003568:	b590      	push	{r4, r7, lr}
 800356a:	b087      	sub	sp, #28
 800356c:	af00      	add	r7, sp, #0
 800356e:	60f8      	str	r0, [r7, #12]
 8003570:	607a      	str	r2, [r7, #4]
 8003572:	230b      	movs	r3, #11
 8003574:	18fb      	adds	r3, r7, r3
 8003576:	1c0a      	adds	r2, r1, #0
 8003578:	701a      	strb	r2, [r3, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800357a:	2317      	movs	r3, #23
 800357c:	18fb      	adds	r3, r7, r3
 800357e:	2200      	movs	r2, #0
 8003580:	701a      	strb	r2, [r3, #0]
	////LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 8003582:	2317      	movs	r3, #23
 8003584:	18fc      	adds	r4, r7, r3
 8003586:	687a      	ldr	r2, [r7, #4]
 8003588:	230b      	movs	r3, #11
 800358a:	18fb      	adds	r3, r7, r3
 800358c:	7819      	ldrb	r1, [r3, #0]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	0018      	movs	r0, r3
 8003592:	f000 fddf 	bl	8004154 <VL53L0X_get_vcsel_pulse_period>
 8003596:	0003      	movs	r3, r0
 8003598:	7023      	strb	r3, [r4, #0]
		pVCSELPulsePeriodPCLK);

	////LOG_FUNCTION_END(Status);
	return Status;
 800359a:	2317      	movs	r3, #23
 800359c:	18fb      	adds	r3, r7, r3
 800359e:	781b      	ldrb	r3, [r3, #0]
 80035a0:	b25b      	sxtb	r3, r3
}
 80035a2:	0018      	movs	r0, r3
 80035a4:	46bd      	mov	sp, r7
 80035a6:	b007      	add	sp, #28
 80035a8:	bd90      	pop	{r4, r7, pc}
	...

080035ac <sequence_step_enabled>:
}

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b086      	sub	sp, #24
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	60f8      	str	r0, [r7, #12]
 80035b4:	0008      	movs	r0, r1
 80035b6:	0011      	movs	r1, r2
 80035b8:	607b      	str	r3, [r7, #4]
 80035ba:	230b      	movs	r3, #11
 80035bc:	18fb      	adds	r3, r7, r3
 80035be:	1c02      	adds	r2, r0, #0
 80035c0:	701a      	strb	r2, [r3, #0]
 80035c2:	230a      	movs	r3, #10
 80035c4:	18fb      	adds	r3, r7, r3
 80035c6:	1c0a      	adds	r2, r1, #0
 80035c8:	701a      	strb	r2, [r3, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80035ca:	2317      	movs	r3, #23
 80035cc:	18fb      	adds	r3, r7, r3
 80035ce:	2200      	movs	r2, #0
 80035d0:	701a      	strb	r2, [r3, #0]
	*pSequenceStepEnabled = 0;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2200      	movs	r2, #0
 80035d6:	701a      	strb	r2, [r3, #0]
	////LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 80035d8:	230b      	movs	r3, #11
 80035da:	18fb      	adds	r3, r7, r3
 80035dc:	781b      	ldrb	r3, [r3, #0]
 80035de:	2b04      	cmp	r3, #4
 80035e0:	d838      	bhi.n	8003654 <sequence_step_enabled+0xa8>
 80035e2:	009a      	lsls	r2, r3, #2
 80035e4:	4b21      	ldr	r3, [pc, #132]	; (800366c <sequence_step_enabled+0xc0>)
 80035e6:	18d3      	adds	r3, r2, r3
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	469f      	mov	pc, r3
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 80035ec:	230a      	movs	r3, #10
 80035ee:	18fb      	adds	r3, r7, r3
 80035f0:	781b      	ldrb	r3, [r3, #0]
 80035f2:	111b      	asrs	r3, r3, #4
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	2201      	movs	r2, #1
 80035f8:	4013      	ands	r3, r2
 80035fa:	b2da      	uxtb	r2, r3
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	701a      	strb	r2, [r3, #0]
		break;
 8003600:	e02c      	b.n	800365c <sequence_step_enabled+0xb0>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 8003602:	230a      	movs	r3, #10
 8003604:	18fb      	adds	r3, r7, r3
 8003606:	781b      	ldrb	r3, [r3, #0]
 8003608:	10db      	asrs	r3, r3, #3
 800360a:	b2db      	uxtb	r3, r3
 800360c:	2201      	movs	r2, #1
 800360e:	4013      	ands	r3, r2
 8003610:	b2da      	uxtb	r2, r3
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	701a      	strb	r2, [r3, #0]
		break;
 8003616:	e021      	b.n	800365c <sequence_step_enabled+0xb0>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 8003618:	230a      	movs	r3, #10
 800361a:	18fb      	adds	r3, r7, r3
 800361c:	781b      	ldrb	r3, [r3, #0]
 800361e:	109b      	asrs	r3, r3, #2
 8003620:	b2db      	uxtb	r3, r3
 8003622:	2201      	movs	r2, #1
 8003624:	4013      	ands	r3, r2
 8003626:	b2da      	uxtb	r2, r3
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	701a      	strb	r2, [r3, #0]
		break;
 800362c:	e016      	b.n	800365c <sequence_step_enabled+0xb0>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 800362e:	230a      	movs	r3, #10
 8003630:	18fb      	adds	r3, r7, r3
 8003632:	781b      	ldrb	r3, [r3, #0]
 8003634:	119b      	asrs	r3, r3, #6
 8003636:	b2db      	uxtb	r3, r3
 8003638:	2201      	movs	r2, #1
 800363a:	4013      	ands	r3, r2
 800363c:	b2da      	uxtb	r2, r3
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	701a      	strb	r2, [r3, #0]
		break;
 8003642:	e00b      	b.n	800365c <sequence_step_enabled+0xb0>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 8003644:	230a      	movs	r3, #10
 8003646:	18fb      	adds	r3, r7, r3
 8003648:	781b      	ldrb	r3, [r3, #0]
 800364a:	09db      	lsrs	r3, r3, #7
 800364c:	b2da      	uxtb	r2, r3
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	701a      	strb	r2, [r3, #0]
		break;
 8003652:	e003      	b.n	800365c <sequence_step_enabled+0xb0>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8003654:	2317      	movs	r3, #23
 8003656:	18fb      	adds	r3, r7, r3
 8003658:	22fc      	movs	r2, #252	; 0xfc
 800365a:	701a      	strb	r2, [r3, #0]
	}

	////LOG_FUNCTION_END(Status);
	return Status;
 800365c:	2317      	movs	r3, #23
 800365e:	18fb      	adds	r3, r7, r3
 8003660:	781b      	ldrb	r3, [r3, #0]
 8003662:	b25b      	sxtb	r3, r3
}
 8003664:	0018      	movs	r0, r3
 8003666:	46bd      	mov	sp, r7
 8003668:	b006      	add	sp, #24
 800366a:	bd80      	pop	{r7, pc}
 800366c:	08004ab0 	.word	0x08004ab0

08003670 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 8003670:	b590      	push	{r4, r7, lr}
 8003672:	b085      	sub	sp, #20
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800367a:	230f      	movs	r3, #15
 800367c:	18fb      	adds	r3, r7, r3
 800367e:	2200      	movs	r2, #0
 8003680:	701a      	strb	r2, [r3, #0]
	uint8_t SequenceConfig = 0;
 8003682:	230e      	movs	r3, #14
 8003684:	18fb      	adds	r3, r7, r3
 8003686:	2200      	movs	r2, #0
 8003688:	701a      	strb	r2, [r3, #0]
	////LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800368a:	230f      	movs	r3, #15
 800368c:	18fc      	adds	r4, r7, r3
 800368e:	230e      	movs	r3, #14
 8003690:	18fa      	adds	r2, r7, r3
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2101      	movs	r1, #1
 8003696:	0018      	movs	r0, r3
 8003698:	f000 ff74 	bl	8004584 <VL53L0X_RdByte>
 800369c:	0003      	movs	r3, r0
 800369e:	7023      	strb	r3, [r4, #0]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 80036a0:	230f      	movs	r3, #15
 80036a2:	18fb      	adds	r3, r7, r3
 80036a4:	781b      	ldrb	r3, [r3, #0]
 80036a6:	b25b      	sxtb	r3, r3
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d10b      	bne.n	80036c4 <VL53L0X_GetSequenceStepEnables+0x54>
		Status = sequence_step_enabled(Dev,
 80036ac:	230e      	movs	r3, #14
 80036ae:	18fb      	adds	r3, r7, r3
 80036b0:	781a      	ldrb	r2, [r3, #0]
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	210f      	movs	r1, #15
 80036b6:	187c      	adds	r4, r7, r1
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	2100      	movs	r1, #0
 80036bc:	f7ff ff76 	bl	80035ac <sequence_step_enabled>
 80036c0:	0003      	movs	r3, r0
 80036c2:	7023      	strb	r3, [r4, #0]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80036c4:	230f      	movs	r3, #15
 80036c6:	18fb      	adds	r3, r7, r3
 80036c8:	781b      	ldrb	r3, [r3, #0]
 80036ca:	b25b      	sxtb	r3, r3
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d10c      	bne.n	80036ea <VL53L0X_GetSequenceStepEnables+0x7a>
		Status = sequence_step_enabled(Dev,
 80036d0:	230e      	movs	r3, #14
 80036d2:	18fb      	adds	r3, r7, r3
 80036d4:	781a      	ldrb	r2, [r3, #0]
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	3302      	adds	r3, #2
 80036da:	210f      	movs	r1, #15
 80036dc:	187c      	adds	r4, r7, r1
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	2101      	movs	r1, #1
 80036e2:	f7ff ff63 	bl	80035ac <sequence_step_enabled>
 80036e6:	0003      	movs	r3, r0
 80036e8:	7023      	strb	r3, [r4, #0]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80036ea:	230f      	movs	r3, #15
 80036ec:	18fb      	adds	r3, r7, r3
 80036ee:	781b      	ldrb	r3, [r3, #0]
 80036f0:	b25b      	sxtb	r3, r3
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d10c      	bne.n	8003710 <VL53L0X_GetSequenceStepEnables+0xa0>
		Status = sequence_step_enabled(Dev,
 80036f6:	230e      	movs	r3, #14
 80036f8:	18fb      	adds	r3, r7, r3
 80036fa:	781a      	ldrb	r2, [r3, #0]
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	3301      	adds	r3, #1
 8003700:	210f      	movs	r1, #15
 8003702:	187c      	adds	r4, r7, r1
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	2102      	movs	r1, #2
 8003708:	f7ff ff50 	bl	80035ac <sequence_step_enabled>
 800370c:	0003      	movs	r3, r0
 800370e:	7023      	strb	r3, [r4, #0]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8003710:	230f      	movs	r3, #15
 8003712:	18fb      	adds	r3, r7, r3
 8003714:	781b      	ldrb	r3, [r3, #0]
 8003716:	b25b      	sxtb	r3, r3
 8003718:	2b00      	cmp	r3, #0
 800371a:	d10c      	bne.n	8003736 <VL53L0X_GetSequenceStepEnables+0xc6>
		Status = sequence_step_enabled(Dev,
 800371c:	230e      	movs	r3, #14
 800371e:	18fb      	adds	r3, r7, r3
 8003720:	781a      	ldrb	r2, [r3, #0]
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	3303      	adds	r3, #3
 8003726:	210f      	movs	r1, #15
 8003728:	187c      	adds	r4, r7, r1
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	2103      	movs	r1, #3
 800372e:	f7ff ff3d 	bl	80035ac <sequence_step_enabled>
 8003732:	0003      	movs	r3, r0
 8003734:	7023      	strb	r3, [r4, #0]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8003736:	230f      	movs	r3, #15
 8003738:	18fb      	adds	r3, r7, r3
 800373a:	781b      	ldrb	r3, [r3, #0]
 800373c:	b25b      	sxtb	r3, r3
 800373e:	2b00      	cmp	r3, #0
 8003740:	d10c      	bne.n	800375c <VL53L0X_GetSequenceStepEnables+0xec>
		Status = sequence_step_enabled(Dev,
 8003742:	230e      	movs	r3, #14
 8003744:	18fb      	adds	r3, r7, r3
 8003746:	781a      	ldrb	r2, [r3, #0]
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	3304      	adds	r3, #4
 800374c:	210f      	movs	r1, #15
 800374e:	187c      	adds	r4, r7, r1
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	2104      	movs	r1, #4
 8003754:	f7ff ff2a 	bl	80035ac <sequence_step_enabled>
 8003758:	0003      	movs	r3, r0
 800375a:	7023      	strb	r3, [r4, #0]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	////LOG_FUNCTION_END(Status);
	return Status;
 800375c:	230f      	movs	r3, #15
 800375e:	18fb      	adds	r3, r7, r3
 8003760:	781b      	ldrb	r3, [r3, #0]
 8003762:	b25b      	sxtb	r3, r3
}
 8003764:	0018      	movs	r0, r3
 8003766:	46bd      	mov	sp, r7
 8003768:	b005      	add	sp, #20
 800376a:	bd90      	pop	{r4, r7, pc}

0800376c <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 800376c:	b590      	push	{r4, r7, lr}
 800376e:	b085      	sub	sp, #20
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003776:	230f      	movs	r3, #15
 8003778:	18fb      	adds	r3, r7, r3
 800377a:	2200      	movs	r2, #0
 800377c:	701a      	strb	r2, [r3, #0]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	////LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 800377e:	230f      	movs	r3, #15
 8003780:	18fc      	adds	r4, r7, r3
 8003782:	230c      	movs	r3, #12
 8003784:	18fa      	adds	r2, r7, r3
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	21f8      	movs	r1, #248	; 0xf8
 800378a:	0018      	movs	r0, r3
 800378c:	f000 ff20 	bl	80045d0 <VL53L0X_RdWord>
 8003790:	0003      	movs	r3, r0
 8003792:	7023      	strb	r3, [r4, #0]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 8003794:	230f      	movs	r3, #15
 8003796:	18fb      	adds	r3, r7, r3
 8003798:	781b      	ldrb	r3, [r3, #0]
 800379a:	b25b      	sxtb	r3, r3
 800379c:	2b00      	cmp	r3, #0
 800379e:	d10a      	bne.n	80037b6 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x4a>
		Status = VL53L0X_RdDWord(Dev,
 80037a0:	230f      	movs	r3, #15
 80037a2:	18fc      	adds	r4, r7, r3
 80037a4:	2308      	movs	r3, #8
 80037a6:	18fa      	adds	r2, r7, r3
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2104      	movs	r1, #4
 80037ac:	0018      	movs	r0, r3
 80037ae:	f000 ff4e 	bl	800464e <VL53L0X_RdDWord>
 80037b2:	0003      	movs	r3, r0
 80037b4:	7023      	strb	r3, [r4, #0]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80037b6:	230f      	movs	r3, #15
 80037b8:	18fb      	adds	r3, r7, r3
 80037ba:	781b      	ldrb	r3, [r3, #0]
 80037bc:	b25b      	sxtb	r3, r3
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d114      	bne.n	80037ec <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x80>
		if (osc_calibrate_val != 0) {
 80037c2:	230c      	movs	r3, #12
 80037c4:	18fb      	adds	r3, r7, r3
 80037c6:	881b      	ldrh	r3, [r3, #0]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d00b      	beq.n	80037e4 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x78>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 80037cc:	68ba      	ldr	r2, [r7, #8]
 80037ce:	230c      	movs	r3, #12
 80037d0:	18fb      	adds	r3, r7, r3
 80037d2:	881b      	ldrh	r3, [r3, #0]
 80037d4:	0019      	movs	r1, r3
 80037d6:	0010      	movs	r0, r2
 80037d8:	f7fc fc96 	bl	8000108 <__udivsi3>
 80037dc:	0003      	movs	r3, r0
 80037de:	001a      	movs	r2, r3
			*pInterMeasurementPeriodMilliSeconds =
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	////LOG_FUNCTION_END(Status);
	return Status;
 80037ec:	230f      	movs	r3, #15
 80037ee:	18fb      	adds	r3, r7, r3
 80037f0:	781b      	ldrb	r3, [r3, #0]
 80037f2:	b25b      	sxtb	r3, r3
}
 80037f4:	0018      	movs	r0, r3
 80037f6:	46bd      	mov	sp, r7
 80037f8:	b005      	add	sp, #20
 80037fa:	bd90      	pop	{r4, r7, pc}

080037fc <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 80037fc:	b590      	push	{r4, r7, lr}
 80037fe:	b087      	sub	sp, #28
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003806:	2317      	movs	r3, #23
 8003808:	18fb      	adds	r3, r7, r3
 800380a:	2200      	movs	r2, #0
 800380c:	701a      	strb	r2, [r3, #0]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	////LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 800380e:	2317      	movs	r3, #23
 8003810:	18fc      	adds	r4, r7, r3
 8003812:	230e      	movs	r3, #14
 8003814:	18fa      	adds	r2, r7, r3
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2120      	movs	r1, #32
 800381a:	0018      	movs	r0, r3
 800381c:	f000 fed8 	bl	80045d0 <VL53L0X_RdWord>
 8003820:	0003      	movs	r3, r0
 8003822:	7023      	strb	r3, [r4, #0]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 8003824:	2317      	movs	r3, #23
 8003826:	18fb      	adds	r3, r7, r3
 8003828:	781b      	ldrb	r3, [r3, #0]
 800382a:	b25b      	sxtb	r3, r3
 800382c:	2b00      	cmp	r3, #0
 800382e:	d11c      	bne.n	800386a <VL53L0X_GetXTalkCompensationRateMegaCps+0x6e>
		if (Value == 0) {
 8003830:	230e      	movs	r3, #14
 8003832:	18fb      	adds	r3, r7, r3
 8003834:	881b      	ldrh	r3, [r3, #0]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d109      	bne.n	800384e <VL53L0X_GetXTalkCompensationRateMegaCps+0x52>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6a1b      	ldr	r3, [r3, #32]
 800383e:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	693a      	ldr	r2, [r7, #16]
 8003844:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2200      	movs	r2, #0
 800384a:	771a      	strb	r2, [r3, #28]
 800384c:	e00d      	b.n	800386a <VL53L0X_GetXTalkCompensationRateMegaCps+0x6e>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 800384e:	230e      	movs	r3, #14
 8003850:	18fb      	adds	r3, r7, r3
 8003852:	881b      	ldrh	r3, [r3, #0]
 8003854:	00db      	lsls	r3, r3, #3
 8003856:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	693a      	ldr	r2, [r7, #16]
 800385c:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	693a      	ldr	r2, [r7, #16]
 8003862:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2201      	movs	r2, #1
 8003868:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	////LOG_FUNCTION_END(Status);
	return Status;
 800386a:	2317      	movs	r3, #23
 800386c:	18fb      	adds	r3, r7, r3
 800386e:	781b      	ldrb	r3, [r3, #0]
 8003870:	b25b      	sxtb	r3, r3
}
 8003872:	0018      	movs	r0, r3
 8003874:	46bd      	mov	sp, r7
 8003876:	b007      	add	sp, #28
 8003878:	bd90      	pop	{r4, r7, pc}
	...

0800387c <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 800387c:	b590      	push	{r4, r7, lr}
 800387e:	b087      	sub	sp, #28
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	0008      	movs	r0, r1
 8003886:	0011      	movs	r1, r2
 8003888:	1cbb      	adds	r3, r7, #2
 800388a:	1c02      	adds	r2, r0, #0
 800388c:	801a      	strh	r2, [r3, #0]
 800388e:	1c7b      	adds	r3, r7, #1
 8003890:	1c0a      	adds	r2, r1, #0
 8003892:	701a      	strb	r2, [r3, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003894:	2317      	movs	r3, #23
 8003896:	18fb      	adds	r3, r7, r3
 8003898:	2200      	movs	r2, #0
 800389a:	701a      	strb	r2, [r3, #0]
	FixPoint1616_t TempFix1616 = 0;
 800389c:	2300      	movs	r3, #0
 800389e:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 80038a0:	230f      	movs	r3, #15
 80038a2:	18fb      	adds	r3, r7, r3
 80038a4:	2200      	movs	r2, #0
 80038a6:	701a      	strb	r2, [r3, #0]
	uint8_t LimitCheckDisable = 0;
 80038a8:	230e      	movs	r3, #14
 80038aa:	18fb      	adds	r3, r7, r3
 80038ac:	2200      	movs	r2, #0
 80038ae:	701a      	strb	r2, [r3, #0]
	uint8_t Temp8;

	////LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 80038b0:	1cbb      	adds	r3, r7, #2
 80038b2:	881b      	ldrh	r3, [r3, #0]
 80038b4:	2b05      	cmp	r3, #5
 80038b6:	d904      	bls.n	80038c2 <VL53L0X_SetLimitCheckEnable+0x46>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80038b8:	2317      	movs	r3, #23
 80038ba:	18fb      	adds	r3, r7, r3
 80038bc:	22fc      	movs	r2, #252	; 0xfc
 80038be:	701a      	strb	r2, [r3, #0]
 80038c0:	e076      	b.n	80039b0 <VL53L0X_SetLimitCheckEnable+0x134>
	} else {
		if (LimitCheckEnable == 0) {
 80038c2:	1c7b      	adds	r3, r7, #1
 80038c4:	781b      	ldrb	r3, [r3, #0]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d10a      	bne.n	80038e0 <VL53L0X_SetLimitCheckEnable+0x64>
			TempFix1616 = 0;
 80038ca:	2300      	movs	r3, #0
 80038cc:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 80038ce:	230f      	movs	r3, #15
 80038d0:	18fb      	adds	r3, r7, r3
 80038d2:	2200      	movs	r2, #0
 80038d4:	701a      	strb	r2, [r3, #0]
			LimitCheckDisable = 1;
 80038d6:	230e      	movs	r3, #14
 80038d8:	18fb      	adds	r3, r7, r3
 80038da:	2201      	movs	r2, #1
 80038dc:	701a      	strb	r2, [r3, #0]
 80038de:	e010      	b.n	8003902 <VL53L0X_SetLimitCheckEnable+0x86>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80038e0:	1cbb      	adds	r3, r7, #2
 80038e2:	881b      	ldrh	r3, [r3, #0]
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	330c      	adds	r3, #12
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	18d3      	adds	r3, r2, r3
 80038ec:	3304      	adds	r3, #4
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 80038f2:	230e      	movs	r3, #14
 80038f4:	18fb      	adds	r3, r7, r3
 80038f6:	2200      	movs	r2, #0
 80038f8:	701a      	strb	r2, [r3, #0]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 80038fa:	230f      	movs	r3, #15
 80038fc:	18fb      	adds	r3, r7, r3
 80038fe:	2201      	movs	r2, #1
 8003900:	701a      	strb	r2, [r3, #0]
		}

		switch (LimitCheckId) {
 8003902:	1cbb      	adds	r3, r7, #2
 8003904:	881b      	ldrh	r3, [r3, #0]
 8003906:	2b05      	cmp	r3, #5
 8003908:	d84e      	bhi.n	80039a8 <VL53L0X_SetLimitCheckEnable+0x12c>
 800390a:	009a      	lsls	r2, r3, #2
 800390c:	4b3a      	ldr	r3, [pc, #232]	; (80039f8 <VL53L0X_SetLimitCheckEnable+0x17c>)
 800390e:	18d3      	adds	r3, r2, r3
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	469f      	mov	pc, r3

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	220f      	movs	r2, #15
 8003918:	18ba      	adds	r2, r7, r2
 800391a:	2128      	movs	r1, #40	; 0x28
 800391c:	7812      	ldrb	r2, [r2, #0]
 800391e:	545a      	strb	r2, [r3, r1]
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 8003920:	e046      	b.n	80039b0 <VL53L0X_SetLimitCheckEnable+0x134>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8003926:	b29a      	uxth	r2, r3
 8003928:	2317      	movs	r3, #23
 800392a:	18fc      	adds	r4, r7, r3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2144      	movs	r1, #68	; 0x44
 8003930:	0018      	movs	r0, r3
 8003932:	f000 fdba 	bl	80044aa <VL53L0X_WrWord>
 8003936:	0003      	movs	r3, r0
 8003938:	7023      	strb	r3, [r4, #0]

			break;
 800393a:	e039      	b.n	80039b0 <VL53L0X_SetLimitCheckEnable+0x134>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	220f      	movs	r2, #15
 8003940:	18ba      	adds	r2, r7, r2
 8003942:	212a      	movs	r1, #42	; 0x2a
 8003944:	7812      	ldrb	r2, [r2, #0]
 8003946:	545a      	strb	r2, [r3, r1]
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 8003948:	e032      	b.n	80039b0 <VL53L0X_SetLimitCheckEnable+0x134>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	220f      	movs	r2, #15
 800394e:	18ba      	adds	r2, r7, r2
 8003950:	212b      	movs	r1, #43	; 0x2b
 8003952:	7812      	ldrb	r2, [r2, #0]
 8003954:	545a      	strb	r2, [r3, r1]
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 8003956:	e02b      	b.n	80039b0 <VL53L0X_SetLimitCheckEnable+0x134>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 8003958:	230d      	movs	r3, #13
 800395a:	18fa      	adds	r2, r7, r3
 800395c:	230e      	movs	r3, #14
 800395e:	18fb      	adds	r3, r7, r3
 8003960:	781b      	ldrb	r3, [r3, #0]
 8003962:	18db      	adds	r3, r3, r3
 8003964:	7013      	strb	r3, [r2, #0]
			Status = VL53L0X_UpdateByte(Dev,
 8003966:	2317      	movs	r3, #23
 8003968:	18fc      	adds	r4, r7, r3
 800396a:	230d      	movs	r3, #13
 800396c:	18fb      	adds	r3, r7, r3
 800396e:	781b      	ldrb	r3, [r3, #0]
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	22fe      	movs	r2, #254	; 0xfe
 8003974:	2160      	movs	r1, #96	; 0x60
 8003976:	f000 fdc3 	bl	8004500 <VL53L0X_UpdateByte>
 800397a:	0003      	movs	r3, r0
 800397c:	7023      	strb	r3, [r4, #0]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 800397e:	e017      	b.n	80039b0 <VL53L0X_SetLimitCheckEnable+0x134>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 8003980:	230d      	movs	r3, #13
 8003982:	18fb      	adds	r3, r7, r3
 8003984:	220e      	movs	r2, #14
 8003986:	18ba      	adds	r2, r7, r2
 8003988:	7812      	ldrb	r2, [r2, #0]
 800398a:	0112      	lsls	r2, r2, #4
 800398c:	701a      	strb	r2, [r3, #0]
			Status = VL53L0X_UpdateByte(Dev,
 800398e:	2317      	movs	r3, #23
 8003990:	18fc      	adds	r4, r7, r3
 8003992:	230d      	movs	r3, #13
 8003994:	18fb      	adds	r3, r7, r3
 8003996:	781b      	ldrb	r3, [r3, #0]
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	22ef      	movs	r2, #239	; 0xef
 800399c:	2160      	movs	r1, #96	; 0x60
 800399e:	f000 fdaf 	bl	8004500 <VL53L0X_UpdateByte>
 80039a2:	0003      	movs	r3, r0
 80039a4:	7023      	strb	r3, [r4, #0]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 80039a6:	e003      	b.n	80039b0 <VL53L0X_SetLimitCheckEnable+0x134>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80039a8:	2317      	movs	r3, #23
 80039aa:	18fb      	adds	r3, r7, r3
 80039ac:	22fc      	movs	r2, #252	; 0xfc
 80039ae:	701a      	strb	r2, [r3, #0]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 80039b0:	2317      	movs	r3, #23
 80039b2:	18fb      	adds	r3, r7, r3
 80039b4:	781b      	ldrb	r3, [r3, #0]
 80039b6:	b25b      	sxtb	r3, r3
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d114      	bne.n	80039e6 <VL53L0X_SetLimitCheckEnable+0x16a>
		if (LimitCheckEnable == 0) {
 80039bc:	1c7b      	adds	r3, r7, #1
 80039be:	781b      	ldrb	r3, [r3, #0]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d108      	bne.n	80039d6 <VL53L0X_SetLimitCheckEnable+0x15a>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80039c4:	1cbb      	adds	r3, r7, #2
 80039c6:	881b      	ldrh	r3, [r3, #0]
 80039c8:	687a      	ldr	r2, [r7, #4]
 80039ca:	2128      	movs	r1, #40	; 0x28
 80039cc:	18d3      	adds	r3, r2, r3
 80039ce:	185b      	adds	r3, r3, r1
 80039d0:	2200      	movs	r2, #0
 80039d2:	701a      	strb	r2, [r3, #0]
 80039d4:	e007      	b.n	80039e6 <VL53L0X_SetLimitCheckEnable+0x16a>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80039d6:	1cbb      	adds	r3, r7, #2
 80039d8:	881b      	ldrh	r3, [r3, #0]
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	2128      	movs	r1, #40	; 0x28
 80039de:	18d3      	adds	r3, r2, r3
 80039e0:	185b      	adds	r3, r3, r1
 80039e2:	2201      	movs	r2, #1
 80039e4:	701a      	strb	r2, [r3, #0]
				LimitCheckId, 1);
		}
	}

	////LOG_FUNCTION_END(Status);
	return Status;
 80039e6:	2317      	movs	r3, #23
 80039e8:	18fb      	adds	r3, r7, r3
 80039ea:	781b      	ldrb	r3, [r3, #0]
 80039ec:	b25b      	sxtb	r3, r3
}
 80039ee:	0018      	movs	r0, r3
 80039f0:	46bd      	mov	sp, r7
 80039f2:	b007      	add	sp, #28
 80039f4:	bd90      	pop	{r4, r7, pc}
 80039f6:	46c0      	nop			; (mov r8, r8)
 80039f8:	08004ac4 	.word	0x08004ac4

080039fc <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b086      	sub	sp, #24
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	60f8      	str	r0, [r7, #12]
 8003a04:	607a      	str	r2, [r7, #4]
 8003a06:	230a      	movs	r3, #10
 8003a08:	18fb      	adds	r3, r7, r3
 8003a0a:	1c0a      	adds	r2, r1, #0
 8003a0c:	801a      	strh	r2, [r3, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003a0e:	2317      	movs	r3, #23
 8003a10:	18fb      	adds	r3, r7, r3
 8003a12:	2200      	movs	r2, #0
 8003a14:	701a      	strb	r2, [r3, #0]
	uint8_t Temp8;

	////LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8003a16:	230a      	movs	r3, #10
 8003a18:	18fb      	adds	r3, r7, r3
 8003a1a:	881b      	ldrh	r3, [r3, #0]
 8003a1c:	2b05      	cmp	r3, #5
 8003a1e:	d907      	bls.n	8003a30 <VL53L0X_GetLimitCheckEnable+0x34>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8003a20:	2317      	movs	r3, #23
 8003a22:	18fb      	adds	r3, r7, r3
 8003a24:	22fc      	movs	r2, #252	; 0xfc
 8003a26:	701a      	strb	r2, [r3, #0]
		*pLimitCheckEnable = 0;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	701a      	strb	r2, [r3, #0]
 8003a2e:	e00f      	b.n	8003a50 <VL53L0X_GetLimitCheckEnable+0x54>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8003a30:	230a      	movs	r3, #10
 8003a32:	18fb      	adds	r3, r7, r3
 8003a34:	881a      	ldrh	r2, [r3, #0]
 8003a36:	2316      	movs	r3, #22
 8003a38:	18fb      	adds	r3, r7, r3
 8003a3a:	68f9      	ldr	r1, [r7, #12]
 8003a3c:	2028      	movs	r0, #40	; 0x28
 8003a3e:	188a      	adds	r2, r1, r2
 8003a40:	1812      	adds	r2, r2, r0
 8003a42:	7812      	ldrb	r2, [r2, #0]
 8003a44:	701a      	strb	r2, [r3, #0]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2216      	movs	r2, #22
 8003a4a:	18ba      	adds	r2, r7, r2
 8003a4c:	7812      	ldrb	r2, [r2, #0]
 8003a4e:	701a      	strb	r2, [r3, #0]
	}

	////LOG_FUNCTION_END(Status);
	return Status;
 8003a50:	2317      	movs	r3, #23
 8003a52:	18fb      	adds	r3, r7, r3
 8003a54:	781b      	ldrb	r3, [r3, #0]
 8003a56:	b25b      	sxtb	r3, r3
}
 8003a58:	0018      	movs	r0, r3
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	b006      	add	sp, #24
 8003a5e:	bd80      	pop	{r7, pc}

08003a60 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 8003a60:	b590      	push	{r4, r7, lr}
 8003a62:	b087      	sub	sp, #28
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	60f8      	str	r0, [r7, #12]
 8003a68:	607a      	str	r2, [r7, #4]
 8003a6a:	230a      	movs	r3, #10
 8003a6c:	18fb      	adds	r3, r7, r3
 8003a6e:	1c0a      	adds	r2, r1, #0
 8003a70:	801a      	strh	r2, [r3, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003a72:	2317      	movs	r3, #23
 8003a74:	18fb      	adds	r3, r7, r3
 8003a76:	2200      	movs	r2, #0
 8003a78:	701a      	strb	r2, [r3, #0]
	uint8_t Temp8;

	////LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 8003a7a:	230a      	movs	r3, #10
 8003a7c:	18fb      	adds	r3, r7, r3
 8003a7e:	881a      	ldrh	r2, [r3, #0]
 8003a80:	2316      	movs	r3, #22
 8003a82:	18fb      	adds	r3, r7, r3
 8003a84:	68f9      	ldr	r1, [r7, #12]
 8003a86:	2028      	movs	r0, #40	; 0x28
 8003a88:	188a      	adds	r2, r1, r2
 8003a8a:	1812      	adds	r2, r2, r0
 8003a8c:	7812      	ldrb	r2, [r2, #0]
 8003a8e:	701a      	strb	r2, [r3, #0]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 8003a90:	2316      	movs	r3, #22
 8003a92:	18fb      	adds	r3, r7, r3
 8003a94:	781b      	ldrb	r3, [r3, #0]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d10a      	bne.n	8003ab0 <VL53L0X_SetLimitCheckValue+0x50>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8003a9a:	230a      	movs	r3, #10
 8003a9c:	18fb      	adds	r3, r7, r3
 8003a9e:	881b      	ldrh	r3, [r3, #0]
 8003aa0:	68fa      	ldr	r2, [r7, #12]
 8003aa2:	330c      	adds	r3, #12
 8003aa4:	009b      	lsls	r3, r3, #2
 8003aa6:	18d3      	adds	r3, r2, r3
 8003aa8:	3304      	adds	r3, #4
 8003aaa:	687a      	ldr	r2, [r7, #4]
 8003aac:	601a      	str	r2, [r3, #0]
 8003aae:	e043      	b.n	8003b38 <VL53L0X_SetLimitCheckValue+0xd8>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 8003ab0:	230a      	movs	r3, #10
 8003ab2:	18fb      	adds	r3, r7, r3
 8003ab4:	881b      	ldrh	r3, [r3, #0]
 8003ab6:	2b05      	cmp	r3, #5
 8003ab8:	d82a      	bhi.n	8003b10 <VL53L0X_SetLimitCheckValue+0xb0>
 8003aba:	009a      	lsls	r2, r3, #2
 8003abc:	4b22      	ldr	r3, [pc, #136]	; (8003b48 <VL53L0X_SetLimitCheckValue+0xe8>)
 8003abe:	18d3      	adds	r3, r2, r3
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	469f      	mov	pc, r3

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 8003aca:	e025      	b.n	8003b18 <VL53L0X_SetLimitCheckValue+0xb8>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8003ad0:	b29a      	uxth	r2, r3
 8003ad2:	2317      	movs	r3, #23
 8003ad4:	18fc      	adds	r4, r7, r3
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2144      	movs	r1, #68	; 0x44
 8003ada:	0018      	movs	r0, r3
 8003adc:	f000 fce5 	bl	80044aa <VL53L0X_WrWord>
 8003ae0:	0003      	movs	r3, r0
 8003ae2:	7023      	strb	r3, [r4, #0]
					LimitCheckValue));

			break;
 8003ae4:	e018      	b.n	8003b18 <VL53L0X_SetLimitCheckValue+0xb8>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 8003aec:	e014      	b.n	8003b18 <VL53L0X_SetLimitCheckValue+0xb8>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 8003af4:	e010      	b.n	8003b18 <VL53L0X_SetLimitCheckValue+0xb8>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8003afa:	b29a      	uxth	r2, r3
 8003afc:	2317      	movs	r3, #23
 8003afe:	18fc      	adds	r4, r7, r3
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2164      	movs	r1, #100	; 0x64
 8003b04:	0018      	movs	r0, r3
 8003b06:	f000 fcd0 	bl	80044aa <VL53L0X_WrWord>
 8003b0a:	0003      	movs	r3, r0
 8003b0c:	7023      	strb	r3, [r4, #0]
					LimitCheckValue));

			break;
 8003b0e:	e003      	b.n	8003b18 <VL53L0X_SetLimitCheckValue+0xb8>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8003b10:	2317      	movs	r3, #23
 8003b12:	18fb      	adds	r3, r7, r3
 8003b14:	22fc      	movs	r2, #252	; 0xfc
 8003b16:	701a      	strb	r2, [r3, #0]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 8003b18:	2317      	movs	r3, #23
 8003b1a:	18fb      	adds	r3, r7, r3
 8003b1c:	781b      	ldrb	r3, [r3, #0]
 8003b1e:	b25b      	sxtb	r3, r3
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d109      	bne.n	8003b38 <VL53L0X_SetLimitCheckValue+0xd8>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8003b24:	230a      	movs	r3, #10
 8003b26:	18fb      	adds	r3, r7, r3
 8003b28:	881b      	ldrh	r3, [r3, #0]
 8003b2a:	68fa      	ldr	r2, [r7, #12]
 8003b2c:	330c      	adds	r3, #12
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	18d3      	adds	r3, r2, r3
 8003b32:	3304      	adds	r3, #4
 8003b34:	687a      	ldr	r2, [r7, #4]
 8003b36:	601a      	str	r2, [r3, #0]
				LimitCheckId, LimitCheckValue);
		}
	}

	////LOG_FUNCTION_END(Status);
	return Status;
 8003b38:	2317      	movs	r3, #23
 8003b3a:	18fb      	adds	r3, r7, r3
 8003b3c:	781b      	ldrb	r3, [r3, #0]
 8003b3e:	b25b      	sxtb	r3, r3
}
 8003b40:	0018      	movs	r0, r3
 8003b42:	46bd      	mov	sp, r7
 8003b44:	b007      	add	sp, #28
 8003b46:	bd90      	pop	{r4, r7, pc}
 8003b48:	08004adc 	.word	0x08004adc

08003b4c <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8003b4c:	b590      	push	{r4, r7, lr}
 8003b4e:	b089      	sub	sp, #36	; 0x24
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	60f8      	str	r0, [r7, #12]
 8003b54:	607a      	str	r2, [r7, #4]
 8003b56:	230a      	movs	r3, #10
 8003b58:	18fb      	adds	r3, r7, r3
 8003b5a:	1c0a      	adds	r2, r1, #0
 8003b5c:	801a      	strh	r2, [r3, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003b5e:	231f      	movs	r3, #31
 8003b60:	18fb      	adds	r3, r7, r3
 8003b62:	2200      	movs	r2, #0
 8003b64:	701a      	strb	r2, [r3, #0]
	uint8_t EnableZeroValue = 0;
 8003b66:	231e      	movs	r3, #30
 8003b68:	18fb      	adds	r3, r7, r3
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	701a      	strb	r2, [r3, #0]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	////LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8003b6e:	230a      	movs	r3, #10
 8003b70:	18fb      	adds	r3, r7, r3
 8003b72:	881b      	ldrh	r3, [r3, #0]
 8003b74:	2b05      	cmp	r3, #5
 8003b76:	d852      	bhi.n	8003c1e <VL53L0X_GetLimitCheckValue+0xd2>
 8003b78:	009a      	lsls	r2, r3, #2
 8003b7a:	4b4e      	ldr	r3, [pc, #312]	; (8003cb4 <VL53L0X_GetLimitCheckValue+0x168>)
 8003b7c:	18d3      	adds	r3, r2, r3
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	469f      	mov	pc, r3

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b86:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 8003b88:	231e      	movs	r3, #30
 8003b8a:	18fb      	adds	r3, r7, r3
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	701a      	strb	r2, [r3, #0]
		break;
 8003b90:	e049      	b.n	8003c26 <VL53L0X_GetLimitCheckValue+0xda>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8003b92:	231f      	movs	r3, #31
 8003b94:	18fc      	adds	r4, r7, r3
 8003b96:	2316      	movs	r3, #22
 8003b98:	18fa      	adds	r2, r7, r3
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2144      	movs	r1, #68	; 0x44
 8003b9e:	0018      	movs	r0, r3
 8003ba0:	f000 fd16 	bl	80045d0 <VL53L0X_RdWord>
 8003ba4:	0003      	movs	r3, r0
 8003ba6:	7023      	strb	r3, [r4, #0]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8003ba8:	231f      	movs	r3, #31
 8003baa:	18fb      	adds	r3, r7, r3
 8003bac:	781b      	ldrb	r3, [r3, #0]
 8003bae:	b25b      	sxtb	r3, r3
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d104      	bne.n	8003bbe <VL53L0X_GetLimitCheckValue+0x72>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8003bb4:	2316      	movs	r3, #22
 8003bb6:	18fb      	adds	r3, r7, r3
 8003bb8:	881b      	ldrh	r3, [r3, #0]
 8003bba:	025b      	lsls	r3, r3, #9
 8003bbc:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 8003bbe:	231e      	movs	r3, #30
 8003bc0:	18fb      	adds	r3, r7, r3
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	701a      	strb	r2, [r3, #0]
		break;
 8003bc6:	e02e      	b.n	8003c26 <VL53L0X_GetLimitCheckValue+0xda>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bcc:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 8003bce:	231e      	movs	r3, #30
 8003bd0:	18fb      	adds	r3, r7, r3
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	701a      	strb	r2, [r3, #0]
		break;
 8003bd6:	e026      	b.n	8003c26 <VL53L0X_GetLimitCheckValue+0xda>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bdc:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 8003bde:	231e      	movs	r3, #30
 8003be0:	18fb      	adds	r3, r7, r3
 8003be2:	2200      	movs	r2, #0
 8003be4:	701a      	strb	r2, [r3, #0]
		break;
 8003be6:	e01e      	b.n	8003c26 <VL53L0X_GetLimitCheckValue+0xda>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8003be8:	231f      	movs	r3, #31
 8003bea:	18fc      	adds	r4, r7, r3
 8003bec:	2316      	movs	r3, #22
 8003bee:	18fa      	adds	r2, r7, r3
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2164      	movs	r1, #100	; 0x64
 8003bf4:	0018      	movs	r0, r3
 8003bf6:	f000 fceb 	bl	80045d0 <VL53L0X_RdWord>
 8003bfa:	0003      	movs	r3, r0
 8003bfc:	7023      	strb	r3, [r4, #0]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8003bfe:	231f      	movs	r3, #31
 8003c00:	18fb      	adds	r3, r7, r3
 8003c02:	781b      	ldrb	r3, [r3, #0]
 8003c04:	b25b      	sxtb	r3, r3
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d104      	bne.n	8003c14 <VL53L0X_GetLimitCheckValue+0xc8>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8003c0a:	2316      	movs	r3, #22
 8003c0c:	18fb      	adds	r3, r7, r3
 8003c0e:	881b      	ldrh	r3, [r3, #0]
 8003c10:	025b      	lsls	r3, r3, #9
 8003c12:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 8003c14:	231e      	movs	r3, #30
 8003c16:	18fb      	adds	r3, r7, r3
 8003c18:	2200      	movs	r2, #0
 8003c1a:	701a      	strb	r2, [r3, #0]
		break;
 8003c1c:	e003      	b.n	8003c26 <VL53L0X_GetLimitCheckValue+0xda>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8003c1e:	231f      	movs	r3, #31
 8003c20:	18fb      	adds	r3, r7, r3
 8003c22:	22fc      	movs	r2, #252	; 0xfc
 8003c24:	701a      	strb	r2, [r3, #0]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003c26:	231f      	movs	r3, #31
 8003c28:	18fb      	adds	r3, r7, r3
 8003c2a:	781b      	ldrb	r3, [r3, #0]
 8003c2c:	b25b      	sxtb	r3, r3
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d138      	bne.n	8003ca4 <VL53L0X_GetLimitCheckValue+0x158>

		if (EnableZeroValue == 1) {
 8003c32:	231e      	movs	r3, #30
 8003c34:	18fb      	adds	r3, r7, r3
 8003c36:	781b      	ldrb	r3, [r3, #0]
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d130      	bne.n	8003c9e <VL53L0X_GetLimitCheckValue+0x152>

			if (TempFix1616 == 0) {
 8003c3c:	69bb      	ldr	r3, [r7, #24]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d116      	bne.n	8003c70 <VL53L0X_GetLimitCheckValue+0x124>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 8003c42:	230a      	movs	r3, #10
 8003c44:	18fb      	adds	r3, r7, r3
 8003c46:	881b      	ldrh	r3, [r3, #0]
 8003c48:	68fa      	ldr	r2, [r7, #12]
 8003c4a:	330c      	adds	r3, #12
 8003c4c:	009b      	lsls	r3, r3, #2
 8003c4e:	18d3      	adds	r3, r2, r3
 8003c50:	3304      	adds	r3, #4
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	69ba      	ldr	r2, [r7, #24]
 8003c5a:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8003c5c:	230a      	movs	r3, #10
 8003c5e:	18fb      	adds	r3, r7, r3
 8003c60:	881b      	ldrh	r3, [r3, #0]
 8003c62:	68fa      	ldr	r2, [r7, #12]
 8003c64:	2128      	movs	r1, #40	; 0x28
 8003c66:	18d3      	adds	r3, r2, r3
 8003c68:	185b      	adds	r3, r3, r1
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	701a      	strb	r2, [r3, #0]
 8003c6e:	e019      	b.n	8003ca4 <VL53L0X_GetLimitCheckValue+0x158>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	69ba      	ldr	r2, [r7, #24]
 8003c74:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8003c76:	230a      	movs	r3, #10
 8003c78:	18fb      	adds	r3, r7, r3
 8003c7a:	881b      	ldrh	r3, [r3, #0]
 8003c7c:	68fa      	ldr	r2, [r7, #12]
 8003c7e:	330c      	adds	r3, #12
 8003c80:	009b      	lsls	r3, r3, #2
 8003c82:	18d3      	adds	r3, r2, r3
 8003c84:	3304      	adds	r3, #4
 8003c86:	69ba      	ldr	r2, [r7, #24]
 8003c88:	601a      	str	r2, [r3, #0]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8003c8a:	230a      	movs	r3, #10
 8003c8c:	18fb      	adds	r3, r7, r3
 8003c8e:	881b      	ldrh	r3, [r3, #0]
 8003c90:	68fa      	ldr	r2, [r7, #12]
 8003c92:	2128      	movs	r1, #40	; 0x28
 8003c94:	18d3      	adds	r3, r2, r3
 8003c96:	185b      	adds	r3, r3, r1
 8003c98:	2201      	movs	r2, #1
 8003c9a:	701a      	strb	r2, [r3, #0]
 8003c9c:	e002      	b.n	8003ca4 <VL53L0X_GetLimitCheckValue+0x158>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	69ba      	ldr	r2, [r7, #24]
 8003ca2:	601a      	str	r2, [r3, #0]
		}
	}

	////LOG_FUNCTION_END(Status);
	return Status;
 8003ca4:	231f      	movs	r3, #31
 8003ca6:	18fb      	adds	r3, r7, r3
 8003ca8:	781b      	ldrb	r3, [r3, #0]
 8003caa:	b25b      	sxtb	r3, r3

}
 8003cac:	0018      	movs	r0, r3
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	b009      	add	sp, #36	; 0x24
 8003cb2:	bd90      	pop	{r4, r7, pc}
 8003cb4:	08004af4 	.word	0x08004af4

08003cb8 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 8003cb8:	b590      	push	{r4, r7, lr}
 8003cba:	b085      	sub	sp, #20
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003cc2:	230f      	movs	r3, #15
 8003cc4:	18fb      	adds	r3, r7, r3
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	701a      	strb	r2, [r3, #0]
	uint8_t data;

	////LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 8003cca:	230f      	movs	r3, #15
 8003ccc:	18fc      	adds	r4, r7, r3
 8003cce:	230e      	movs	r3, #14
 8003cd0:	18fa      	adds	r2, r7, r3
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2101      	movs	r1, #1
 8003cd6:	0018      	movs	r0, r3
 8003cd8:	f000 fc54 	bl	8004584 <VL53L0X_RdByte>
 8003cdc:	0003      	movs	r3, r0
 8003cde:	7023      	strb	r3, [r4, #0]
	if (Status == VL53L0X_ERROR_NONE) {
 8003ce0:	230f      	movs	r3, #15
 8003ce2:	18fb      	adds	r3, r7, r3
 8003ce4:	781b      	ldrb	r3, [r3, #0]
 8003ce6:	b25b      	sxtb	r3, r3
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d113      	bne.n	8003d14 <VL53L0X_GetWrapAroundCheckEnable+0x5c>
		PALDevDataSet(Dev, SequenceConfig, data);
 8003cec:	230e      	movs	r3, #14
 8003cee:	18fb      	adds	r3, r7, r3
 8003cf0:	7819      	ldrb	r1, [r3, #0]
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	2398      	movs	r3, #152	; 0x98
 8003cf6:	005b      	lsls	r3, r3, #1
 8003cf8:	54d1      	strb	r1, [r2, r3]
		if (data & (0x01 << 7))
 8003cfa:	230e      	movs	r3, #14
 8003cfc:	18fb      	adds	r3, r7, r3
 8003cfe:	781b      	ldrb	r3, [r3, #0]
 8003d00:	b25b      	sxtb	r3, r3
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	da03      	bge.n	8003d0e <VL53L0X_GetWrapAroundCheckEnable+0x56>
			*pWrapAroundCheckEnable = 0x01;
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	2201      	movs	r2, #1
 8003d0a:	701a      	strb	r2, [r3, #0]
 8003d0c:	e002      	b.n	8003d14 <VL53L0X_GetWrapAroundCheckEnable+0x5c>
		else
			*pWrapAroundCheckEnable = 0x00;
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	2200      	movs	r2, #0
 8003d12:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8003d14:	230f      	movs	r3, #15
 8003d16:	18fb      	adds	r3, r7, r3
 8003d18:	781b      	ldrb	r3, [r3, #0]
 8003d1a:	b25b      	sxtb	r3, r3
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d104      	bne.n	8003d2a <VL53L0X_GetWrapAroundCheckEnable+0x72>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	7819      	ldrb	r1, [r3, #0]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	224c      	movs	r2, #76	; 0x4c
 8003d28:	5499      	strb	r1, [r3, r2]
			*pWrapAroundCheckEnable);
	}

	////LOG_FUNCTION_END(Status);
	return Status;
 8003d2a:	230f      	movs	r3, #15
 8003d2c:	18fb      	adds	r3, r7, r3
 8003d2e:	781b      	ldrb	r3, [r3, #0]
 8003d30:	b25b      	sxtb	r3, r3
}
 8003d32:	0018      	movs	r0, r3
 8003d34:	46bd      	mov	sp, r7
 8003d36:	b005      	add	sp, #20
 8003d38:	bd90      	pop	{r4, r7, pc}
	...

08003d3c <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 8003d3c:	b590      	push	{r4, r7, lr}
 8003d3e:	b085      	sub	sp, #20
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003d46:	230f      	movs	r3, #15
 8003d48:	18fb      	adds	r3, r7, r3
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	701a      	strb	r2, [r3, #0]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 8003d4e:	230c      	movs	r3, #12
 8003d50:	18fb      	adds	r3, r7, r3
 8003d52:	4a25      	ldr	r2, [pc, #148]	; (8003de8 <VL53L0X_get_offset_calibration_data_micro_meter+0xac>)
 8003d54:	801a      	strh	r2, [r3, #0]
	int16_t cOffsetRange = 4096;
 8003d56:	230a      	movs	r3, #10
 8003d58:	18fb      	adds	r3, r7, r3
 8003d5a:	2280      	movs	r2, #128	; 0x80
 8003d5c:	0152      	lsls	r2, r2, #5
 8003d5e:	801a      	strh	r2, [r3, #0]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 8003d60:	230f      	movs	r3, #15
 8003d62:	18fc      	adds	r4, r7, r3
 8003d64:	2308      	movs	r3, #8
 8003d66:	18fa      	adds	r2, r7, r3
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2128      	movs	r1, #40	; 0x28
 8003d6c:	0018      	movs	r0, r3
 8003d6e:	f000 fc2f 	bl	80045d0 <VL53L0X_RdWord>
 8003d72:	0003      	movs	r3, r0
 8003d74:	7023      	strb	r3, [r4, #0]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 8003d76:	230f      	movs	r3, #15
 8003d78:	18fb      	adds	r3, r7, r3
 8003d7a:	781b      	ldrb	r3, [r3, #0]
 8003d7c:	b25b      	sxtb	r3, r3
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d12a      	bne.n	8003dd8 <VL53L0X_get_offset_calibration_data_micro_meter+0x9c>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 8003d82:	2308      	movs	r3, #8
 8003d84:	18fb      	adds	r3, r7, r3
 8003d86:	881b      	ldrh	r3, [r3, #0]
 8003d88:	051b      	lsls	r3, r3, #20
 8003d8a:	0d1b      	lsrs	r3, r3, #20
 8003d8c:	b29a      	uxth	r2, r3
 8003d8e:	2308      	movs	r3, #8
 8003d90:	18fb      	adds	r3, r7, r3
 8003d92:	801a      	strh	r2, [r3, #0]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 8003d94:	2308      	movs	r3, #8
 8003d96:	18fb      	adds	r3, r7, r3
 8003d98:	881b      	ldrh	r3, [r3, #0]
 8003d9a:	001a      	movs	r2, r3
 8003d9c:	230c      	movs	r3, #12
 8003d9e:	18fb      	adds	r3, r7, r3
 8003da0:	2100      	movs	r1, #0
 8003da2:	5e5b      	ldrsh	r3, [r3, r1]
 8003da4:	429a      	cmp	r2, r3
 8003da6:	dd0e      	ble.n	8003dc6 <VL53L0X_get_offset_calibration_data_micro_meter+0x8a>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 8003da8:	2308      	movs	r3, #8
 8003daa:	18fb      	adds	r3, r7, r3
 8003dac:	881a      	ldrh	r2, [r3, #0]
 8003dae:	230a      	movs	r3, #10
 8003db0:	18fb      	adds	r3, r7, r3
 8003db2:	881b      	ldrh	r3, [r3, #0]
 8003db4:	1ad3      	subs	r3, r2, r3
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	b21b      	sxth	r3, r3
 8003dba:	001a      	movs	r2, r3
					* 250;
 8003dbc:	23fa      	movs	r3, #250	; 0xfa
 8003dbe:	435a      	muls	r2, r3
			*pOffsetCalibrationDataMicroMeter =
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	601a      	str	r2, [r3, #0]
 8003dc4:	e008      	b.n	8003dd8 <VL53L0X_get_offset_calibration_data_micro_meter+0x9c>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 8003dc6:	2308      	movs	r3, #8
 8003dc8:	18fb      	adds	r3, r7, r3
 8003dca:	881b      	ldrh	r3, [r3, #0]
 8003dcc:	b21b      	sxth	r3, r3
 8003dce:	001a      	movs	r2, r3
 8003dd0:	23fa      	movs	r3, #250	; 0xfa
 8003dd2:	435a      	muls	r2, r3
			*pOffsetCalibrationDataMicroMeter =
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	601a      	str	r2, [r3, #0]

	}

	return Status;
 8003dd8:	230f      	movs	r3, #15
 8003dda:	18fb      	adds	r3, r7, r3
 8003ddc:	781b      	ldrb	r3, [r3, #0]
 8003dde:	b25b      	sxtb	r3, r3
}
 8003de0:	0018      	movs	r0, r3
 8003de2:	46bd      	mov	sp, r7
 8003de4:	b005      	add	sp, #20
 8003de6:	bd90      	pop	{r4, r7, pc}
 8003de8:	000007ff 	.word	0x000007ff

08003dec <VL53L0X_decode_vcsel_period>:
	return Status;
}


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b084      	sub	sp, #16
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	0002      	movs	r2, r0
 8003df4:	1dfb      	adds	r3, r7, #7
 8003df6:	701a      	strb	r2, [r3, #0]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 8003df8:	230f      	movs	r3, #15
 8003dfa:	18fb      	adds	r3, r7, r3
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	701a      	strb	r2, [r3, #0]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 8003e00:	1dfb      	adds	r3, r7, #7
 8003e02:	781b      	ldrb	r3, [r3, #0]
 8003e04:	3301      	adds	r3, #1
 8003e06:	b2db      	uxtb	r3, r3
 8003e08:	220f      	movs	r2, #15
 8003e0a:	18ba      	adds	r2, r7, r2
 8003e0c:	18db      	adds	r3, r3, r3
 8003e0e:	7013      	strb	r3, [r2, #0]

	return vcsel_period_pclks;
 8003e10:	230f      	movs	r3, #15
 8003e12:	18fb      	adds	r3, r7, r3
 8003e14:	781b      	ldrb	r3, [r3, #0]
}
 8003e16:	0018      	movs	r0, r3
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	b004      	add	sp, #16
 8003e1c:	bd80      	pop	{r7, pc}
	...

08003e20 <VL53L0X_calc_macro_period_ps>:
	return Status;
}


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 8003e20:	b590      	push	{r4, r7, lr}
 8003e22:	b087      	sub	sp, #28
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
 8003e28:	000a      	movs	r2, r1
 8003e2a:	1cfb      	adds	r3, r7, #3
 8003e2c:	701a      	strb	r2, [r3, #0]
	//LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 8003e2e:	4b09      	ldr	r3, [pc, #36]	; (8003e54 <VL53L0X_calc_macro_period_ps+0x34>)
 8003e30:	2400      	movs	r4, #0
 8003e32:	613b      	str	r3, [r7, #16]
 8003e34:	617c      	str	r4, [r7, #20]

	macro_period_vclks = 2304;
 8003e36:	2390      	movs	r3, #144	; 0x90
 8003e38:	011b      	lsls	r3, r3, #4
 8003e3a:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 8003e3c:	1cfb      	adds	r3, r7, #3
 8003e3e:	781b      	ldrb	r3, [r3, #0]
 8003e40:	68fa      	ldr	r2, [r7, #12]
 8003e42:	4353      	muls	r3, r2
	macro_period_ps = (uint32_t)(macro_period_vclks
 8003e44:	693a      	ldr	r2, [r7, #16]
 8003e46:	4353      	muls	r3, r2
 8003e48:	60bb      	str	r3, [r7, #8]

	//LOG_FUNCTION_END("");
	return macro_period_ps;
 8003e4a:	68bb      	ldr	r3, [r7, #8]
}
 8003e4c:	0018      	movs	r0, r3
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	b007      	add	sp, #28
 8003e52:	bd90      	pop	{r4, r7, pc}
 8003e54:	00000677 	.word	0x00000677

08003e58 <VL53L0X_decode_timeout>:
	return encoded_timeout;

}

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b084      	sub	sp, #16
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	0002      	movs	r2, r0
 8003e60:	1dbb      	adds	r3, r7, #6
 8003e62:	801a      	strh	r2, [r3, #0]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 8003e64:	2300      	movs	r3, #0
 8003e66:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8003e68:	1dbb      	adds	r3, r7, #6
 8003e6a:	881b      	ldrh	r3, [r3, #0]
 8003e6c:	22ff      	movs	r2, #255	; 0xff
 8003e6e:	4013      	ands	r3, r2
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 8003e70:	1dba      	adds	r2, r7, #6
 8003e72:	8812      	ldrh	r2, [r2, #0]
 8003e74:	0a12      	lsrs	r2, r2, #8
 8003e76:	b292      	uxth	r2, r2
 8003e78:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8003e7a:	3301      	adds	r3, #1
 8003e7c:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
}
 8003e80:	0018      	movs	r0, r3
 8003e82:	46bd      	mov	sp, r7
 8003e84:	b004      	add	sp, #16
 8003e86:	bd80      	pop	{r7, pc}

08003e88 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b086      	sub	sp, #24
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
 8003e90:	0008      	movs	r0, r1
 8003e92:	0011      	movs	r1, r2
 8003e94:	1cbb      	adds	r3, r7, #2
 8003e96:	1c02      	adds	r2, r0, #0
 8003e98:	801a      	strh	r2, [r3, #0]
 8003e9a:	1c7b      	adds	r3, r7, #1
 8003e9c:	1c0a      	adds	r2, r1, #0
 8003e9e:	701a      	strb	r2, [r3, #0]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8003ea4:	1c7b      	adds	r3, r7, #1
 8003ea6:	781a      	ldrb	r2, [r3, #0]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	0011      	movs	r1, r2
 8003eac:	0018      	movs	r0, r3
 8003eae:	f7ff ffb7 	bl	8003e20 <VL53L0X_calc_macro_period_ps>
 8003eb2:	0003      	movs	r3, r0
 8003eb4:	613b      	str	r3, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	33f5      	adds	r3, #245	; 0xf5
 8003eba:	33ff      	adds	r3, #255	; 0xff
 8003ebc:	001a      	movs	r2, r3
 8003ebe:	23fa      	movs	r3, #250	; 0xfa
 8003ec0:	0099      	lsls	r1, r3, #2
 8003ec2:	0010      	movs	r0, r2
 8003ec4:	f7fc f920 	bl	8000108 <__udivsi3>
 8003ec8:	0003      	movs	r3, r0
 8003eca:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 8003ecc:	1cbb      	adds	r3, r7, #2
 8003ece:	881b      	ldrh	r3, [r3, #0]
 8003ed0:	68fa      	ldr	r2, [r7, #12]
 8003ed2:	4353      	muls	r3, r2
 8003ed4:	33f5      	adds	r3, #245	; 0xf5
 8003ed6:	33ff      	adds	r3, #255	; 0xff
 8003ed8:	001a      	movs	r2, r3
	actual_timeout_period_us =
 8003eda:	23fa      	movs	r3, #250	; 0xfa
 8003edc:	0099      	lsls	r1, r3, #2
 8003ede:	0010      	movs	r0, r2
 8003ee0:	f7fc f912 	bl	8000108 <__udivsi3>
 8003ee4:	0003      	movs	r3, r0
 8003ee6:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 8003ee8:	697b      	ldr	r3, [r7, #20]
}
 8003eea:	0018      	movs	r0, r3
 8003eec:	46bd      	mov	sp, r7
 8003eee:	b006      	add	sp, #24
 8003ef0:	bd80      	pop	{r7, pc}

08003ef2 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 8003ef2:	b590      	push	{r4, r7, lr}
 8003ef4:	b08d      	sub	sp, #52	; 0x34
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	60f8      	str	r0, [r7, #12]
 8003efa:	607a      	str	r2, [r7, #4]
 8003efc:	230b      	movs	r3, #11
 8003efe:	18fb      	adds	r3, r7, r3
 8003f00:	1c0a      	adds	r2, r1, #0
 8003f02:	701a      	strb	r2, [r3, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003f04:	232f      	movs	r3, #47	; 0x2f
 8003f06:	18fb      	adds	r3, r7, r3
 8003f08:	2200      	movs	r2, #0
 8003f0a:	701a      	strb	r2, [r3, #0]
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 8003f0c:	2320      	movs	r3, #32
 8003f0e:	18fb      	adds	r3, r7, r3
 8003f10:	2200      	movs	r2, #0
 8003f12:	701a      	strb	r2, [r3, #0]
	uint32_t TimeoutMicroSeconds = 0;
 8003f14:	2300      	movs	r3, #0
 8003f16:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 8003f18:	231e      	movs	r3, #30
 8003f1a:	18fb      	adds	r3, r7, r3
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	801a      	strh	r2, [r3, #0]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 8003f20:	2324      	movs	r3, #36	; 0x24
 8003f22:	18fb      	adds	r3, r7, r3
 8003f24:	2200      	movs	r2, #0
 8003f26:	801a      	strh	r2, [r3, #0]
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8003f28:	230b      	movs	r3, #11
 8003f2a:	18fb      	adds	r3, r7, r3
 8003f2c:	781b      	ldrb	r3, [r3, #0]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d009      	beq.n	8003f46 <get_sequence_step_timeout+0x54>
 8003f32:	230b      	movs	r3, #11
 8003f34:	18fb      	adds	r3, r7, r3
 8003f36:	781b      	ldrb	r3, [r3, #0]
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d004      	beq.n	8003f46 <get_sequence_step_timeout+0x54>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8003f3c:	230b      	movs	r3, #11
 8003f3e:	18fb      	adds	r3, r7, r3
 8003f40:	781b      	ldrb	r3, [r3, #0]
 8003f42:	2b02      	cmp	r3, #2
 8003f44:	d133      	bne.n	8003fae <get_sequence_step_timeout+0xbc>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8003f46:	232f      	movs	r3, #47	; 0x2f
 8003f48:	18fc      	adds	r4, r7, r3
 8003f4a:	2321      	movs	r3, #33	; 0x21
 8003f4c:	18fa      	adds	r2, r7, r3
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2100      	movs	r1, #0
 8003f52:	0018      	movs	r0, r3
 8003f54:	f7ff fb08 	bl	8003568 <VL53L0X_GetVcselPulsePeriod>
 8003f58:	0003      	movs	r3, r0
 8003f5a:	7023      	strb	r3, [r4, #0]
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 8003f5c:	232f      	movs	r3, #47	; 0x2f
 8003f5e:	18fb      	adds	r3, r7, r3
 8003f60:	781b      	ldrb	r3, [r3, #0]
 8003f62:	b25b      	sxtb	r3, r3
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d10a      	bne.n	8003f7e <get_sequence_step_timeout+0x8c>
			Status = VL53L0X_RdByte(Dev,
 8003f68:	232f      	movs	r3, #47	; 0x2f
 8003f6a:	18fc      	adds	r4, r7, r3
 8003f6c:	2320      	movs	r3, #32
 8003f6e:	18fa      	adds	r2, r7, r3
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2146      	movs	r1, #70	; 0x46
 8003f74:	0018      	movs	r0, r3
 8003f76:	f000 fb05 	bl	8004584 <VL53L0X_RdByte>
 8003f7a:	0003      	movs	r3, r0
 8003f7c:	7023      	strb	r3, [r4, #0]
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 8003f7e:	2320      	movs	r3, #32
 8003f80:	18fb      	adds	r3, r7, r3
 8003f82:	781b      	ldrb	r3, [r3, #0]
 8003f84:	b29b      	uxth	r3, r3
 8003f86:	0018      	movs	r0, r3
 8003f88:	f7ff ff66 	bl	8003e58 <VL53L0X_decode_timeout>
 8003f8c:	0002      	movs	r2, r0
 8003f8e:	2322      	movs	r3, #34	; 0x22
 8003f90:	18fb      	adds	r3, r7, r3
 8003f92:	801a      	strh	r2, [r3, #0]

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8003f94:	2321      	movs	r3, #33	; 0x21
 8003f96:	18fb      	adds	r3, r7, r3
 8003f98:	781a      	ldrb	r2, [r3, #0]
 8003f9a:	2322      	movs	r3, #34	; 0x22
 8003f9c:	18fb      	adds	r3, r7, r3
 8003f9e:	8819      	ldrh	r1, [r3, #0]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	0018      	movs	r0, r3
 8003fa4:	f7ff ff70 	bl	8003e88 <VL53L0X_calc_timeout_us>
 8003fa8:	0003      	movs	r3, r0
 8003faa:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fac:	e0c7      	b.n	800413e <get_sequence_step_timeout+0x24c>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8003fae:	230b      	movs	r3, #11
 8003fb0:	18fb      	adds	r3, r7, r3
 8003fb2:	781b      	ldrb	r3, [r3, #0]
 8003fb4:	2b03      	cmp	r3, #3
 8003fb6:	d144      	bne.n	8004042 <get_sequence_step_timeout+0x150>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8003fb8:	232f      	movs	r3, #47	; 0x2f
 8003fba:	18fc      	adds	r4, r7, r3
 8003fbc:	2321      	movs	r3, #33	; 0x21
 8003fbe:	18fa      	adds	r2, r7, r3
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2100      	movs	r1, #0
 8003fc4:	0018      	movs	r0, r3
 8003fc6:	f7ff facf 	bl	8003568 <VL53L0X_GetVcselPulsePeriod>
 8003fca:	0003      	movs	r3, r0
 8003fcc:	7023      	strb	r3, [r4, #0]
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8003fce:	232f      	movs	r3, #47	; 0x2f
 8003fd0:	18fb      	adds	r3, r7, r3
 8003fd2:	781b      	ldrb	r3, [r3, #0]
 8003fd4:	b25b      	sxtb	r3, r3
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d000      	beq.n	8003fdc <get_sequence_step_timeout+0xea>
 8003fda:	e0b0      	b.n	800413e <get_sequence_step_timeout+0x24c>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8003fdc:	232f      	movs	r3, #47	; 0x2f
 8003fde:	18fc      	adds	r4, r7, r3
 8003fe0:	2321      	movs	r3, #33	; 0x21
 8003fe2:	18fa      	adds	r2, r7, r3
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2100      	movs	r1, #0
 8003fe8:	0018      	movs	r0, r3
 8003fea:	f7ff fabd 	bl	8003568 <VL53L0X_GetVcselPulsePeriod>
 8003fee:	0003      	movs	r3, r0
 8003ff0:	7023      	strb	r3, [r4, #0]
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 8003ff2:	232f      	movs	r3, #47	; 0x2f
 8003ff4:	18fb      	adds	r3, r7, r3
 8003ff6:	781b      	ldrb	r3, [r3, #0]
 8003ff8:	b25b      	sxtb	r3, r3
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d10a      	bne.n	8004014 <get_sequence_step_timeout+0x122>
				Status = VL53L0X_RdWord(Dev,
 8003ffe:	232f      	movs	r3, #47	; 0x2f
 8004000:	18fc      	adds	r4, r7, r3
 8004002:	231e      	movs	r3, #30
 8004004:	18fa      	adds	r2, r7, r3
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2151      	movs	r1, #81	; 0x51
 800400a:	0018      	movs	r0, r3
 800400c:	f000 fae0 	bl	80045d0 <VL53L0X_RdWord>
 8004010:	0003      	movs	r3, r0
 8004012:	7023      	strb	r3, [r4, #0]
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8004014:	231e      	movs	r3, #30
 8004016:	18fb      	adds	r3, r7, r3
 8004018:	881b      	ldrh	r3, [r3, #0]
 800401a:	0018      	movs	r0, r3
 800401c:	f7ff ff1c 	bl	8003e58 <VL53L0X_decode_timeout>
 8004020:	0002      	movs	r2, r0
 8004022:	2326      	movs	r3, #38	; 0x26
 8004024:	18fb      	adds	r3, r7, r3
 8004026:	801a      	strh	r2, [r3, #0]
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8004028:	2321      	movs	r3, #33	; 0x21
 800402a:	18fb      	adds	r3, r7, r3
 800402c:	781a      	ldrb	r2, [r3, #0]
 800402e:	2326      	movs	r3, #38	; 0x26
 8004030:	18fb      	adds	r3, r7, r3
 8004032:	8819      	ldrh	r1, [r3, #0]
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	0018      	movs	r0, r3
 8004038:	f7ff ff26 	bl	8003e88 <VL53L0X_calc_timeout_us>
 800403c:	0003      	movs	r3, r0
 800403e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004040:	e07d      	b.n	800413e <get_sequence_step_timeout+0x24c>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8004042:	230b      	movs	r3, #11
 8004044:	18fb      	adds	r3, r7, r3
 8004046:	781b      	ldrb	r3, [r3, #0]
 8004048:	2b04      	cmp	r3, #4
 800404a:	d000      	beq.n	800404e <get_sequence_step_timeout+0x15c>
 800404c:	e077      	b.n	800413e <get_sequence_step_timeout+0x24c>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800404e:	2314      	movs	r3, #20
 8004050:	18fa      	adds	r2, r7, r3
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	0011      	movs	r1, r2
 8004056:	0018      	movs	r0, r3
 8004058:	f7ff fb0a 	bl	8003670 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 800405c:	2326      	movs	r3, #38	; 0x26
 800405e:	18fb      	adds	r3, r7, r3
 8004060:	2200      	movs	r2, #0
 8004062:	801a      	strh	r2, [r3, #0]

		if (SchedulerSequenceSteps.PreRangeOn) {
 8004064:	2314      	movs	r3, #20
 8004066:	18fb      	adds	r3, r7, r3
 8004068:	78db      	ldrb	r3, [r3, #3]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d025      	beq.n	80040ba <get_sequence_step_timeout+0x1c8>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800406e:	232f      	movs	r3, #47	; 0x2f
 8004070:	18fc      	adds	r4, r7, r3
 8004072:	2321      	movs	r3, #33	; 0x21
 8004074:	18fa      	adds	r2, r7, r3
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2100      	movs	r1, #0
 800407a:	0018      	movs	r0, r3
 800407c:	f7ff fa74 	bl	8003568 <VL53L0X_GetVcselPulsePeriod>
 8004080:	0003      	movs	r3, r0
 8004082:	7023      	strb	r3, [r4, #0]
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 8004084:	232f      	movs	r3, #47	; 0x2f
 8004086:	18fb      	adds	r3, r7, r3
 8004088:	781b      	ldrb	r3, [r3, #0]
 800408a:	b25b      	sxtb	r3, r3
 800408c:	2b00      	cmp	r3, #0
 800408e:	d114      	bne.n	80040ba <get_sequence_step_timeout+0x1c8>
				Status = VL53L0X_RdWord(Dev,
 8004090:	232f      	movs	r3, #47	; 0x2f
 8004092:	18fc      	adds	r4, r7, r3
 8004094:	231e      	movs	r3, #30
 8004096:	18fa      	adds	r2, r7, r3
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2151      	movs	r1, #81	; 0x51
 800409c:	0018      	movs	r0, r3
 800409e:	f000 fa97 	bl	80045d0 <VL53L0X_RdWord>
 80040a2:	0003      	movs	r3, r0
 80040a4:	7023      	strb	r3, [r4, #0]
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 80040a6:	231e      	movs	r3, #30
 80040a8:	18fb      	adds	r3, r7, r3
 80040aa:	881b      	ldrh	r3, [r3, #0]
 80040ac:	0018      	movs	r0, r3
 80040ae:	f7ff fed3 	bl	8003e58 <VL53L0X_decode_timeout>
 80040b2:	0002      	movs	r2, r0
 80040b4:	2326      	movs	r3, #38	; 0x26
 80040b6:	18fb      	adds	r3, r7, r3
 80040b8:	801a      	strh	r2, [r3, #0]
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 80040ba:	232f      	movs	r3, #47	; 0x2f
 80040bc:	18fb      	adds	r3, r7, r3
 80040be:	781b      	ldrb	r3, [r3, #0]
 80040c0:	b25b      	sxtb	r3, r3
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d10a      	bne.n	80040dc <get_sequence_step_timeout+0x1ea>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80040c6:	232f      	movs	r3, #47	; 0x2f
 80040c8:	18fc      	adds	r4, r7, r3
 80040ca:	2321      	movs	r3, #33	; 0x21
 80040cc:	18fa      	adds	r2, r7, r3
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2101      	movs	r1, #1
 80040d2:	0018      	movs	r0, r3
 80040d4:	f7ff fa48 	bl	8003568 <VL53L0X_GetVcselPulsePeriod>
 80040d8:	0003      	movs	r3, r0
 80040da:	7023      	strb	r3, [r4, #0]
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 80040dc:	232f      	movs	r3, #47	; 0x2f
 80040de:	18fb      	adds	r3, r7, r3
 80040e0:	781b      	ldrb	r3, [r3, #0]
 80040e2:	b25b      	sxtb	r3, r3
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d114      	bne.n	8004112 <get_sequence_step_timeout+0x220>
			Status = VL53L0X_RdWord(Dev,
 80040e8:	232f      	movs	r3, #47	; 0x2f
 80040ea:	18fc      	adds	r4, r7, r3
 80040ec:	231c      	movs	r3, #28
 80040ee:	18fa      	adds	r2, r7, r3
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2171      	movs	r1, #113	; 0x71
 80040f4:	0018      	movs	r0, r3
 80040f6:	f000 fa6b 	bl	80045d0 <VL53L0X_RdWord>
 80040fa:	0003      	movs	r3, r0
 80040fc:	7023      	strb	r3, [r4, #0]
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 80040fe:	231c      	movs	r3, #28
 8004100:	18fb      	adds	r3, r7, r3
 8004102:	881b      	ldrh	r3, [r3, #0]
 8004104:	0018      	movs	r0, r3
 8004106:	f7ff fea7 	bl	8003e58 <VL53L0X_decode_timeout>
 800410a:	0002      	movs	r2, r0
 800410c:	2324      	movs	r3, #36	; 0x24
 800410e:	18fb      	adds	r3, r7, r3
 8004110:	801a      	strh	r2, [r3, #0]
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 8004112:	2324      	movs	r3, #36	; 0x24
 8004114:	18fb      	adds	r3, r7, r3
 8004116:	2224      	movs	r2, #36	; 0x24
 8004118:	18b9      	adds	r1, r7, r2
 800411a:	2226      	movs	r2, #38	; 0x26
 800411c:	18ba      	adds	r2, r7, r2
 800411e:	8809      	ldrh	r1, [r1, #0]
 8004120:	8812      	ldrh	r2, [r2, #0]
 8004122:	1a8a      	subs	r2, r1, r2
 8004124:	801a      	strh	r2, [r3, #0]
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8004126:	2321      	movs	r3, #33	; 0x21
 8004128:	18fb      	adds	r3, r7, r3
 800412a:	781a      	ldrb	r2, [r3, #0]
 800412c:	2324      	movs	r3, #36	; 0x24
 800412e:	18fb      	adds	r3, r7, r3
 8004130:	8819      	ldrh	r1, [r3, #0]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	0018      	movs	r0, r3
 8004136:	f7ff fea7 	bl	8003e88 <VL53L0X_calc_timeout_us>
 800413a:	0003      	movs	r3, r0
 800413c:	62bb      	str	r3, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004142:	601a      	str	r2, [r3, #0]

	return Status;
 8004144:	232f      	movs	r3, #47	; 0x2f
 8004146:	18fb      	adds	r3, r7, r3
 8004148:	781b      	ldrb	r3, [r3, #0]
 800414a:	b25b      	sxtb	r3, r3
}
 800414c:	0018      	movs	r0, r3
 800414e:	46bd      	mov	sp, r7
 8004150:	b00d      	add	sp, #52	; 0x34
 8004152:	bd90      	pop	{r4, r7, pc}

08004154 <VL53L0X_get_vcsel_pulse_period>:
	return Status;
}

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8004154:	b590      	push	{r4, r7, lr}
 8004156:	b087      	sub	sp, #28
 8004158:	af00      	add	r7, sp, #0
 800415a:	60f8      	str	r0, [r7, #12]
 800415c:	607a      	str	r2, [r7, #4]
 800415e:	230b      	movs	r3, #11
 8004160:	18fb      	adds	r3, r7, r3
 8004162:	1c0a      	adds	r2, r1, #0
 8004164:	701a      	strb	r2, [r3, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004166:	2317      	movs	r3, #23
 8004168:	18fb      	adds	r3, r7, r3
 800416a:	2200      	movs	r2, #0
 800416c:	701a      	strb	r2, [r3, #0]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 800416e:	230b      	movs	r3, #11
 8004170:	18fb      	adds	r3, r7, r3
 8004172:	781b      	ldrb	r3, [r3, #0]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d002      	beq.n	800417e <VL53L0X_get_vcsel_pulse_period+0x2a>
 8004178:	2b01      	cmp	r3, #1
 800417a:	d00c      	beq.n	8004196 <VL53L0X_get_vcsel_pulse_period+0x42>
 800417c:	e017      	b.n	80041ae <VL53L0X_get_vcsel_pulse_period+0x5a>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800417e:	2317      	movs	r3, #23
 8004180:	18fc      	adds	r4, r7, r3
 8004182:	2316      	movs	r3, #22
 8004184:	18fa      	adds	r2, r7, r3
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2150      	movs	r1, #80	; 0x50
 800418a:	0018      	movs	r0, r3
 800418c:	f000 f9fa 	bl	8004584 <VL53L0X_RdByte>
 8004190:	0003      	movs	r3, r0
 8004192:	7023      	strb	r3, [r4, #0]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8004194:	e00f      	b.n	80041b6 <VL53L0X_get_vcsel_pulse_period+0x62>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8004196:	2317      	movs	r3, #23
 8004198:	18fc      	adds	r4, r7, r3
 800419a:	2316      	movs	r3, #22
 800419c:	18fa      	adds	r2, r7, r3
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2170      	movs	r1, #112	; 0x70
 80041a2:	0018      	movs	r0, r3
 80041a4:	f000 f9ee 	bl	8004584 <VL53L0X_RdByte>
 80041a8:	0003      	movs	r3, r0
 80041aa:	7023      	strb	r3, [r4, #0]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 80041ac:	e003      	b.n	80041b6 <VL53L0X_get_vcsel_pulse_period+0x62>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80041ae:	2317      	movs	r3, #23
 80041b0:	18fb      	adds	r3, r7, r3
 80041b2:	22fc      	movs	r2, #252	; 0xfc
 80041b4:	701a      	strb	r2, [r3, #0]
	}

	if (Status == VL53L0X_ERROR_NONE)
 80041b6:	2317      	movs	r3, #23
 80041b8:	18fb      	adds	r3, r7, r3
 80041ba:	781b      	ldrb	r3, [r3, #0]
 80041bc:	b25b      	sxtb	r3, r3
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d109      	bne.n	80041d6 <VL53L0X_get_vcsel_pulse_period+0x82>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 80041c2:	2316      	movs	r3, #22
 80041c4:	18fb      	adds	r3, r7, r3
 80041c6:	781b      	ldrb	r3, [r3, #0]
 80041c8:	0018      	movs	r0, r3
 80041ca:	f7ff fe0f 	bl	8003dec <VL53L0X_decode_vcsel_period>
 80041ce:	0003      	movs	r3, r0
 80041d0:	001a      	movs	r2, r3
		*pVCSELPulsePeriodPCLK =
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	701a      	strb	r2, [r3, #0]

	return Status;
 80041d6:	2317      	movs	r3, #23
 80041d8:	18fb      	adds	r3, r7, r3
 80041da:	781b      	ldrb	r3, [r3, #0]
 80041dc:	b25b      	sxtb	r3, r3
}
 80041de:	0018      	movs	r0, r3
 80041e0:	46bd      	mov	sp, r7
 80041e2:	b007      	add	sp, #28
 80041e4:	bd90      	pop	{r4, r7, pc}
	...

080041e8 <VL53L0X_get_measurement_timing_budget_micro_seconds>:
	return Status;
}

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 80041e8:	b590      	push	{r4, r7, lr}
 80041ea:	b091      	sub	sp, #68	; 0x44
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
 80041f0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80041f2:	233f      	movs	r3, #63	; 0x3f
 80041f4:	18fb      	adds	r3, r7, r3
 80041f6:	2200      	movs	r2, #0
 80041f8:	701a      	strb	r2, [r3, #0]
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 80041fa:	23fa      	movs	r3, #250	; 0xfa
 80041fc:	00db      	lsls	r3, r3, #3
 80041fe:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 8004200:	4b62      	ldr	r3, [pc, #392]	; (800438c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1a4>)
 8004202:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 8004204:	23f0      	movs	r3, #240	; 0xf0
 8004206:	009b      	lsls	r3, r3, #2
 8004208:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800420a:	23a5      	movs	r3, #165	; 0xa5
 800420c:	009b      	lsls	r3, r3, #2
 800420e:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 8004210:	4b5f      	ldr	r3, [pc, #380]	; (8004390 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1a8>)
 8004212:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 8004214:	4b5f      	ldr	r3, [pc, #380]	; (8004394 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1ac>)
 8004216:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8004218:	23a5      	movs	r3, #165	; 0xa5
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800421e:	4b5e      	ldr	r3, [pc, #376]	; (8004398 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1b0>)
 8004220:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8004222:	2300      	movs	r3, #0
 8004224:	60fb      	str	r3, [r7, #12]

	//LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 8004226:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004228:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800422a:	18d2      	adds	r2, r2, r3
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8004230:	233f      	movs	r3, #63	; 0x3f
 8004232:	18fc      	adds	r4, r7, r3
 8004234:	2318      	movs	r3, #24
 8004236:	18fa      	adds	r2, r7, r3
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	0011      	movs	r1, r2
 800423c:	0018      	movs	r0, r3
 800423e:	f7ff fa17 	bl	8003670 <VL53L0X_GetSequenceStepEnables>
 8004242:	0003      	movs	r3, r0
 8004244:	7023      	strb	r3, [r4, #0]

	if (Status != VL53L0X_ERROR_NONE) {
 8004246:	233f      	movs	r3, #63	; 0x3f
 8004248:	18fb      	adds	r3, r7, r3
 800424a:	781b      	ldrb	r3, [r3, #0]
 800424c:	b25b      	sxtb	r3, r3
 800424e:	2b00      	cmp	r3, #0
 8004250:	d004      	beq.n	800425c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x74>
		//LOG_FUNCTION_END(Status);
		return Status;
 8004252:	233f      	movs	r3, #63	; 0x3f
 8004254:	18fb      	adds	r3, r7, r3
 8004256:	781b      	ldrb	r3, [r3, #0]
 8004258:	b25b      	sxtb	r3, r3
 800425a:	e092      	b.n	8004382 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x19a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 800425c:	2318      	movs	r3, #24
 800425e:	18fb      	adds	r3, r7, r3
 8004260:	781b      	ldrb	r3, [r3, #0]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d109      	bne.n	800427a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x92>
		SchedulerSequenceSteps.MsrcOn ||
 8004266:	2318      	movs	r3, #24
 8004268:	18fb      	adds	r3, r7, r3
 800426a:	785b      	ldrb	r3, [r3, #1]
	if (SchedulerSequenceSteps.TccOn  ||
 800426c:	2b00      	cmp	r3, #0
 800426e:	d104      	bne.n	800427a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x92>
		SchedulerSequenceSteps.DssOn) {
 8004270:	2318      	movs	r3, #24
 8004272:	18fb      	adds	r3, r7, r3
 8004274:	789b      	ldrb	r3, [r3, #2]
		SchedulerSequenceSteps.MsrcOn ||
 8004276:	2b00      	cmp	r3, #0
 8004278:	d039      	beq.n	80042ee <VL53L0X_get_measurement_timing_budget_micro_seconds+0x106>

		Status = get_sequence_step_timeout(Dev,
 800427a:	233f      	movs	r3, #63	; 0x3f
 800427c:	18fc      	adds	r4, r7, r3
 800427e:	2310      	movs	r3, #16
 8004280:	18fa      	adds	r2, r7, r3
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2102      	movs	r1, #2
 8004286:	0018      	movs	r0, r3
 8004288:	f7ff fe33 	bl	8003ef2 <get_sequence_step_timeout>
 800428c:	0003      	movs	r3, r0
 800428e:	7023      	strb	r3, [r4, #0]
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 8004290:	233f      	movs	r3, #63	; 0x3f
 8004292:	18fb      	adds	r3, r7, r3
 8004294:	781b      	ldrb	r3, [r3, #0]
 8004296:	b25b      	sxtb	r3, r3
 8004298:	2b00      	cmp	r3, #0
 800429a:	d128      	bne.n	80042ee <VL53L0X_get_measurement_timing_budget_micro_seconds+0x106>
			if (SchedulerSequenceSteps.TccOn) {
 800429c:	2318      	movs	r3, #24
 800429e:	18fb      	adds	r3, r7, r3
 80042a0:	781b      	ldrb	r3, [r3, #0]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d007      	beq.n	80042b6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xce>
				*pMeasurementTimingBudgetMicroSeconds +=
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 80042aa:	6939      	ldr	r1, [r7, #16]
 80042ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042ae:	18cb      	adds	r3, r1, r3
				*pMeasurementTimingBudgetMicroSeconds +=
 80042b0:	18d2      	adds	r2, r2, r3
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 80042b6:	2318      	movs	r3, #24
 80042b8:	18fb      	adds	r3, r7, r3
 80042ba:	789b      	ldrb	r3, [r3, #2]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d009      	beq.n	80042d4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xec>
				*pMeasurementTimingBudgetMicroSeconds +=
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 80042c4:	6939      	ldr	r1, [r7, #16]
 80042c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042c8:	18cb      	adds	r3, r1, r3
 80042ca:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 80042cc:	18d2      	adds	r2, r2, r3
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	601a      	str	r2, [r3, #0]
 80042d2:	e00c      	b.n	80042ee <VL53L0X_get_measurement_timing_budget_micro_seconds+0x106>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 80042d4:	2318      	movs	r3, #24
 80042d6:	18fb      	adds	r3, r7, r3
 80042d8:	785b      	ldrb	r3, [r3, #1]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d007      	beq.n	80042ee <VL53L0X_get_measurement_timing_budget_micro_seconds+0x106>
				*pMeasurementTimingBudgetMicroSeconds +=
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 80042e2:	6939      	ldr	r1, [r7, #16]
 80042e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042e6:	18cb      	adds	r3, r1, r3
				*pMeasurementTimingBudgetMicroSeconds +=
 80042e8:	18d2      	adds	r2, r2, r3
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80042ee:	233f      	movs	r3, #63	; 0x3f
 80042f0:	18fb      	adds	r3, r7, r3
 80042f2:	781b      	ldrb	r3, [r3, #0]
 80042f4:	b25b      	sxtb	r3, r3
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d117      	bne.n	800432a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x142>
		if (SchedulerSequenceSteps.PreRangeOn) {
 80042fa:	2318      	movs	r3, #24
 80042fc:	18fb      	adds	r3, r7, r3
 80042fe:	78db      	ldrb	r3, [r3, #3]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d012      	beq.n	800432a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x142>
			Status = get_sequence_step_timeout(Dev,
 8004304:	233f      	movs	r3, #63	; 0x3f
 8004306:	18fc      	adds	r4, r7, r3
 8004308:	230c      	movs	r3, #12
 800430a:	18fa      	adds	r2, r7, r3
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2103      	movs	r1, #3
 8004310:	0018      	movs	r0, r3
 8004312:	f7ff fdee 	bl	8003ef2 <get_sequence_step_timeout>
 8004316:	0003      	movs	r3, r0
 8004318:	7023      	strb	r3, [r4, #0]
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 800431e:	68f9      	ldr	r1, [r7, #12]
 8004320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004322:	18cb      	adds	r3, r1, r3
			*pMeasurementTimingBudgetMicroSeconds +=
 8004324:	18d2      	adds	r2, r2, r3
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800432a:	233f      	movs	r3, #63	; 0x3f
 800432c:	18fb      	adds	r3, r7, r3
 800432e:	781b      	ldrb	r3, [r3, #0]
 8004330:	b25b      	sxtb	r3, r3
 8004332:	2b00      	cmp	r3, #0
 8004334:	d117      	bne.n	8004366 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x17e>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 8004336:	2318      	movs	r3, #24
 8004338:	18fb      	adds	r3, r7, r3
 800433a:	791b      	ldrb	r3, [r3, #4]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d012      	beq.n	8004366 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x17e>
			Status = get_sequence_step_timeout(Dev,
 8004340:	233f      	movs	r3, #63	; 0x3f
 8004342:	18fc      	adds	r4, r7, r3
 8004344:	2314      	movs	r3, #20
 8004346:	18fa      	adds	r2, r7, r3
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2104      	movs	r1, #4
 800434c:	0018      	movs	r0, r3
 800434e:	f7ff fdd0 	bl	8003ef2 <get_sequence_step_timeout>
 8004352:	0003      	movs	r3, r0
 8004354:	7023      	strb	r3, [r4, #0]
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 800435a:	6979      	ldr	r1, [r7, #20]
 800435c:	6a3b      	ldr	r3, [r7, #32]
 800435e:	18cb      	adds	r3, r1, r3
			*pMeasurementTimingBudgetMicroSeconds +=
 8004360:	18d2      	adds	r2, r2, r3
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004366:	233f      	movs	r3, #63	; 0x3f
 8004368:	18fb      	adds	r3, r7, r3
 800436a:	781b      	ldrb	r3, [r3, #0]
 800436c:	b25b      	sxtb	r3, r3
 800436e:	2b00      	cmp	r3, #0
 8004370:	d103      	bne.n	800437a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x192>
		VL53L0X_SETPARAMETERFIELD(Dev,
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	//LOG_FUNCTION_END(Status);
	return Status;
 800437a:	233f      	movs	r3, #63	; 0x3f
 800437c:	18fb      	adds	r3, r7, r3
 800437e:	781b      	ldrb	r3, [r3, #0]
 8004380:	b25b      	sxtb	r3, r3
}
 8004382:	0018      	movs	r0, r3
 8004384:	46bd      	mov	sp, r7
 8004386:	b011      	add	sp, #68	; 0x44
 8004388:	bd90      	pop	{r4, r7, pc}
 800438a:	46c0      	nop			; (mov r8, r8)
 800438c:	00000776 	.word	0x00000776
 8004390:	0000024e 	.word	0x0000024e
 8004394:	000002b2 	.word	0x000002b2
 8004398:	00000226 	.word	0x00000226

0800439c <i2c_write>:
#include "vl53l0x_api.h"
#include "i2c.h"
#include "rcc.h"

static int i2c_write(uint8_t I2CDevAddr, uint8_t cmd, uint8_t * data, uint8_t len)
{
 800439c:	b590      	push	{r4, r7, lr}
 800439e:	b085      	sub	sp, #20
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	0004      	movs	r4, r0
 80043a4:	0008      	movs	r0, r1
 80043a6:	603a      	str	r2, [r7, #0]
 80043a8:	0019      	movs	r1, r3
 80043aa:	1dfb      	adds	r3, r7, #7
 80043ac:	1c22      	adds	r2, r4, #0
 80043ae:	701a      	strb	r2, [r3, #0]
 80043b0:	1dbb      	adds	r3, r7, #6
 80043b2:	1c02      	adds	r2, r0, #0
 80043b4:	701a      	strb	r2, [r3, #0]
 80043b6:	1d7b      	adds	r3, r7, #5
 80043b8:	1c0a      	adds	r2, r1, #0
 80043ba:	701a      	strb	r2, [r3, #0]
    uint8_t * buf = malloc(len+1);
 80043bc:	1d7b      	adds	r3, r7, #5
 80043be:	781b      	ldrb	r3, [r3, #0]
 80043c0:	3301      	adds	r3, #1
 80043c2:	0018      	movs	r0, r3
 80043c4:	f000 f9a8 	bl	8004718 <malloc>
 80043c8:	0003      	movs	r3, r0
 80043ca:	60fb      	str	r3, [r7, #12]

    buf[0] = cmd;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	1dba      	adds	r2, r7, #6
 80043d0:	7812      	ldrb	r2, [r2, #0]
 80043d2:	701a      	strb	r2, [r3, #0]
    memcpy(buf+1, data, len);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	1c58      	adds	r0, r3, #1
 80043d8:	1d7b      	adds	r3, r7, #5
 80043da:	781a      	ldrb	r2, [r3, #0]
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	0019      	movs	r1, r3
 80043e0:	f000 f9ae 	bl	8004740 <memcpy>

    if (I2C_WrReg(I2CDevAddr, 0x00, buf, len+1))
 80043e4:	1d7b      	adds	r3, r7, #5
 80043e6:	781b      	ldrb	r3, [r3, #0]
 80043e8:	b29b      	uxth	r3, r3
 80043ea:	3301      	adds	r3, #1
 80043ec:	b299      	uxth	r1, r3
 80043ee:	68fa      	ldr	r2, [r7, #12]
 80043f0:	1dfb      	adds	r3, r7, #7
 80043f2:	7818      	ldrb	r0, [r3, #0]
 80043f4:	000b      	movs	r3, r1
 80043f6:	2100      	movs	r1, #0
 80043f8:	f7fd ff1e 	bl	8002238 <I2C_WrReg>
 80043fc:	1e03      	subs	r3, r0, #0
 80043fe:	d006      	beq.n	800440e <i2c_write+0x72>
    {
        //printf("Failed to write to the i2c bus.\n");
        free(buf);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	0018      	movs	r0, r3
 8004404:	f000 f992 	bl	800472c <free>
        return VL53L0X_ERROR_CONTROL_INTERFACE;
 8004408:	2314      	movs	r3, #20
 800440a:	425b      	negs	r3, r3
 800440c:	e004      	b.n	8004418 <i2c_write+0x7c>
    }
    free(buf);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	0018      	movs	r0, r3
 8004412:	f000 f98b 	bl	800472c <free>

    return VL53L0X_ERROR_NONE;
 8004416:	2300      	movs	r3, #0
}
 8004418:	0018      	movs	r0, r3
 800441a:	46bd      	mov	sp, r7
 800441c:	b005      	add	sp, #20
 800441e:	bd90      	pop	{r4, r7, pc}

08004420 <i2c_read>:

static int i2c_read(uint8_t I2CDevAddr, uint8_t cmd, uint8_t * data, uint8_t len){
 8004420:	b590      	push	{r4, r7, lr}
 8004422:	b083      	sub	sp, #12
 8004424:	af00      	add	r7, sp, #0
 8004426:	0004      	movs	r4, r0
 8004428:	0008      	movs	r0, r1
 800442a:	603a      	str	r2, [r7, #0]
 800442c:	0019      	movs	r1, r3
 800442e:	1dfb      	adds	r3, r7, #7
 8004430:	1c22      	adds	r2, r4, #0
 8004432:	701a      	strb	r2, [r3, #0]
 8004434:	1dbb      	adds	r3, r7, #6
 8004436:	1c02      	adds	r2, r0, #0
 8004438:	701a      	strb	r2, [r3, #0]
 800443a:	1d7b      	adds	r3, r7, #5
 800443c:	1c0a      	adds	r2, r1, #0
 800443e:	701a      	strb	r2, [r3, #0]

    if (I2C_WrReg(I2CDevAddr, 0x00, &cmd, 1))
 8004440:	1dba      	adds	r2, r7, #6
 8004442:	1dfb      	adds	r3, r7, #7
 8004444:	7818      	ldrb	r0, [r3, #0]
 8004446:	2301      	movs	r3, #1
 8004448:	2100      	movs	r1, #0
 800444a:	f7fd fef5 	bl	8002238 <I2C_WrReg>
 800444e:	1e03      	subs	r3, r0, #0
 8004450:	d002      	beq.n	8004458 <i2c_read+0x38>
    {
        //printf("Failed to write to the i2c bus.\n");
        return VL53L0X_ERROR_CONTROL_INTERFACE;
 8004452:	2314      	movs	r3, #20
 8004454:	425b      	negs	r3, r3
 8004456:	e008      	b.n	800446a <i2c_read+0x4a>
    }

    I2C_RdRegLW(I2CDevAddr, data, len);
 8004458:	1d7b      	adds	r3, r7, #5
 800445a:	781a      	ldrb	r2, [r3, #0]
 800445c:	6839      	ldr	r1, [r7, #0]
 800445e:	1dfb      	adds	r3, r7, #7
 8004460:	781b      	ldrb	r3, [r3, #0]
 8004462:	0018      	movs	r0, r3
 8004464:	f7fd ffae 	bl	80023c4 <I2C_RdRegLW>
    //{
    //    printf("Failed to read from the i2c bus.\n");
    //    return VL53L0X_ERROR_CONTROL_INTERFACE;
    //}

    return VL53L0X_ERROR_NONE;
 8004468:	2300      	movs	r3, #0
}
 800446a:	0018      	movs	r0, r3
 800446c:	46bd      	mov	sp, r7
 800446e:	b003      	add	sp, #12
 8004470:	bd90      	pop	{r4, r7, pc}

08004472 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count){
    return i2c_read(Dev->I2cDevAddr, index, pdata, count);
}

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data){
 8004472:	b580      	push	{r7, lr}
 8004474:	b082      	sub	sp, #8
 8004476:	af00      	add	r7, sp, #0
 8004478:	6078      	str	r0, [r7, #4]
 800447a:	0008      	movs	r0, r1
 800447c:	0011      	movs	r1, r2
 800447e:	1cfb      	adds	r3, r7, #3
 8004480:	1c02      	adds	r2, r0, #0
 8004482:	701a      	strb	r2, [r3, #0]
 8004484:	1cbb      	adds	r3, r7, #2
 8004486:	1c0a      	adds	r2, r1, #0
 8004488:	701a      	strb	r2, [r3, #0]
	return i2c_write(Dev->I2cDevAddr, index, &data, 1);
 800448a:	687a      	ldr	r2, [r7, #4]
 800448c:	23ae      	movs	r3, #174	; 0xae
 800448e:	005b      	lsls	r3, r3, #1
 8004490:	5cd0      	ldrb	r0, [r2, r3]
 8004492:	1cba      	adds	r2, r7, #2
 8004494:	1cfb      	adds	r3, r7, #3
 8004496:	7819      	ldrb	r1, [r3, #0]
 8004498:	2301      	movs	r3, #1
 800449a:	f7ff ff7f 	bl	800439c <i2c_write>
 800449e:	0003      	movs	r3, r0
 80044a0:	b25b      	sxtb	r3, r3
}
 80044a2:	0018      	movs	r0, r3
 80044a4:	46bd      	mov	sp, r7
 80044a6:	b002      	add	sp, #8
 80044a8:	bd80      	pop	{r7, pc}

080044aa <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data){
 80044aa:	b580      	push	{r7, lr}
 80044ac:	b084      	sub	sp, #16
 80044ae:	af00      	add	r7, sp, #0
 80044b0:	6078      	str	r0, [r7, #4]
 80044b2:	0008      	movs	r0, r1
 80044b4:	0011      	movs	r1, r2
 80044b6:	1cfb      	adds	r3, r7, #3
 80044b8:	1c02      	adds	r2, r0, #0
 80044ba:	701a      	strb	r2, [r3, #0]
 80044bc:	003b      	movs	r3, r7
 80044be:	1c0a      	adds	r2, r1, #0
 80044c0:	801a      	strh	r2, [r3, #0]
    uint8_t buf[4];
    buf[1] = data>>0&0xFF;
 80044c2:	003b      	movs	r3, r7
 80044c4:	881b      	ldrh	r3, [r3, #0]
 80044c6:	b2da      	uxtb	r2, r3
 80044c8:	230c      	movs	r3, #12
 80044ca:	18fb      	adds	r3, r7, r3
 80044cc:	705a      	strb	r2, [r3, #1]
    buf[0] = data>>8&0xFF;
 80044ce:	003b      	movs	r3, r7
 80044d0:	881b      	ldrh	r3, [r3, #0]
 80044d2:	0a1b      	lsrs	r3, r3, #8
 80044d4:	b29b      	uxth	r3, r3
 80044d6:	b2da      	uxtb	r2, r3
 80044d8:	230c      	movs	r3, #12
 80044da:	18fb      	adds	r3, r7, r3
 80044dc:	701a      	strb	r2, [r3, #0]
    return i2c_write(Dev->I2cDevAddr, index, buf, 2);
 80044de:	687a      	ldr	r2, [r7, #4]
 80044e0:	23ae      	movs	r3, #174	; 0xae
 80044e2:	005b      	lsls	r3, r3, #1
 80044e4:	5cd0      	ldrb	r0, [r2, r3]
 80044e6:	230c      	movs	r3, #12
 80044e8:	18fa      	adds	r2, r7, r3
 80044ea:	1cfb      	adds	r3, r7, #3
 80044ec:	7819      	ldrb	r1, [r3, #0]
 80044ee:	2302      	movs	r3, #2
 80044f0:	f7ff ff54 	bl	800439c <i2c_write>
 80044f4:	0003      	movs	r3, r0
 80044f6:	b25b      	sxtb	r3, r3
}
 80044f8:	0018      	movs	r0, r3
 80044fa:	46bd      	mov	sp, r7
 80044fc:	b004      	add	sp, #16
 80044fe:	bd80      	pop	{r7, pc}

08004500 <VL53L0X_UpdateByte>:
    buf[1] = data>>16&0xFF;
    buf[0] = data>>24&0xFF;
    return i2c_write(Dev->I2cDevAddr, index, buf, 4);
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData){
 8004500:	b590      	push	{r4, r7, lr}
 8004502:	b085      	sub	sp, #20
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
 8004508:	000c      	movs	r4, r1
 800450a:	0010      	movs	r0, r2
 800450c:	0019      	movs	r1, r3
 800450e:	1cfb      	adds	r3, r7, #3
 8004510:	1c22      	adds	r2, r4, #0
 8004512:	701a      	strb	r2, [r3, #0]
 8004514:	1cbb      	adds	r3, r7, #2
 8004516:	1c02      	adds	r2, r0, #0
 8004518:	701a      	strb	r2, [r3, #0]
 800451a:	1c7b      	adds	r3, r7, #1
 800451c:	1c0a      	adds	r2, r1, #0
 800451e:	701a      	strb	r2, [r3, #0]

    int32_t status_int;
    uint8_t data;

    status_int = i2c_read(Dev->I2cDevAddr, index, &data, 1);
 8004520:	687a      	ldr	r2, [r7, #4]
 8004522:	23ae      	movs	r3, #174	; 0xae
 8004524:	005b      	lsls	r3, r3, #1
 8004526:	5cd0      	ldrb	r0, [r2, r3]
 8004528:	230b      	movs	r3, #11
 800452a:	18fa      	adds	r2, r7, r3
 800452c:	1cfb      	adds	r3, r7, #3
 800452e:	7819      	ldrb	r1, [r3, #0]
 8004530:	2301      	movs	r3, #1
 8004532:	f7ff ff75 	bl	8004420 <i2c_read>
 8004536:	0003      	movs	r3, r0
 8004538:	60fb      	str	r3, [r7, #12]

    if (status_int != 0){
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d002      	beq.n	8004546 <VL53L0X_UpdateByte+0x46>
        return  status_int;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	b25b      	sxtb	r3, r3
 8004544:	e01a      	b.n	800457c <VL53L0X_UpdateByte+0x7c>
    }

    data = (data & AndData) | OrData;
 8004546:	230b      	movs	r3, #11
 8004548:	18fb      	adds	r3, r7, r3
 800454a:	781b      	ldrb	r3, [r3, #0]
 800454c:	1cba      	adds	r2, r7, #2
 800454e:	7812      	ldrb	r2, [r2, #0]
 8004550:	4013      	ands	r3, r2
 8004552:	b2da      	uxtb	r2, r3
 8004554:	1c7b      	adds	r3, r7, #1
 8004556:	781b      	ldrb	r3, [r3, #0]
 8004558:	4313      	orrs	r3, r2
 800455a:	b2da      	uxtb	r2, r3
 800455c:	230b      	movs	r3, #11
 800455e:	18fb      	adds	r3, r7, r3
 8004560:	701a      	strb	r2, [r3, #0]
    return i2c_write(Dev->I2cDevAddr, index, &data, 1);
 8004562:	687a      	ldr	r2, [r7, #4]
 8004564:	23ae      	movs	r3, #174	; 0xae
 8004566:	005b      	lsls	r3, r3, #1
 8004568:	5cd0      	ldrb	r0, [r2, r3]
 800456a:	230b      	movs	r3, #11
 800456c:	18fa      	adds	r2, r7, r3
 800456e:	1cfb      	adds	r3, r7, #3
 8004570:	7819      	ldrb	r1, [r3, #0]
 8004572:	2301      	movs	r3, #1
 8004574:	f7ff ff12 	bl	800439c <i2c_write>
 8004578:	0003      	movs	r3, r0
 800457a:	b25b      	sxtb	r3, r3
}
 800457c:	0018      	movs	r0, r3
 800457e:	46bd      	mov	sp, r7
 8004580:	b005      	add	sp, #20
 8004582:	bd90      	pop	{r4, r7, pc}

08004584 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data){
 8004584:	b580      	push	{r7, lr}
 8004586:	b086      	sub	sp, #24
 8004588:	af00      	add	r7, sp, #0
 800458a:	60f8      	str	r0, [r7, #12]
 800458c:	607a      	str	r2, [r7, #4]
 800458e:	230b      	movs	r3, #11
 8004590:	18fb      	adds	r3, r7, r3
 8004592:	1c0a      	adds	r2, r1, #0
 8004594:	701a      	strb	r2, [r3, #0]
    uint8_t tmp = 0;
 8004596:	2313      	movs	r3, #19
 8004598:	18fb      	adds	r3, r7, r3
 800459a:	2200      	movs	r2, #0
 800459c:	701a      	strb	r2, [r3, #0]
    int ret = i2c_read(Dev->I2cDevAddr, index, &tmp, 1);
 800459e:	68fa      	ldr	r2, [r7, #12]
 80045a0:	23ae      	movs	r3, #174	; 0xae
 80045a2:	005b      	lsls	r3, r3, #1
 80045a4:	5cd0      	ldrb	r0, [r2, r3]
 80045a6:	2313      	movs	r3, #19
 80045a8:	18fa      	adds	r2, r7, r3
 80045aa:	230b      	movs	r3, #11
 80045ac:	18fb      	adds	r3, r7, r3
 80045ae:	7819      	ldrb	r1, [r3, #0]
 80045b0:	2301      	movs	r3, #1
 80045b2:	f7ff ff35 	bl	8004420 <i2c_read>
 80045b6:	0003      	movs	r3, r0
 80045b8:	617b      	str	r3, [r7, #20]
    *data = tmp;
 80045ba:	2313      	movs	r3, #19
 80045bc:	18fb      	adds	r3, r7, r3
 80045be:	781a      	ldrb	r2, [r3, #0]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	701a      	strb	r2, [r3, #0]
    // printf("%u\n", tmp);
    return ret;
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	b25b      	sxtb	r3, r3
}
 80045c8:	0018      	movs	r0, r3
 80045ca:	46bd      	mov	sp, r7
 80045cc:	b006      	add	sp, #24
 80045ce:	bd80      	pop	{r7, pc}

080045d0 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data){
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b086      	sub	sp, #24
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	60f8      	str	r0, [r7, #12]
 80045d8:	607a      	str	r2, [r7, #4]
 80045da:	230b      	movs	r3, #11
 80045dc:	18fb      	adds	r3, r7, r3
 80045de:	1c0a      	adds	r2, r1, #0
 80045e0:	701a      	strb	r2, [r3, #0]
    uint8_t buf[2];
    int ret = i2c_read(Dev->I2cDevAddr, index, buf, 2);
 80045e2:	68fa      	ldr	r2, [r7, #12]
 80045e4:	23ae      	movs	r3, #174	; 0xae
 80045e6:	005b      	lsls	r3, r3, #1
 80045e8:	5cd0      	ldrb	r0, [r2, r3]
 80045ea:	2310      	movs	r3, #16
 80045ec:	18fa      	adds	r2, r7, r3
 80045ee:	230b      	movs	r3, #11
 80045f0:	18fb      	adds	r3, r7, r3
 80045f2:	7819      	ldrb	r1, [r3, #0]
 80045f4:	2302      	movs	r3, #2
 80045f6:	f7ff ff13 	bl	8004420 <i2c_read>
 80045fa:	0003      	movs	r3, r0
 80045fc:	617b      	str	r3, [r7, #20]
    uint16_t tmp = 0;
 80045fe:	2312      	movs	r3, #18
 8004600:	18fb      	adds	r3, r7, r3
 8004602:	2200      	movs	r2, #0
 8004604:	801a      	strh	r2, [r3, #0]
    tmp |= buf[1]<<0;
 8004606:	2310      	movs	r3, #16
 8004608:	18fb      	adds	r3, r7, r3
 800460a:	785b      	ldrb	r3, [r3, #1]
 800460c:	b299      	uxth	r1, r3
 800460e:	2312      	movs	r3, #18
 8004610:	18fb      	adds	r3, r7, r3
 8004612:	2212      	movs	r2, #18
 8004614:	18ba      	adds	r2, r7, r2
 8004616:	8812      	ldrh	r2, [r2, #0]
 8004618:	430a      	orrs	r2, r1
 800461a:	801a      	strh	r2, [r3, #0]
    tmp |= buf[0]<<8;
 800461c:	2310      	movs	r3, #16
 800461e:	18fb      	adds	r3, r7, r3
 8004620:	781b      	ldrb	r3, [r3, #0]
 8004622:	021b      	lsls	r3, r3, #8
 8004624:	b21a      	sxth	r2, r3
 8004626:	2312      	movs	r3, #18
 8004628:	18fb      	adds	r3, r7, r3
 800462a:	2100      	movs	r1, #0
 800462c:	5e5b      	ldrsh	r3, [r3, r1]
 800462e:	4313      	orrs	r3, r2
 8004630:	b21a      	sxth	r2, r3
 8004632:	2312      	movs	r3, #18
 8004634:	18fb      	adds	r3, r7, r3
 8004636:	801a      	strh	r2, [r3, #0]
    // printf("%u\n", tmp);
    *data = tmp;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2212      	movs	r2, #18
 800463c:	18ba      	adds	r2, r7, r2
 800463e:	8812      	ldrh	r2, [r2, #0]
 8004640:	801a      	strh	r2, [r3, #0]
    return ret;
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	b25b      	sxtb	r3, r3
}
 8004646:	0018      	movs	r0, r3
 8004648:	46bd      	mov	sp, r7
 800464a:	b006      	add	sp, #24
 800464c:	bd80      	pop	{r7, pc}

0800464e <VL53L0X_RdDWord>:

VL53L0X_Error  VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data){
 800464e:	b580      	push	{r7, lr}
 8004650:	b088      	sub	sp, #32
 8004652:	af00      	add	r7, sp, #0
 8004654:	60f8      	str	r0, [r7, #12]
 8004656:	607a      	str	r2, [r7, #4]
 8004658:	230b      	movs	r3, #11
 800465a:	18fb      	adds	r3, r7, r3
 800465c:	1c0a      	adds	r2, r1, #0
 800465e:	701a      	strb	r2, [r3, #0]
    uint8_t buf[4];
    int ret = i2c_read(Dev->I2cDevAddr, index, buf, 4);
 8004660:	68fa      	ldr	r2, [r7, #12]
 8004662:	23ae      	movs	r3, #174	; 0xae
 8004664:	005b      	lsls	r3, r3, #1
 8004666:	5cd0      	ldrb	r0, [r2, r3]
 8004668:	2314      	movs	r3, #20
 800466a:	18fa      	adds	r2, r7, r3
 800466c:	230b      	movs	r3, #11
 800466e:	18fb      	adds	r3, r7, r3
 8004670:	7819      	ldrb	r1, [r3, #0]
 8004672:	2304      	movs	r3, #4
 8004674:	f7ff fed4 	bl	8004420 <i2c_read>
 8004678:	0003      	movs	r3, r0
 800467a:	61fb      	str	r3, [r7, #28]
    uint32_t tmp = 0;
 800467c:	2300      	movs	r3, #0
 800467e:	61bb      	str	r3, [r7, #24]
    tmp |= buf[3]<<0;
 8004680:	2314      	movs	r3, #20
 8004682:	18fb      	adds	r3, r7, r3
 8004684:	78db      	ldrb	r3, [r3, #3]
 8004686:	001a      	movs	r2, r3
 8004688:	69bb      	ldr	r3, [r7, #24]
 800468a:	4313      	orrs	r3, r2
 800468c:	61bb      	str	r3, [r7, #24]
    tmp |= buf[2]<<8;
 800468e:	2314      	movs	r3, #20
 8004690:	18fb      	adds	r3, r7, r3
 8004692:	789b      	ldrb	r3, [r3, #2]
 8004694:	021b      	lsls	r3, r3, #8
 8004696:	001a      	movs	r2, r3
 8004698:	69bb      	ldr	r3, [r7, #24]
 800469a:	4313      	orrs	r3, r2
 800469c:	61bb      	str	r3, [r7, #24]
    tmp |= buf[1]<<16;
 800469e:	2314      	movs	r3, #20
 80046a0:	18fb      	adds	r3, r7, r3
 80046a2:	785b      	ldrb	r3, [r3, #1]
 80046a4:	041b      	lsls	r3, r3, #16
 80046a6:	001a      	movs	r2, r3
 80046a8:	69bb      	ldr	r3, [r7, #24]
 80046aa:	4313      	orrs	r3, r2
 80046ac:	61bb      	str	r3, [r7, #24]
    tmp |= buf[0]<<24;
 80046ae:	2314      	movs	r3, #20
 80046b0:	18fb      	adds	r3, r7, r3
 80046b2:	781b      	ldrb	r3, [r3, #0]
 80046b4:	061b      	lsls	r3, r3, #24
 80046b6:	001a      	movs	r2, r3
 80046b8:	69bb      	ldr	r3, [r7, #24]
 80046ba:	4313      	orrs	r3, r2
 80046bc:	61bb      	str	r3, [r7, #24]
    *data = tmp;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	69ba      	ldr	r2, [r7, #24]
 80046c2:	601a      	str	r2, [r3, #0]
    // printf("%zu\n", tmp);
    return ret;
 80046c4:	69fb      	ldr	r3, [r7, #28]
 80046c6:	b25b      	sxtb	r3, r3
}
 80046c8:	0018      	movs	r0, r3
 80046ca:	46bd      	mov	sp, r7
 80046cc:	b008      	add	sp, #32
 80046ce:	bd80      	pop	{r7, pc}

080046d0 <__libc_init_array>:
 80046d0:	b570      	push	{r4, r5, r6, lr}
 80046d2:	2600      	movs	r6, #0
 80046d4:	4d0c      	ldr	r5, [pc, #48]	; (8004708 <__libc_init_array+0x38>)
 80046d6:	4c0d      	ldr	r4, [pc, #52]	; (800470c <__libc_init_array+0x3c>)
 80046d8:	1b64      	subs	r4, r4, r5
 80046da:	10a4      	asrs	r4, r4, #2
 80046dc:	42a6      	cmp	r6, r4
 80046de:	d109      	bne.n	80046f4 <__libc_init_array+0x24>
 80046e0:	2600      	movs	r6, #0
 80046e2:	f000 f90b 	bl	80048fc <_init>
 80046e6:	4d0a      	ldr	r5, [pc, #40]	; (8004710 <__libc_init_array+0x40>)
 80046e8:	4c0a      	ldr	r4, [pc, #40]	; (8004714 <__libc_init_array+0x44>)
 80046ea:	1b64      	subs	r4, r4, r5
 80046ec:	10a4      	asrs	r4, r4, #2
 80046ee:	42a6      	cmp	r6, r4
 80046f0:	d105      	bne.n	80046fe <__libc_init_array+0x2e>
 80046f2:	bd70      	pop	{r4, r5, r6, pc}
 80046f4:	00b3      	lsls	r3, r6, #2
 80046f6:	58eb      	ldr	r3, [r5, r3]
 80046f8:	4798      	blx	r3
 80046fa:	3601      	adds	r6, #1
 80046fc:	e7ee      	b.n	80046dc <__libc_init_array+0xc>
 80046fe:	00b3      	lsls	r3, r6, #2
 8004700:	58eb      	ldr	r3, [r5, r3]
 8004702:	4798      	blx	r3
 8004704:	3601      	adds	r6, #1
 8004706:	e7f2      	b.n	80046ee <__libc_init_array+0x1e>
 8004708:	08004b0c 	.word	0x08004b0c
 800470c:	08004b0c 	.word	0x08004b0c
 8004710:	08004b0c 	.word	0x08004b0c
 8004714:	08004b10 	.word	0x08004b10

08004718 <malloc>:
 8004718:	b510      	push	{r4, lr}
 800471a:	4b03      	ldr	r3, [pc, #12]	; (8004728 <malloc+0x10>)
 800471c:	0001      	movs	r1, r0
 800471e:	6818      	ldr	r0, [r3, #0]
 8004720:	f000 f862 	bl	80047e8 <_malloc_r>
 8004724:	bd10      	pop	{r4, pc}
 8004726:	46c0      	nop			; (mov r8, r8)
 8004728:	20000014 	.word	0x20000014

0800472c <free>:
 800472c:	b510      	push	{r4, lr}
 800472e:	4b03      	ldr	r3, [pc, #12]	; (800473c <free+0x10>)
 8004730:	0001      	movs	r1, r0
 8004732:	6818      	ldr	r0, [r3, #0]
 8004734:	f000 f80e 	bl	8004754 <_free_r>
 8004738:	bd10      	pop	{r4, pc}
 800473a:	46c0      	nop			; (mov r8, r8)
 800473c:	20000014 	.word	0x20000014

08004740 <memcpy>:
 8004740:	2300      	movs	r3, #0
 8004742:	b510      	push	{r4, lr}
 8004744:	429a      	cmp	r2, r3
 8004746:	d100      	bne.n	800474a <memcpy+0xa>
 8004748:	bd10      	pop	{r4, pc}
 800474a:	5ccc      	ldrb	r4, [r1, r3]
 800474c:	54c4      	strb	r4, [r0, r3]
 800474e:	3301      	adds	r3, #1
 8004750:	e7f8      	b.n	8004744 <memcpy+0x4>
	...

08004754 <_free_r>:
 8004754:	b570      	push	{r4, r5, r6, lr}
 8004756:	0005      	movs	r5, r0
 8004758:	2900      	cmp	r1, #0
 800475a:	d010      	beq.n	800477e <_free_r+0x2a>
 800475c:	1f0c      	subs	r4, r1, #4
 800475e:	6823      	ldr	r3, [r4, #0]
 8004760:	2b00      	cmp	r3, #0
 8004762:	da00      	bge.n	8004766 <_free_r+0x12>
 8004764:	18e4      	adds	r4, r4, r3
 8004766:	0028      	movs	r0, r5
 8004768:	f000 f8ae 	bl	80048c8 <__malloc_lock>
 800476c:	4a1d      	ldr	r2, [pc, #116]	; (80047e4 <_free_r+0x90>)
 800476e:	6813      	ldr	r3, [r2, #0]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d105      	bne.n	8004780 <_free_r+0x2c>
 8004774:	6063      	str	r3, [r4, #4]
 8004776:	6014      	str	r4, [r2, #0]
 8004778:	0028      	movs	r0, r5
 800477a:	f000 f8a6 	bl	80048ca <__malloc_unlock>
 800477e:	bd70      	pop	{r4, r5, r6, pc}
 8004780:	42a3      	cmp	r3, r4
 8004782:	d909      	bls.n	8004798 <_free_r+0x44>
 8004784:	6821      	ldr	r1, [r4, #0]
 8004786:	1860      	adds	r0, r4, r1
 8004788:	4283      	cmp	r3, r0
 800478a:	d1f3      	bne.n	8004774 <_free_r+0x20>
 800478c:	6818      	ldr	r0, [r3, #0]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	1841      	adds	r1, r0, r1
 8004792:	6021      	str	r1, [r4, #0]
 8004794:	e7ee      	b.n	8004774 <_free_r+0x20>
 8004796:	0013      	movs	r3, r2
 8004798:	685a      	ldr	r2, [r3, #4]
 800479a:	2a00      	cmp	r2, #0
 800479c:	d001      	beq.n	80047a2 <_free_r+0x4e>
 800479e:	42a2      	cmp	r2, r4
 80047a0:	d9f9      	bls.n	8004796 <_free_r+0x42>
 80047a2:	6819      	ldr	r1, [r3, #0]
 80047a4:	1858      	adds	r0, r3, r1
 80047a6:	42a0      	cmp	r0, r4
 80047a8:	d10b      	bne.n	80047c2 <_free_r+0x6e>
 80047aa:	6820      	ldr	r0, [r4, #0]
 80047ac:	1809      	adds	r1, r1, r0
 80047ae:	1858      	adds	r0, r3, r1
 80047b0:	6019      	str	r1, [r3, #0]
 80047b2:	4282      	cmp	r2, r0
 80047b4:	d1e0      	bne.n	8004778 <_free_r+0x24>
 80047b6:	6810      	ldr	r0, [r2, #0]
 80047b8:	6852      	ldr	r2, [r2, #4]
 80047ba:	1841      	adds	r1, r0, r1
 80047bc:	6019      	str	r1, [r3, #0]
 80047be:	605a      	str	r2, [r3, #4]
 80047c0:	e7da      	b.n	8004778 <_free_r+0x24>
 80047c2:	42a0      	cmp	r0, r4
 80047c4:	d902      	bls.n	80047cc <_free_r+0x78>
 80047c6:	230c      	movs	r3, #12
 80047c8:	602b      	str	r3, [r5, #0]
 80047ca:	e7d5      	b.n	8004778 <_free_r+0x24>
 80047cc:	6821      	ldr	r1, [r4, #0]
 80047ce:	1860      	adds	r0, r4, r1
 80047d0:	4282      	cmp	r2, r0
 80047d2:	d103      	bne.n	80047dc <_free_r+0x88>
 80047d4:	6810      	ldr	r0, [r2, #0]
 80047d6:	6852      	ldr	r2, [r2, #4]
 80047d8:	1841      	adds	r1, r0, r1
 80047da:	6021      	str	r1, [r4, #0]
 80047dc:	6062      	str	r2, [r4, #4]
 80047de:	605c      	str	r4, [r3, #4]
 80047e0:	e7ca      	b.n	8004778 <_free_r+0x24>
 80047e2:	46c0      	nop			; (mov r8, r8)
 80047e4:	2000009c 	.word	0x2000009c

080047e8 <_malloc_r>:
 80047e8:	2303      	movs	r3, #3
 80047ea:	b570      	push	{r4, r5, r6, lr}
 80047ec:	1ccd      	adds	r5, r1, #3
 80047ee:	439d      	bics	r5, r3
 80047f0:	3508      	adds	r5, #8
 80047f2:	0006      	movs	r6, r0
 80047f4:	2d0c      	cmp	r5, #12
 80047f6:	d21e      	bcs.n	8004836 <_malloc_r+0x4e>
 80047f8:	250c      	movs	r5, #12
 80047fa:	42a9      	cmp	r1, r5
 80047fc:	d81d      	bhi.n	800483a <_malloc_r+0x52>
 80047fe:	0030      	movs	r0, r6
 8004800:	f000 f862 	bl	80048c8 <__malloc_lock>
 8004804:	4a25      	ldr	r2, [pc, #148]	; (800489c <_malloc_r+0xb4>)
 8004806:	6814      	ldr	r4, [r2, #0]
 8004808:	0021      	movs	r1, r4
 800480a:	2900      	cmp	r1, #0
 800480c:	d119      	bne.n	8004842 <_malloc_r+0x5a>
 800480e:	4c24      	ldr	r4, [pc, #144]	; (80048a0 <_malloc_r+0xb8>)
 8004810:	6823      	ldr	r3, [r4, #0]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d103      	bne.n	800481e <_malloc_r+0x36>
 8004816:	0030      	movs	r0, r6
 8004818:	f000 f844 	bl	80048a4 <_sbrk_r>
 800481c:	6020      	str	r0, [r4, #0]
 800481e:	0029      	movs	r1, r5
 8004820:	0030      	movs	r0, r6
 8004822:	f000 f83f 	bl	80048a4 <_sbrk_r>
 8004826:	1c43      	adds	r3, r0, #1
 8004828:	d12c      	bne.n	8004884 <_malloc_r+0x9c>
 800482a:	230c      	movs	r3, #12
 800482c:	0030      	movs	r0, r6
 800482e:	6033      	str	r3, [r6, #0]
 8004830:	f000 f84b 	bl	80048ca <__malloc_unlock>
 8004834:	e003      	b.n	800483e <_malloc_r+0x56>
 8004836:	2d00      	cmp	r5, #0
 8004838:	dadf      	bge.n	80047fa <_malloc_r+0x12>
 800483a:	230c      	movs	r3, #12
 800483c:	6033      	str	r3, [r6, #0]
 800483e:	2000      	movs	r0, #0
 8004840:	bd70      	pop	{r4, r5, r6, pc}
 8004842:	680b      	ldr	r3, [r1, #0]
 8004844:	1b5b      	subs	r3, r3, r5
 8004846:	d41a      	bmi.n	800487e <_malloc_r+0x96>
 8004848:	2b0b      	cmp	r3, #11
 800484a:	d903      	bls.n	8004854 <_malloc_r+0x6c>
 800484c:	600b      	str	r3, [r1, #0]
 800484e:	18cc      	adds	r4, r1, r3
 8004850:	6025      	str	r5, [r4, #0]
 8004852:	e003      	b.n	800485c <_malloc_r+0x74>
 8004854:	428c      	cmp	r4, r1
 8004856:	d10e      	bne.n	8004876 <_malloc_r+0x8e>
 8004858:	6863      	ldr	r3, [r4, #4]
 800485a:	6013      	str	r3, [r2, #0]
 800485c:	0030      	movs	r0, r6
 800485e:	f000 f834 	bl	80048ca <__malloc_unlock>
 8004862:	0020      	movs	r0, r4
 8004864:	2207      	movs	r2, #7
 8004866:	300b      	adds	r0, #11
 8004868:	1d23      	adds	r3, r4, #4
 800486a:	4390      	bics	r0, r2
 800486c:	1ac3      	subs	r3, r0, r3
 800486e:	d0e7      	beq.n	8004840 <_malloc_r+0x58>
 8004870:	425a      	negs	r2, r3
 8004872:	50e2      	str	r2, [r4, r3]
 8004874:	e7e4      	b.n	8004840 <_malloc_r+0x58>
 8004876:	684b      	ldr	r3, [r1, #4]
 8004878:	6063      	str	r3, [r4, #4]
 800487a:	000c      	movs	r4, r1
 800487c:	e7ee      	b.n	800485c <_malloc_r+0x74>
 800487e:	000c      	movs	r4, r1
 8004880:	6849      	ldr	r1, [r1, #4]
 8004882:	e7c2      	b.n	800480a <_malloc_r+0x22>
 8004884:	2303      	movs	r3, #3
 8004886:	1cc4      	adds	r4, r0, #3
 8004888:	439c      	bics	r4, r3
 800488a:	42a0      	cmp	r0, r4
 800488c:	d0e0      	beq.n	8004850 <_malloc_r+0x68>
 800488e:	1a21      	subs	r1, r4, r0
 8004890:	0030      	movs	r0, r6
 8004892:	f000 f807 	bl	80048a4 <_sbrk_r>
 8004896:	1c43      	adds	r3, r0, #1
 8004898:	d1da      	bne.n	8004850 <_malloc_r+0x68>
 800489a:	e7c6      	b.n	800482a <_malloc_r+0x42>
 800489c:	2000009c 	.word	0x2000009c
 80048a0:	200000a0 	.word	0x200000a0

080048a4 <_sbrk_r>:
 80048a4:	2300      	movs	r3, #0
 80048a6:	b570      	push	{r4, r5, r6, lr}
 80048a8:	4c06      	ldr	r4, [pc, #24]	; (80048c4 <_sbrk_r+0x20>)
 80048aa:	0005      	movs	r5, r0
 80048ac:	0008      	movs	r0, r1
 80048ae:	6023      	str	r3, [r4, #0]
 80048b0:	f000 f80c 	bl	80048cc <_sbrk>
 80048b4:	1c43      	adds	r3, r0, #1
 80048b6:	d103      	bne.n	80048c0 <_sbrk_r+0x1c>
 80048b8:	6823      	ldr	r3, [r4, #0]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d000      	beq.n	80048c0 <_sbrk_r+0x1c>
 80048be:	602b      	str	r3, [r5, #0]
 80048c0:	bd70      	pop	{r4, r5, r6, pc}
 80048c2:	46c0      	nop			; (mov r8, r8)
 80048c4:	20000d2c 	.word	0x20000d2c

080048c8 <__malloc_lock>:
 80048c8:	4770      	bx	lr

080048ca <__malloc_unlock>:
 80048ca:	4770      	bx	lr

080048cc <_sbrk>:
 80048cc:	4b05      	ldr	r3, [pc, #20]	; (80048e4 <_sbrk+0x18>)
 80048ce:	0002      	movs	r2, r0
 80048d0:	6819      	ldr	r1, [r3, #0]
 80048d2:	2900      	cmp	r1, #0
 80048d4:	d101      	bne.n	80048da <_sbrk+0xe>
 80048d6:	4904      	ldr	r1, [pc, #16]	; (80048e8 <_sbrk+0x1c>)
 80048d8:	6019      	str	r1, [r3, #0]
 80048da:	6818      	ldr	r0, [r3, #0]
 80048dc:	1882      	adds	r2, r0, r2
 80048de:	601a      	str	r2, [r3, #0]
 80048e0:	4770      	bx	lr
 80048e2:	46c0      	nop			; (mov r8, r8)
 80048e4:	200000a4 	.word	0x200000a4
 80048e8:	20000d30 	.word	0x20000d30

080048ec <_write>:
 80048ec:	2258      	movs	r2, #88	; 0x58
 80048ee:	2001      	movs	r0, #1
 80048f0:	4b01      	ldr	r3, [pc, #4]	; (80048f8 <_write+0xc>)
 80048f2:	4240      	negs	r0, r0
 80048f4:	601a      	str	r2, [r3, #0]
 80048f6:	4770      	bx	lr
 80048f8:	20000d2c 	.word	0x20000d2c

080048fc <_init>:
 80048fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048fe:	46c0      	nop			; (mov r8, r8)
 8004900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004902:	bc08      	pop	{r3}
 8004904:	469e      	mov	lr, r3
 8004906:	4770      	bx	lr

08004908 <_fini>:
 8004908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800490a:	46c0      	nop			; (mov r8, r8)
 800490c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800490e:	bc08      	pop	{r3}
 8004910:	469e      	mov	lr, r3
 8004912:	4770      	bx	lr
